%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: ECCES_logo.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Elke Scholz%%CreationDate: 15.11.2007%%BoundingBox: 0 0 368 146%%HiResBoundingBox: 0 0 367.5660 145.4209%%CropBox: 0 0 367.5660 145.4209%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 8840 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FFC2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9%C2C9C2C9CAFD06FFCAC192BB929892BB99C199C199C199C199C199C199C1%99C199C199C199C199C199C199C199C199C199C199C199C199C199C199C1%99C199C199C199C199C199C199C199C199C199C199C199C199C199C199C1%99C199C199C199C199C199C199C199C199C199C199C199C199C199C199C1%99C199C199C199BB929899FD04FFCAC198BB92BBC9FD73FFC9BB99FFFFFF%C192BB92C2CAFD75FFCA9999FFCF92BB98BBFD78FFC9BBCAA09892BBC3FD%79FF92C9C998BB92FD13FFC2C9C9C999C2C9FD60FFC1A0A0BB9298FD12FF%A79892BB99FFA0BB99CAFD5EFF99C2C998BB99FD12FFC9C2C999BB99FFC9%BB98C9FD14FF5227F87DFD20FF7D27F827FD21FFC2C2A0BB92C1FD12FFCF%FFFFCF989899FFC39892C9FD13FF5253FFFF7DA8A87DA87D7DA87D53A8FF%7D7D7DA8FFA87D7DFF7D7DFFFF537D7DFFFFFF7D277DFF7DFF53FF7DA87D%7D52A8FD18FF99C2C992BB99FD16FFCA98BB99FFC3BB92C9FD12FF272728%FFF8A87D5259272752F827F8A8F8272727A82728277D7D5252FF2727277D%FFFF5227FFFFFF7D27FF27A8272727F8FD18FFBBC2A09892C1FD17FFC292%989FFF999892CAFD11FFF87DA8FFF87D522E5227FFF8527D2784F8A852F8%7DF827F8A85227F8A8F8FF277DFFFF2E27FFFFFF7D27FFF8A8F8A87DF8A8%FD17FF92C2C992BBC2FD18FFBB92BBCAFF99BB99FD11FFF87D7DA82727F8%7D277DFFFD0427A8F852F8527D275252A82727277D27FF527DFFFFA8F852%527D7D2727277E27522727FD18FFBBC2A09892C9FD18FFC39892BBCFC992%BB99FD10FF7D527DA8FF527DA87D7DFFA87D52A8A8F8527DA8FF7D527DFF%7DA852A852FF7DA8FFFFFFA8527DA8FF7DA853A8F87D53FD19FF92C9C998%BBA0FD19FF99BB92C9FFC292BBC9845A85A9FD1AFFA827FD1BFFA827FD1A%FFC9BBA0A0BB92C2FD19FFC9929892FFCA9892BB7D0D070D2FA9FD18FF7D%7DFD1CFF52FD1AFFCA92C2C998BBC9FD17FF7E5A84BB92BBC2FFA0BB98C9%A8A9A8A97EFD0AFFA87DFD0DFFF8A8FFFFFFA8FD0CFF27A8FFFFA8A8A8FD%1FFFCABBC2A0BB92CAFD05FFCFC1C79FC8C1C79FC8C8C9CAFFFFFF845A07%0D075AA09892BBCFCF92BB98CA2F0D07547EFD07FFA827F82728FD0BFF7D%27FFFFFFA852FD0CFFF87DFFFF5227527DFD0DFF27A8FD0FFFCA92C2C992%BBC9FD09FFC9C9C1C09EC0C0C0C1A92F0D072F0D7EA8FF98BB92C9FFC292%BBC25A072F0D0D5AFD06FF5227FFFFFFA852277DFFFD045227FFA8F85227%A87D7D7D5227A8FFA82727A8A82752F8A8FFFF2752A8FF28FF52A87D2727%FF525227FF522727A87E527DFD0BFFA0BBC2A09892CAFD0CFFCAC89EC1A1%54070D072F7EFFA9847EC2929898FFCA9892BBA85A592F070DA8FD05FFF8%A8FFFFFF27F852F8A8F852F827275284F87D272E53277DF87DF8A8F852F8%7DF8275227A8FFFF27F8F8FF277DF87D2727F852272E2727A8F8A8A82752%A8FD0BFFC292C2C992BBFD10FF843007300D84FFFF5A300730C9BB92BBC9%FF99BB98C9FFFFFF3007A9FD05FF2752FFFFFFF87D7D277D27FF527D7D52%7D27FF2752277D5259A827A827277DA8277DA8F8FFFFFFF8A8FFFF522752%7DF8527DFFF8A87D52A827FFFF7D27A8FD0BFFC2BBC2A09892FD0FFF5A0D%070D2FFFA97E070D070D07FF929892C2FFC992BB98FFFFFF5A0DA8FD05FF%7DF8F827A827F82727A8F8FFF8A852527DF8F827A852525253A8F8FFF8F8%F8FF27F8F827FFFF7D27F8F87DA8F8FFA827F827A827A85252FF27525227%27A8FD0BFFC292C9C998BBFD0EFF5A0D072F7EFFA8540D0D072F5AFFFFC1%98BB92FFFFBB92BBC9FFFF542FFD08FFA8A8FFFFA8A8FFFFA8FFA8FFFFA8%FFA8A8A8FFA8FFA8FFFFA8FFFFA8A8FFFFA8FFA8FFFFFFA8A8A8FFA8FFFF%FFA8A8A8FFA8FFA8FFFFFFA8FFA8FD0DFFC1BBA0A0BB92FD0DFF530D070D%7EFF7E0D070D072FA8FFFFFF9FBB9298A0FF9F9892C2FF8407A9FD4FFFC1%92C2C998C1FD0CFF7E300D2F7EFF7E2F07300D5AA7C7C1CFFFCA98BB92C2%FFCA92BB99A90DA9FD50FFBBBBC2A0BB99FD0BFFA80D070D7EFF840D070D%0784C8C09EC09ECFCABB929892FFFF9992BBA7FD09FF2727F8FD12FFA8F8%FD32FFC192C2C992C2FD0BFF540D0D53FFA92F072F0D85FFC7C0C09EC0C0%FF99BB98BBC9FFC2BB92C2FD08FFA82759A8A87DFFA8A87D7D7DA8FF7D7D%7EFF59A8A8FF7D27FFFFA87D7DA8A87DA8FFFF7D7DA859FFA8A8A87D7DA8%FD1CFF98BBC2A09899FD0AFF84070D0DFFFF54070D077EFFFFCAC19EC09E%C09FC192BB92C2FFC9929892FD09FF5227A8A8F8FF277DF827F8277DF827%277DF8F8A8FF7D27FFFF52F827277D5227A85227277DF8A8525227F82727%FD1CFF9892C2C992C2FD0AFF2F300DA9FFA90D2F075AFFFF7EA9FFC1C0C1%C0C7C2BB98BB99FFFFBB92BBCAFD09FF52277D27FF277D27A87DF852F827%277D27FFFFFF7D52FFFFF827F87D7D27F8A8272752A8F8FF527DF827F87D%FD1CFF92BBC2A098A0FD09FF7E0D075AFFFF0D0D072FA8FFFF5484FFC9C0%9EC09EC992BB9298CAFF999892C9FD07FF7D2727F8A8F852F87DF852F852%52F8287D5352FFFFFF52277D7D27F87D7D2727277D27F8A8A82727275327%F87D7DFD1CFF9892C9C998C9FD09FF5A0D0D7EFF7E0D072F7EFFFFFF0DA9%FFFFC8C09EC0C9BB92BB98C9FFC298BB99FD07FFA87D7DA8FFA87D7D7D27%527DA8FF7D527DA87DFFFFFF7D7D59A8A85252FFA87D52A8F85227FFA87D%7DFFA85252FD1CFFCF98BBA0A0BBA0FD09FF2F0D07FFFF2F070D2FFFFFFF%A80D84FFFFFF9EC09EC9929892BBA0FFA1BB9298FD0FFFA8F8FD17FF7D27%27F8A8FD23FFA7BB92C2C998C9FD09FF300D7EFFFF0D2F07A9FFFFFF7E0D%A9FFFFFFCFC0C1C8BB92BB98C2FFFF98BB92CFFD0EFFA8A8FD18FF7D7DA8%FD24FFCF98BBC2A0BBC9FD08FFAF070D7EFF530D072FFD04FF070DA8FD04%FFC89EC8999892BB98FFFFC19298A0FD06FF7D52FD04FF7D53FD19FFA852%A8FD25FFA7BB92C2C992CFFD08FFA80D07FFFF30072F7EFFFFFF7E0D07FD%05FFCFC0C1C298BB92BBCFFF9FBB98C2FD06FF2827A8FFFFFFF827FD0EFF%A87D7DFD08FF7DF8A8FFA827FD22FFC992BBC2A098A7FD08FFA9072FFFFF%070D07FFFFFFA82F070DFD06FFA0C0A0BB929892C9FFC992BB98FD06FF27%F8FFFFFFA8F827FD0EFF7DF87DFD09FFA8FFFF27F8FD22FFA09892C2C992%FD09FFA92F2FFF842F075AFFFFFF5A0D2F53FD07FFC0CF98BB92BBC2FFC9%BB98BBFD06FFF827FFFFFFA8F852FFFF5227F8277DFFFF52F8277D7D2727%27527DFF52272752A87D27A85227F852527D27FFFFA8277E99BB99FFFFC9%99C1CAFFC9C199C9FFC999BBC2FD06FFC992BBC2A098FD0AFF0754FF7E07%0D5AFFFF5A070D0784FD07FFC8A0BB929892C2FFFF92BB92CAFD05FF27F8%52275227F827FF27F82752F8F87D7DF827277D5227F85227A82727F827F8%FF27F87D52F827277D7DF852FF27F8A8C19998A0CA92BB92C1CA9898BB98%CF92C19998FD06FFA09892C9C998FD0AFF542FFF532F0DA9FF5A0D0D0730%FD08FFCACF92BB98BB99FFFFBB92BBC3FD04FFA8F827F827F827F8527D27%27FFFF7DF87D522727A8FFFF5227A8FF7D2727FD04FF27F8FFA82728FFFF%FFF852A82752FFFFCF98C2A0BBCAC192C998C999BBFFBB99C198FD06FFC2%98BBA0A0BBFD0AFF5954FF54070D7E2F070D070D84FD0AFF9892BB9298FF%FF999892C2FD04FF84F827FFFFFF5227527DF87DFFFF7D2752A8F827F87D%FF52F8A8FF7DF87DFD04FFF827FFA8F852FFFFFF27F852F8FFFFFF9FBBC9%C192FF999899BBCAC292CF929892C2FD06FF99BB92C2C999FD0BFF54FF2F%300D2F07300D2F5AFD0BFF99BB98BB92CFFFC992C1CAFD04FFA8F852FFFF%FF7DF87D7D2752FFFF52F8A87DFF522727FF52277DFF7D2727FFFFAFFF27%F8FFA82727FFFFFF5227F852FFFFC9BBC2FF99BBFFBB99C998FF99C1C2BB%CAC298FD06FFC298BBC2A0C1FD0DFF0D070D070D070D53FD0CFFC192BB92%98A7FFC3C2CAFD05FF53F852FFFFFF27277DFFF8272727F852FFF8F827F8%7DFF52F8F852FFF8F8F82752FFF852FFA8F827F8FFFFA8F8F87DFFCA9992%C1A0C292BB92C9A1BB9898A0C992C192BBFD06FF99BB92C2C999FD0DFF0D%0D072F0D2F7EFD0DFFC2BB92BB98C9FD09FFA828A8FFFFFF7D27FFFFA852%52287DFFFF7D52277DFFFFA85228A8FFFF525252A8A85252FFFF7D277DFF%FF7D2728FFFFC999C199C9FFC299C9FFFFA0C2C2FFCFC299C2CAFD06FFC1%92BBC2A0C1FD0DFFA9070D075AA8FD0EFFC292BB99C9FD34FFA827F8A8FD%1CFF929892C2C999FD0EFFAF7EFD49FF7D27F8A8FD1CFFCFBB92BBC2C998%CAFD58FFA827A8FD1DFFC9929892C9FF98C2FD77FFCF98BB98BBCAFFC292%C9FD75FFCA929892BBA0FFFFFFC292C2C9CFC9CFCACFC9CFCACFC9CFCACF%C9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CF%CACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACF%C9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CFCACFC9CF%CACFC9CFCACFC9CFCACFC9C298BB92BBC2FD05FFC999BB929892BB929892%BB929892BB929892BB929892BB929892BB929892BB929892BB929892BB92%9892BB929892BB929892BB929892BB929892BB929892BB929892BB929892%BB929892BB929892BB929892BB929892BB929892BB929892BB929892BB92%9892BB929892BB929892BB929892BB929892BB92BBA1FDFCFFFD06FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-11-15T15:03:54+01:00</xap:CreateDate>
         <xap:ModifyDate>2007-11-15T15:03:54+01:00</xap:ModifyDate>
         <xap:MetadataDate>2007-11-15T15:03:54+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>104</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7h+Y/wCY6+W1WwsFWbVp&#xA;l5/HukKGoDMAd2PYfSffVdo9o+D6Y/X9zu+yeyfzHrntjH2sD8t3H5oebbuSS01WeK3U0mui5ihU&#xA;9eIWMAFvZR881OnOq1EvTI++6H2O81cdFpYgSgCegqz9rOYfy+828B63nO9L9+CsAPvl3zaDs7N1&#xA;yy+39bpZdq6fpgj+Pgv/AOVfeZv+pyv/ALj/ANVMP8nZf9Vl9v62P8q4P9Qh+Pg7/lX3mb/qcr/7&#xA;j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/q&#xA;cr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3&#xA;mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7&#xA;/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh&#xA;+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4&#xA;P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/W&#xA;v8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qs&#xA;vt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7&#xA;L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1U&#xA;x/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7&#xA;j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/q&#xA;cr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3&#xA;mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+Pg7&#xA;/lX3mb/qcr/7j/1Ux/k7L/qsvt/Wv8q4P9Qh+PgoXHkjz9ag3Gm+bZridN0gukPA07ElpV+9cjLQ&#xA;6iO8cpJ8/wAFsh2lpJbTwgDvH4H3ph5L86Xmo3c+h67b/UvMFmKyR9FlQU+NNzvvXbYjcbdLtFrZ&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:26AF7F68951E11DCAF6F919E7CBDCF72</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:26AF7F69951E11DCAF6F919E7CBDCF72</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:BFD2B5E3903B11DCB4ABC928F372DEFF</stRef:instanceID>
            <stRef:documentID>uuid:BFD2B5E2903B11DCB4ABC928F372DEFF</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -145.421 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 145.421 li367.566 145.421 li367.566 0 licpclp[1 0 0 1 0 0 ] concat365.723 126.57 mo365.723 135.926 358.069 143.578 348.715 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.926 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv348.715 1.84229 li358.069 1.84229 365.723 9.49561 365.723 18.8501 cv365.723 126.57 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.7 1 0 cmykf3.685 lw0 lc0 lj4 ml[] 0 dshtrue sadj365.723 126.57 mo365.723 135.926 358.069 143.578 348.715 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.926 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv348.715 1.84229 li358.069 1.84229 365.723 9.49561 365.723 18.8501 cv365.723 126.57 licp0 0 0 0 cmyk@365.723 126.57 mo365.723 135.926 358.069 143.578 348.715 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.926 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv348.715 1.84229 li358.069 1.84229 365.723 9.49561 365.723 18.8501 cv365.723 126.57 licp0 0.7 1 0 cmykf355.952 124.119 mo355.428 132.678 347.985 139.682 339.409 139.682 cv19.9614 139.682 li11.3872 139.682 4.79932 132.678 5.32275 124.119 cv11.6118 21.3022 li12.1353 12.7437 19.5786 5.74072 28.1548 5.74072 cv347.6 5.74072 li356.176 5.74072 362.762 12.7437 362.239 21.3022 cv355.952 124.119 licp0 0 0 0 cmykf117.261 42.4985 mo113.263 41.7866 109.712 42.144 109.712 42.144 cv109.712 42.144 110.476 43.123 111.108 44.1777 cv111.743 45.2305 112.394 46.2461 112.394 46.2461 cv116.749 45.7852 120.884 45.6855 125.903 47.3066 cv125.903 47.3066 122.706 43.4688 117.261 42.4985 cvcp0.9 0.55 0 0 cmykf126.267 50.3379 mo121.101 48.502 114.446 49.9199 114.446 49.9199 cv117.642 56.0566 li117.642 56.0566 121.854 55.0078 124.788 56.4961 cv127.591 57.9258 128.769 60.8984 127.288 65.0078 cv125.933 68.7793 122.745 70.2695 122.683 70.3027 cv123.255 72.0625 li123.19 72.0742 131.446 69.0098 132.313 60.3203 cv132.761 55.8203 130.546 51.8613 126.267 50.3379 cvcpf130.687 114.525 mo124.614 78.1895 116.042 53.1973 100.761 33.2642 cv94.8662 25.5796 87.0381 20.2163 81.8936 18.6108 cv78.8818 17.6675 75.6357 17.7417 75.6357 17.7417 cv81.6123 19.522 88.3486 25.2427 95.7646 36.311 cv104.538 49.3809 116.192 74.1641 122.862 119.85 cv122.862 119.85 124.907 119.117 127.644 117.121 cv129.591 115.707 130.687 114.525 130.687 114.525 cvcp0 0.7 1 0 cmykf62.9888 52.9375 mo58.146 50.4316 46.8491 49.8984 41.5171 49.7402 cv35.3618 49.5293 28.4214 49.5 28.4214 49.5 cv28.4243 50.5957 li35.0161 50.8477 45.9937 53.0449 54.5776 58.0977 cv58.4155 54.9824 62.9888 52.9375 62.9888 52.9375 cvcp0 0.4 1 0 cmykf95.9639 94.3281 mo94.4502 84.0391 93.2314 78.2832 93.2314 78.2832 cv90.1025 74.6641 87.6982 71.9023 83.1514 68.6387 cv83.1514 68.6387 78.8213 71.2402 74.9189 75.1074 cv81.3174 80.5977 91.6943 95.832 97.6885 111.268 cv98.333 111.26 li98.333 111.26 97.3975 104.082 95.9639 94.3281 cvcpf115.804 122.996 mo111.255 87.2188 102.39 55.6328 89.8721 36.9351 cv84.0381 28.2427 76.6006 20.4097 71.0752 18.9712 cv64.0376 17.0913 65.2241 25.6733 65.2095 25.4243 cv65.9302 25.9253 li66.3042 24.6108 67.2427 22.1938 70.5186 23.7729 cv73.2881 25.1021 79.0693 30.6714 84.249 41.4849 cv92.6494 59.0313 96.3955 71.6523 102.624 126.195 cv102.624 126.195 105.968 125.984 109.442 125.119 cv113.204 124.182 115.804 122.996 115.804 122.996 cvcp0 0.7 1 0 cmykf73.5654 81.0098 mo71.5264 96.918 63.6792 110.674 51.0142 115.566 cv53.4438 102.113 59.8091 75.7813 89.1338 62.0781 cv88.7354 60.043 87.7803 57.4512 87.1494 56.0273 cv57.897 64.9082 43.9868 91.8086 43.5933 122.211 cv49.4243 127.754 li69.667 119.922 77.7705 105.904 74.7041 80.4414 cv73.5654 81.0098 licp0.9 0.55 0 0 cmykf83.499 46.7734 mo74.0186 49.4297 58.5884 54.5566 45.3726 70.3398 cv32.2739 85.9941 33.9556 102.441 34.98 108.641 cv35.8247 113.758 39.0493 117.836 39.0493 117.836 cv38.8481 111.904 37.0376 98.2539 46.6294 81.3301 cv56.813 63.3672 73.6299 55.3984 85.5654 51.4902 cv84.958 49.9219 84.1963 48.1563 83.499 46.7734 cvcpf152.229 38.4761 mo153.564 23.2222 li162.108 23.2222 li161.889 25.7324 li156.344 25.7324 li156.01 29.5581 li160.618 29.5581 li160.396 32.0923 li155.788 32.0923 li155.449 35.9658 li161.761 35.9658 li161.541 38.4761 li152.229 38.4761 licp0 0 0 1 cmykf170.685 38.4761 mo170.811 37.0415 li170.787 37.0415 li170.238 38.0938 169.124 38.7632 167.3 38.7632 cv164.924 38.7632 163.465 37.3286 163.67 34.9854 cv164.313 27.6455 li167.169 27.6455 li166.575 34.4355 li166.491 35.3916 167.009 36.3242 168.473 36.3242 cv169.865 36.3242 170.713 35.4155 170.801 34.4116 cv171.393 27.6455 li174.249 27.6455 li173.301 38.4761 li170.685 38.4761 licpf183.155 30.6338 mo182.969 30.562 182.594 30.4668 182.258 30.4668 cv180.986 30.4668 179.683 31.0884 179.497 33.2163 cv179.037 38.4761 li176.181 38.4761 li177.129 27.6455 li179.961 27.6455 li179.758 29.9644 li179.782 29.9644 li180.308 28.3389 181.607 27.478 183.095 27.478 cv183.407 27.478 183.907 27.5259 184.139 27.6216 cv183.155 30.6338 licpf195.851 33.0728 mo196.15 29.6538 193.761 27.3345 190.521 27.3345 cv187.257 27.3345 184.462 29.6538 184.163 33.0728 cv183.866 36.4678 186.255 38.7871 189.519 38.7871 cv192.783 38.7871 195.554 36.4678 195.851 33.0728 cvcp193.015 33.1206 mo192.847 35.0332 191.338 36.3721 189.73 36.3721 cv188.122 36.3721 186.847 35.0332 187.015 33.1206 cv187.184 31.1836 188.693 29.8447 190.301 29.8447 cv191.91 29.8447 193.185 31.1836 193.015 33.1206 cvcpf209.437 33.0488 mo209.764 29.3188 207.223 27.3584 204.703 27.3584 cv203.047 27.3584 201.86 28.0278 201.231 28.9126 cv201.207 28.9126 li201.318 27.6455 li198.75 27.6455 li197.318 43.999 li200.103 43.999 li200.632 37.9502 li201.028 38.3564 202.265 38.7632 203.417 38.7632 cv206.489 38.7632 209.138 36.4678 209.437 33.0488 cvcp206.575 33.1206 mo206.409 35.0093 204.946 36.3721 203.218 36.3721 cv201.946 36.3721 201.161 35.7505 200.86 35.3438 cv201.23 31.1123 li201.693 30.4902 202.563 29.8687 203.787 29.8687 cv205.515 29.8687 206.742 31.2075 206.575 33.1206 cvcpf221.831 31.5664 mo222.017 29.4385 220.425 27.3345 217.425 27.3345 cv214.593 27.3345 211.697 29.4385 211.381 33.0488 cv211.079 36.4917 213.59 38.7871 216.807 38.7871 cv218.223 38.7871 219.352 38.5 220.204 38.0938 cv220.717 35.5112 li219.929 36.0137 218.818 36.3721 217.546 36.3721 cv215.362 36.3721 214.239 34.9375 214.242 33.814 cv220.169 33.814 li221.683 32.4272 li221.752 32.188 221.805 31.8535 221.831 31.5664 cvcp219.101 31.4946 mo219.092 31.5903 219.062 31.6621 219.054 31.7578 cv214.494 31.7578 li214.843 30.5142 216.1 29.582 217.276 29.582 cv218.476 29.582 219.18 30.5859 219.101 31.4946 cvcpf233.195 37.1611 mo232.446 36.9458 231.97 36.3481 232.068 35.2246 cv232.416 31.2554 li232.642 28.6733 230.887 27.3345 228.223 27.3345 cv226.831 27.3345 225.434 27.6694 224.445 28.2671 cv224.777 30.5142 li225.613 30.0122 226.82 29.6538 227.875 29.6538 cv229.22 29.6538 229.742 30.2754 229.67 31.0884 cv229.625 31.6143 li227.229 31.8296 li225.221 32.0205 223.454 33.2876 223.276 35.3203 cv223.102 37.3047 224.508 38.7871 226.548 38.7871 cv227.821 38.7871 228.962 38.3564 229.56 37.2808 cv229.725 38.1411 230.445 38.6914 231.128 38.8345 cv233.195 37.1611 licp229.365 34.5791 mo229.26 35.7744 228.277 36.5874 227.197 36.5874 cv226.381 36.5874 225.906 35.9897 225.964 35.3203 cv226.027 34.603 226.572 33.8618 227.732 33.7661 cv229.449 33.6226 li229.365 34.5791 licpf242.007 38.4761 mo242.604 31.6621 li242.688 30.7056 242.167 29.7969 240.703 29.7969 cv239.311 29.7969 238.463 30.7056 238.375 31.71 cv237.784 38.4761 li234.927 38.4761 li235.875 27.6455 li238.467 27.6455 li238.342 29.0801 li238.366 29.0801 li238.914 28.0278 240.052 27.3584 241.876 27.3584 cv244.252 27.3584 245.713 28.769 245.508 31.1123 cv244.864 38.4761 li242.007 38.4761 licpf266.399 26.5933 mo265.695 26.1392 264.391 25.6846 262.975 25.6846 cv260.143 25.6846 257.364 27.5498 257.071 30.897 cv256.78 34.2202 259.207 36.1089 262.159 36.1089 cv263.694 36.1089 264.872 35.8223 265.777 35.3438 cv265.281 37.998 li264.355 38.4282 263.256 38.6436 261.504 38.6436 cv257.617 38.6436 253.577 35.9897 254.027 30.8491 cv254.479 25.6846 259.031 23.0308 262.871 23.0308 cv264.863 23.0308 266.29 23.4614 267.179 23.9873 cv266.399 26.5933 licpf275.775 38.4761 mo275.9 37.0415 li275.876 37.0415 li275.329 38.0938 274.213 38.7632 272.389 38.7632 cv270.013 38.7632 268.555 37.3286 268.76 34.9854 cv269.403 27.6455 li272.258 27.6455 li271.665 34.4355 li271.581 35.3916 272.099 36.3242 273.563 36.3242 cv274.956 36.3242 275.802 35.4155 275.89 34.4116 cv276.483 27.6455 li279.338 27.6455 li278.391 38.4761 li275.775 38.4761 licpf292.906 33.0488 mo293.232 29.3188 290.692 27.3584 288.171 27.3584 cv286.516 27.3584 285.33 28.0278 284.7 28.9126 cv284.675 28.9126 li284.787 27.6455 li282.218 27.6455 li280.787 43.999 li283.571 43.999 li284.101 37.9502 li284.497 38.3564 285.734 38.7632 286.885 38.7632 cv289.958 38.7632 292.606 36.4678 292.906 33.0488 cvcp290.043 33.1206 mo289.878 35.0093 288.415 36.3721 286.687 36.3721 cv285.415 36.3721 284.629 35.7505 284.329 35.3438 cv284.699 31.1123 li285.162 30.4902 286.032 29.8687 287.256 29.8687 cv288.984 29.8687 290.21 31.2075 290.043 33.1206 cvcpf162.037 51.5664 mo161.333 51.1123 160.029 50.6582 158.613 50.6582 cv155.781 50.6582 153.001 52.5234 152.708 55.8701 cv152.417 59.1934 154.844 61.082 157.796 61.082 cv159.333 61.082 160.509 60.7959 161.416 60.3174 cv160.919 62.9717 li159.993 63.4014 158.895 63.6172 157.143 63.6172 cv153.254 63.6172 149.215 60.9629 149.665 55.8223 cv150.117 50.6582 154.669 48.0039 158.509 48.0039 cv160.501 48.0039 161.928 48.4346 162.817 48.9609 cv162.037 51.5664 licpf175.464 58.0459 mo175.763 54.627 173.374 52.3076 170.134 52.3076 cv166.87 52.3076 164.075 54.627 163.776 58.0459 cv163.479 61.4414 165.868 63.7598 169.132 63.7598 cv172.396 63.7598 175.167 61.4414 175.464 58.0459 cvcp172.627 58.0938 mo172.46 60.0068 170.951 61.3457 169.343 61.3457 cv167.735 61.3457 166.46 60.0068 166.627 58.0938 cv166.797 56.1572 168.306 54.8184 169.915 54.8184 cv171.522 54.8184 172.797 56.1572 172.627 58.0938 cvcpf191.095 63.4492 mo191.691 56.6357 li191.775 55.6787 191.471 54.7705 189.911 54.7705 cv188.398 54.7705 187.791 55.6787 187.703 56.6836 cv187.111 63.4492 li184.255 63.4492 li184.851 56.6357 li184.935 55.6787 184.63 54.7705 183.07 54.7705 cv181.559 54.7705 180.951 55.6787 180.863 56.6836 cv180.271 63.4492 li177.415 63.4492 li178.363 52.6182 li180.931 52.6182 li180.851 54.0771 li180.875 54.0771 li181.423 53.0254 182.492 52.332 184.244 52.332 cv185.708 52.332 186.879 52.9297 187.313 54.0049 cv187.925 53.0488 189.308 52.332 190.916 52.332 cv193.412 52.332 194.798 53.7666 194.593 56.1094 cv193.951 63.4492 li191.095 63.4492 licpf208.524 57.9023 mo208.815 54.5791 206.612 52.332 203.54 52.332 cv202.388 52.332 201.08 52.7383 200.615 53.1211 cv201.201 46.4258 li198.393 46.4258 li197.007 62.2539 li197.88 62.9717 199.686 63.7363 201.821 63.7363 cv205.782 63.7363 208.229 61.2734 208.524 57.9023 cvcp205.632 58.0459 mo205.46 60.0068 204.047 61.3457 201.887 61.3457 cv201.119 61.3457 200.28 61.0586 199.941 60.8193 cv200.38 55.7988 li200.75 55.416 201.664 54.8418 202.912 54.8418 cv204.64 54.8418 205.791 56.2285 205.632 58.0459 cvcpf210.486 63.4492 mo211.435 52.6182 li214.338 52.6182 li213.391 63.4492 li210.486 63.4492 licp213.056 50.8252 mo212.527 50.8252 211.542 49.75 211.588 49.2236 cv211.634 48.6973 212.808 47.6221 213.336 47.6221 cv213.888 47.6221 214.826 48.6973 214.78 49.2236 cv214.734 49.75 213.607 50.8252 213.056 50.8252 cvcpf223.496 63.4492 mo224.091 56.6357 li224.175 55.6787 223.655 54.7705 222.191 54.7705 cv220.799 54.7705 219.951 55.6787 219.863 56.6836 cv219.27 63.4492 li216.414 63.4492 li217.362 52.6182 li219.955 52.6182 li219.829 54.0527 li219.854 54.0527 li220.402 53.001 221.541 52.332 223.365 52.332 cv225.741 52.332 227.201 53.7422 226.996 56.085 cv226.351 63.4492 li223.496 63.4492 licpf239.676 56.54 mo239.862 54.4121 238.27 52.3076 235.27 52.3076 cv232.438 52.3076 229.542 54.4121 229.226 58.0225 cv228.924 61.4648 231.436 63.7598 234.652 63.7598 cv236.068 63.7598 237.197 63.4736 238.048 63.0664 cv238.563 60.4844 li237.775 60.9863 236.664 61.3457 235.391 61.3457 cv233.208 61.3457 232.084 59.9111 232.087 58.7871 cv238.015 58.7871 li239.529 57.4004 li239.597 57.1611 239.651 56.8262 239.676 56.54 cvcp236.946 56.4678 mo236.938 56.5635 236.908 56.6357 236.899 56.7314 cv232.339 56.7314 li232.688 55.4873 233.946 54.5557 235.122 54.5557 cv236.322 54.5557 237.026 55.5596 236.946 56.4678 cvcpf251.958 63.4492 mo253.449 46.4258 li250.665 46.4258 li250.077 53.1445 li249.68 52.7383 248.444 52.332 247.292 52.332 cv244.22 52.332 241.571 54.627 241.272 58.0459 cv240.946 61.7754 243.486 63.7363 246.005 63.7363 cv247.662 63.7363 248.848 63.0664 249.478 62.1826 cv249.501 62.1826 li249.391 63.4492 li251.958 63.4492 licp249.468 60.1025 mo249.005 60.7236 248.135 61.3457 246.911 61.3457 cv245.183 61.3457 243.957 60.0068 244.124 58.0938 cv244.289 56.2051 245.752 54.8418 247.48 54.8418 cv248.752 54.8418 249.538 55.4639 249.838 55.8701 cv249.468 60.1025 licpf261.079 63.4492 mo262.414 48.1953 li270.958 48.1953 li270.738 50.7061 li265.194 50.7061 li264.859 54.5313 li269.467 54.5313 li269.246 57.0654 li264.637 57.0654 li264.298 60.9385 li270.61 60.9385 li270.39 63.4492 li261.079 63.4492 licpf277.482 63.5928 mo275.73 63.5928 li272.323 52.6182 li275.13 52.6182 li276.489 57.1133 li276.672 57.7588 276.885 58.6201 277.035 59.3848 cv277.083 59.3848 li277.365 58.6201 277.729 57.7588 278.025 57.1133 cv280.17 52.6182 li282.811 52.6182 li277.482 63.5928 licpf293.867 56.54 mo294.053 54.4121 292.461 52.3076 289.461 52.3076 cv286.629 52.3076 283.733 54.4121 283.417 58.0225 cv283.116 61.4648 285.626 63.7598 288.842 63.7598 cv290.258 63.7598 291.388 63.4736 292.24 63.0664 cv292.753 60.4844 li291.965 60.9863 290.854 61.3457 289.583 61.3457 cv287.398 61.3457 286.276 59.9111 286.278 58.7871 cv292.206 58.7871 li293.719 57.4004 li293.789 57.1611 293.841 56.8262 293.867 56.54 cvcp291.137 56.4678 mo291.128 56.5635 291.098 56.6357 291.09 56.7314 cv286.53 56.7314 li286.878 55.4873 288.136 54.5557 289.312 54.5557 cv290.512 54.5557 291.216 55.5596 291.137 56.4678 cvcpf302.766 63.4492 mo303.362 56.6357 li303.446 55.6787 302.925 54.7705 301.461 54.7705 cv300.07 54.7705 299.222 55.6787 299.134 56.6836 cv298.542 63.4492 li295.686 63.4492 li296.634 52.6182 li299.226 52.6182 li299.1 54.0527 li299.125 54.0527 li299.672 53.001 300.811 52.332 302.635 52.332 cv305.011 52.332 306.471 53.7422 306.266 56.085 cv305.622 63.4492 li302.766 63.4492 licpf316.233 54.9141 mo313.065 54.9141 li312.635 59.8154 li312.54 60.915 313.082 61.2979 314.138 61.2979 cv314.522 61.2979 314.814 61.25 315.086 61.1543 cv314.654 63.3535 li314.33 63.4971 313.793 63.5928 313.217 63.5928 cv311.009 63.5928 309.602 62.3975 309.788 60.2695 cv310.256 54.9141 li308.265 54.9141 li308.465 52.6182 li310.458 52.6182 li310.655 50.3711 li313.569 49.1514 li313.266 52.6182 li316.938 52.6182 li316.233 54.9141 licpf321.037 63.6406 mo319.668 63.6406 318.664 63.3301 317.887 62.876 cv317.812 60.1738 li318.618 60.8438 319.843 61.3691 321.091 61.3691 cv321.908 61.3691 322.498 60.9385 322.545 60.3887 cv322.598 59.791 322.195 59.457 321.402 59.1934 cv319.351 58.5 318.214 57.4961 318.372 55.7031 cv318.543 53.7422 320.243 52.4277 322.499 52.4277 cv323.77 52.4277 325.009 52.8096 325.463 53.0967 cv324.767 55.2969 li324.291 54.9854 323.48 54.6514 322.471 54.6514 cv321.728 54.6514 321.238 55.0332 321.19 55.583 cv321.144 56.1094 321.502 56.3965 322.344 56.6592 cv324.561 57.377 325.593 58.4766 325.432 60.3174 cv325.275 62.1104 323.796 63.6406 321.037 63.6406 cvcpf161.879 122.156 mo162.807 111.557 li151.287 111.557 li150.359 122.156 li145.319 122.156 li147.544 96.7334 li152.584 96.7334 li151.664 107.253 li163.184 107.253 li164.104 96.7334 li169.145 96.7334 li166.919 122.156 li161.879 122.156 licpf190.747 113.15 mo191.246 107.452 187.264 103.587 181.864 103.587 cv176.424 103.587 171.766 107.452 171.267 113.15 cv170.771 118.809 174.753 122.674 180.193 122.674 cv185.633 122.674 190.251 118.809 190.747 113.15 cvcp186.02 113.23 mo185.741 116.418 183.226 118.649 180.545 118.649 cv177.866 118.649 175.741 116.418 176.02 113.23 cv176.302 110.003 178.818 107.771 181.498 107.771 cv184.178 107.771 186.302 110.003 186.02 113.23 cvcpf198.247 122.475 mo195.966 122.475 194.292 121.957 192.998 121.2 cv192.872 116.697 li194.214 117.813 196.258 118.689 198.338 118.689 cv199.698 118.689 200.681 117.973 200.761 117.056 cv200.848 116.06 200.177 115.502 198.855 115.063 cv195.437 113.908 193.543 112.234 193.804 109.245 cv194.09 105.978 196.922 103.786 200.682 103.786 cv202.802 103.786 204.867 104.424 205.625 104.902 cv204.464 108.568 li203.669 108.05 202.318 107.492 200.638 107.492 cv199.398 107.492 198.582 108.13 198.502 109.046 cv198.425 109.923 199.023 110.401 200.425 110.84 cv204.12 112.035 205.84 113.868 205.571 116.937 cv205.31 119.925 202.846 122.475 198.247 122.475 cvcpf221.199 107.931 mo215.919 107.931 li215.204 116.1 li215.043 117.933 215.948 118.57 217.708 118.57 cv218.348 118.57 218.835 118.49 219.289 118.331 cv218.568 121.997 li218.027 122.236 217.133 122.396 216.173 122.396 cv212.493 122.396 210.147 120.403 210.458 116.856 cv211.239 107.931 li207.919 107.931 li208.254 104.105 li211.574 104.105 li211.902 100.359 li216.76 98.3271 li216.254 104.105 li222.374 104.105 li221.199 107.931 licpf237.727 109.206 mo236.407 108.289 235.075 107.971 233.515 107.971 cv230.595 107.971 227.894 110.042 227.615 113.23 cv227.339 116.378 229.714 118.49 232.674 118.49 cv234.314 118.49 235.583 118.172 237.125 117.454 cv236.282 121.599 li234.99 122.196 233.406 122.475 231.645 122.475 cv226.685 122.475 222.236 118.929 222.742 113.15 cv223.254 107.293 228.361 103.786 233.241 103.786 cv235.641 103.786 237.479 104.265 238.962 105.142 cv237.727 109.206 licpf240.954 122.156 mo242.533 104.105 li247.374 104.105 li245.793 122.156 li240.954 122.156 licp245.235 101.116 mo244.355 101.116 242.711 99.3232 242.789 98.4463 cv242.865 97.5703 244.822 95.7773 245.703 95.7773 cv246.623 95.7773 248.185 97.5703 248.109 98.4463 cv248.032 99.3232 246.155 101.116 245.235 101.116 cvcpf262.917 107.931 mo257.638 107.931 li256.922 116.1 li256.762 117.933 257.667 118.57 259.426 118.57 cv260.067 118.57 260.553 118.49 261.007 118.331 cv260.287 121.997 li259.746 122.236 258.852 122.396 257.892 122.396 cv254.211 122.396 251.866 120.403 252.176 116.856 cv252.958 107.931 li249.638 107.931 li249.972 104.105 li253.292 104.105 li253.621 100.359 li258.478 98.3271 li257.972 104.105 li264.092 104.105 li262.917 107.931 licpf275.184 120.403 mo271.814 127.376 268.653 130.126 265.047 131.561 cv262.345 128.611 li265.534 127.376 268.082 125.225 270.276 120.722 cv265.09 104.105 li269.811 104.105 li272.108 111.676 li272.414 112.752 272.848 114.187 273.089 115.541 cv273.169 115.541 li273.721 114.267 274.414 112.752 274.905 111.716 cv278.571 104.105 li283.01 104.105 li275.184 120.403 licpf152.231 87.4951 mo150.558 87.4951 149.045 87.0176 148.256 86.4678 cv148.203 83.5264 li149.299 84.3877 150.803 84.9609 152.381 84.9609 cv153.863 84.9609 154.908 84.2197 155.009 83.0723 cv155.109 81.9248 154.494 81.3027 152.934 80.8252 cv150.162 79.9883 148.909 78.458 149.106 76.2109 cv149.309 73.8916 151.206 71.8828 154.458 71.8828 cv156.06 71.8828 157.38 72.3613 157.945 72.7441 cv157.155 75.2061 li156.613 74.8477 155.459 74.3691 154.336 74.3691 cv152.925 74.3691 152.093 75.1348 152.014 76.043 cv151.932 76.9756 152.603 77.502 153.952 77.9316 cv156.626 78.793 158.279 80.1318 158.042 82.833 cv157.797 85.6309 155.77 87.4951 152.231 87.4951 cvcpf166.997 87.3281 mo167.123 85.8936 li167.099 85.8936 li166.552 86.9453 165.442 87.6152 163.625 87.6152 cv161.258 87.6152 159.805 86.1807 160.01 83.8379 cv160.652 76.4971 li163.498 76.4971 li162.903 83.2871 li162.82 84.2441 163.336 85.1768 164.794 85.1768 cv166.181 85.1768 167.026 84.2676 167.114 83.2637 cv167.706 76.4971 li170.551 76.4971 li169.603 87.3281 li166.997 87.3281 licpf183.586 81.9004 mo183.913 78.1709 181.382 76.2109 178.872 76.2109 cv177.222 76.2109 176.04 76.8799 175.413 77.7646 cv175.389 77.7646 li175.5 76.4971 li172.941 76.4971 li171.511 92.8506 li174.284 92.8506 li174.813 86.8018 li175.208 87.209 176.439 87.6152 177.587 87.6152 cv180.647 87.6152 183.287 85.3193 183.586 81.9004 cvcp180.735 81.9727 mo180.569 83.8613 179.111 85.2246 177.39 85.2246 cv176.123 85.2246 175.34 84.6025 175.041 84.1963 cv175.412 79.9639 li175.872 79.3428 176.74 78.7207 177.959 78.7207 cv179.68 78.7207 180.902 80.0596 180.735 81.9727 cvcpf195.455 80.4189 mo195.641 78.291 194.056 76.1865 191.067 76.1865 cv188.246 76.1865 185.36 78.291 185.044 81.9004 cv184.743 85.3438 187.244 87.6387 190.448 87.6387 cv191.858 87.6387 192.983 87.3516 193.832 86.9453 cv194.345 84.3633 li193.56 84.8652 192.452 85.2246 191.185 85.2246 cv189.009 85.2246 187.892 83.79 187.894 82.666 cv193.8 82.666 li195.308 81.2793 li195.376 81.04 195.43 80.7051 195.455 80.4189 cvcp192.735 80.3467 mo192.727 80.4424 192.697 80.5137 192.688 80.6094 cv188.146 80.6094 li188.494 79.3662 189.747 78.4336 190.918 78.4336 cv192.114 78.4336 192.815 79.4385 192.735 80.3467 cvcpf203.737 79.4863 mo203.552 79.4141 203.178 79.3184 202.843 79.3184 cv201.576 79.3184 200.278 79.9404 200.092 82.0684 cv199.632 87.3281 li196.787 87.3281 li197.734 76.4971 li200.556 76.4971 li200.353 78.8164 li200.376 78.8164 li200.901 77.1904 202.196 76.3301 203.678 76.3301 cv203.989 76.3301 204.487 76.3779 204.718 76.4736 cv203.737 79.4863 licpf210.773 87.3281 mo212.108 72.0742 li215.12 72.0742 li214.005 84.8174 li220.248 84.8174 li220.028 87.3281 li210.773 87.3281 licpf231.774 80.4189 mo231.959 78.291 230.375 76.1865 227.386 76.1865 cv224.565 76.1865 221.679 78.291 221.363 81.9004 cv221.062 85.3438 223.563 87.6387 226.766 87.6387 cv228.177 87.6387 229.302 87.3516 230.151 86.9453 cv230.664 84.3633 li229.878 84.8652 228.771 85.2246 227.503 85.2246 cv225.329 85.2246 224.21 83.79 224.213 82.666 cv230.119 82.666 li231.626 81.2793 li231.695 81.04 231.749 80.7051 231.774 80.4189 cvcp229.054 80.3467 mo229.045 80.4424 229.016 80.5137 229.007 80.6094 cv224.464 80.6094 li224.813 79.3662 226.066 78.4336 227.237 78.4336 cv228.432 78.4336 229.133 79.4385 229.054 80.3467 cvcpf242.615 86.0127 mo241.869 85.7979 241.395 85.2002 241.494 84.0762 cv241.84 80.1074 li242.066 77.5254 240.319 76.1865 237.665 76.1865 cv236.278 76.1865 234.886 76.5215 233.901 77.1191 cv234.231 79.3662 li235.064 78.8643 236.266 78.5059 237.319 78.5059 cv238.658 78.5059 239.176 79.127 239.106 79.9404 cv239.059 80.4658 li236.673 80.6816 li234.672 80.873 232.912 82.1396 232.734 84.1719 cv232.561 86.1563 233.961 87.6387 235.994 87.6387 cv237.26 87.6387 238.398 87.209 238.995 86.1328 cv239.158 86.9932 239.875 87.543 240.556 87.6865 cv242.615 86.0127 licp238.8 83.4307 mo238.696 84.626 237.716 85.4395 236.64 85.4395 cv235.827 85.4395 235.353 84.8418 235.412 84.1719 cv235.475 83.4551 236.018 82.7139 237.173 82.6182 cv238.884 82.4746 li238.8 83.4307 licpf250.354 89.0977 mo250.29 89.8389 249.434 90.6035 247.879 90.6035 cv246.278 90.6035 245.538 89.7666 245.618 88.8584 cv245.704 87.8779 246.507 87.1611 247.585 87.1367 cv249.124 87.5908 li249.985 87.8545 250.413 88.4277 250.354 89.0977 cvcp253.078 89.1211 mo253.251 87.1367 252.2 86.0371 250.252 85.3438 cv248.028 84.5313 li247.82 84.459 247.762 84.292 247.773 84.1719 cv247.806 83.79 248.197 83.6943 248.845 83.6699 cv251.17 83.5986 252.773 81.9482 252.936 80.084 cv252.984 79.5342 252.839 79.0078 252.67 78.7451 cv253.101 78.7451 253.711 78.6016 254.039 78.4102 cv253.731 76.1865 li253.306 76.4014 252.598 76.5693 252.048 76.5693 cv251.499 76.5693 250.955 76.4971 250.535 76.3779 cv250.115 76.2588 249.643 76.1865 249.045 76.1865 cv246.439 76.1865 244.629 77.7402 244.435 79.9639 cv244.314 81.3506 245.013 82.3789 245.875 82.9053 cv245.185 83.1445 244.481 83.8135 244.369 84.5547 cv245.57 85.8457 li244.423 86.1084 243.14 87.1133 242.986 88.8818 cv242.789 91.1299 244.67 92.8506 247.731 92.8506 cv250.744 92.8506 252.892 91.249 253.078 89.1211 cvcp250.438 79.9404 mo250.363 80.8008 249.511 81.5186 248.579 81.5186 cv247.575 81.5186 246.896 80.8008 246.971 79.9404 cv247.044 79.1035 247.853 78.3389 248.857 78.3389 cv249.861 78.3389 250.511 79.1035 250.438 79.9404 cvcpf262.176 87.3281 mo262.301 85.8936 li262.278 85.8936 li261.732 86.9453 260.621 87.6152 258.804 87.6152 cv256.437 87.6152 254.985 86.1807 255.19 83.8379 cv255.832 76.4971 li258.677 76.4971 li258.083 83.2871 li258 84.2441 258.515 85.1768 259.973 85.1768 cv261.36 85.1768 262.205 84.2676 262.292 83.2637 cv262.884 76.4971 li265.73 76.4971 li264.783 87.3281 li262.176 87.3281 licpf277.58 80.4189 mo277.766 78.291 276.181 76.1865 273.193 76.1865 cv270.372 76.1865 267.486 78.291 267.169 81.9004 cv266.869 85.3438 269.37 87.6387 272.573 87.6387 cv273.984 87.6387 275.109 87.3516 275.957 86.9453 cv276.47 84.3633 li275.685 84.8652 274.578 85.2246 273.31 85.2246 cv271.134 85.2246 270.017 83.79 270.02 82.666 cv275.925 82.666 li277.433 81.2793 li277.501 81.04 277.555 80.7051 277.58 80.4189 cvcp274.861 80.3467 mo274.852 80.4424 274.822 80.5137 274.814 80.6094 cv270.271 80.6094 li270.619 79.3662 271.873 78.4336 273.043 78.4336 cv274.239 78.4336 274.94 79.4385 274.861 80.3467 cvcpf282.872 122.177 mo282.967 121.084 li283.911 120.113 284.81 119.124 285.664 118.116 cv286.516 117.107 287.274 116.127 287.936 115.176 cv288.597 114.223 289.134 113.327 289.543 112.486 cv289.953 111.646 290.186 110.899 290.244 110.246 cv290.32 109.369 290.146 108.688 289.722 108.202 cv289.298 107.717 288.731 107.474 288.022 107.474 cv287.443 107.474 286.89 107.553 286.363 107.713 cv285.835 107.871 285.355 108.082 284.921 108.345 cv284.409 104.928 li284.958 104.611 285.607 104.354 286.352 104.158 cv287.097 103.963 287.927 103.864 288.841 103.864 cv289.718 103.864 290.52 103.995 291.244 104.257 cv291.967 104.518 292.582 104.9 293.089 105.405 cv293.595 105.909 293.969 106.535 294.212 107.282 cv294.455 108.029 294.533 108.897 294.447 109.887 cv294.382 110.615 294.198 111.349 293.89 112.086 cv293.583 112.824 293.192 113.562 292.716 114.299 cv292.242 115.037 291.701 115.779 291.093 116.526 cv290.487 117.273 289.853 118.011 289.193 118.739 cv294.596 118.739 li294.295 122.177 li282.872 122.177 licp0 0.7 1 0 cmykf305.357 108.837 mo304.974 107.876 304.466 107.396 303.832 107.396 cv303.197 107.396 302.604 107.881 302.052 108.851 cv301.501 109.82 301.141 111.275 300.971 113.216 cv300.798 115.193 300.903 116.658 301.287 117.609 cv301.669 118.561 302.179 119.036 302.814 119.036 cv303.448 119.036 304.041 118.561 304.589 117.609 cv305.139 116.658 305.501 115.193 305.674 113.216 cv305.845 111.257 305.74 109.797 305.357 108.837 cvcp308.867 117.391 mo308.428 118.566 307.88 119.542 307.224 120.316 cv306.568 121.092 305.835 121.665 305.029 122.039 cv304.22 122.412 303.378 122.599 302.5 122.599 cv301.623 122.599 300.808 122.412 300.054 122.039 cv299.304 121.665 298.667 121.092 298.147 120.316 cv297.626 119.542 297.25 118.566 297.016 117.391 cv296.783 116.214 296.737 114.823 296.877 113.218 cv297.016 111.631 297.305 110.249 297.744 109.073 cv298.183 107.896 298.731 106.922 299.386 106.146 cv300.042 105.372 300.779 104.798 301.596 104.424 cv302.414 104.051 303.261 103.864 304.139 103.864 cv305.017 103.864 305.828 104.051 306.57 104.424 cv307.312 104.798 307.943 105.372 308.464 106.146 cv308.985 106.922 309.361 107.896 309.595 109.073 cv309.828 110.249 309.875 111.631 309.737 113.218 cv309.596 114.823 309.306 116.214 308.867 117.391 cvcpf320.001 108.837 mo319.619 107.876 319.111 107.396 318.476 107.396 cv317.841 107.396 317.248 107.881 316.697 108.851 cv316.146 109.82 315.785 111.275 315.615 113.216 cv315.442 115.193 315.547 116.658 315.931 117.609 cv316.314 118.561 316.823 119.036 317.458 119.036 cv318.092 119.036 318.683 118.561 319.234 117.609 cv319.784 116.658 320.145 115.193 320.318 113.216 cv320.49 111.257 320.384 109.797 320.001 108.837 cvcp323.51 117.391 mo323.072 118.566 322.525 119.542 321.868 120.316 cv321.212 121.092 320.48 121.665 319.671 122.039 cv318.865 122.412 318.021 122.599 317.144 122.599 cv316.265 122.599 315.451 122.412 314.699 122.039 cv313.949 121.665 313.312 121.092 312.792 120.316 cv312.271 119.542 311.894 118.566 311.66 117.391 cv311.427 116.214 311.38 114.823 311.521 113.218 cv311.66 111.631 311.949 110.249 312.388 109.073 cv312.828 107.896 313.375 106.922 314.031 106.146 cv314.687 105.372 315.423 104.798 316.241 104.424 cv317.058 104.051 317.905 103.864 318.783 103.864 cv319.661 103.864 320.47 104.051 321.213 104.424 cv321.957 104.798 322.587 105.372 323.107 106.146 cv323.628 106.922 324.005 107.896 324.238 109.073 cv324.472 110.249 324.519 111.631 324.38 113.218 cv324.24 114.823 323.951 116.214 323.51 117.391 cvcpf334.663 107.615 mo334.292 107.261 333.808 107.083 333.21 107.083 cv332.632 107.083 332.126 107.261 331.695 107.615 cv331.262 107.97 331.022 108.418 330.974 108.959 cv330.932 109.444 331.09 109.883 331.447 110.275 cv331.806 110.667 332.314 110.947 332.97 111.115 cv333.621 110.947 334.134 110.667 334.513 110.275 cv334.894 109.883 335.104 109.444 335.146 108.959 cv335.194 108.418 335.033 107.97 334.663 107.615 cvcp334.601 116.072 mo334.457 115.793 334.264 115.541 334.023 115.316 cv333.782 115.093 333.513 114.906 333.217 114.757 cv332.923 114.607 332.628 114.495 332.337 114.421 cv332.05 114.495 331.755 114.607 331.454 114.757 cv331.152 114.906 330.874 115.093 330.621 115.316 cv330.368 115.541 330.15 115.793 329.966 116.072 cv329.784 116.353 329.677 116.661 329.648 116.997 cv329.621 117.314 329.664 117.613 329.781 117.893 cv329.895 118.173 330.06 118.416 330.276 118.621 cv330.492 118.826 330.748 118.984 331.046 119.097 cv331.345 119.209 331.662 119.265 331.998 119.265 cv332.333 119.265 332.666 119.209 332.992 119.097 cv333.32 118.984 333.609 118.826 333.86 118.621 cv334.111 118.416 334.318 118.178 334.483 117.906 cv334.646 117.637 334.742 117.333 334.771 116.997 cv334.8 116.661 334.744 116.353 334.601 116.072 cvcp338.125 119.32 mo337.748 120.011 337.248 120.599 336.626 121.084 cv336.006 121.569 335.289 121.943 334.473 122.204 cv333.658 122.465 332.774 122.596 331.823 122.596 cv330.872 122.596 330.011 122.465 329.242 122.204 cv328.472 121.943 327.822 121.574 327.294 121.099 cv326.767 120.622 326.375 120.039 326.118 119.349 cv325.861 118.658 325.771 117.874 325.847 116.996 cv325.898 116.418 326.042 115.886 326.281 115.4 cv326.52 114.915 326.804 114.486 327.136 114.112 cv327.466 113.739 327.822 113.422 328.199 113.16 cv328.578 112.899 328.93 112.703 329.258 112.572 cv328.669 112.273 328.161 111.779 327.736 111.088 cv327.31 110.397 327.136 109.613 327.212 108.736 cv327.275 108.027 327.472 107.374 327.804 106.776 cv328.136 106.18 328.578 105.666 329.128 105.236 cv329.679 104.807 330.318 104.471 331.048 104.229 cv331.779 103.985 332.573 103.864 333.431 103.864 cv334.29 103.864 335.067 103.985 335.763 104.229 cv336.46 104.471 337.046 104.807 337.523 105.236 cv337.998 105.666 338.35 106.188 338.576 106.805 cv338.802 107.42 338.882 108.092 338.819 108.82 cv338.785 109.213 338.68 109.6 338.507 109.982 cv338.333 110.365 338.122 110.72 337.869 111.047 cv337.617 111.373 337.339 111.662 337.037 111.914 cv336.734 112.166 336.428 112.357 336.119 112.488 cv336.423 112.619 336.743 112.815 337.074 113.076 cv337.406 113.338 337.709 113.664 337.983 114.057 cv338.256 114.448 338.474 114.892 338.636 115.387 cv338.798 115.881 338.853 116.418 338.802 116.996 cv338.728 117.855 338.501 118.63 338.125 119.32 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Elke Scholz) (Adjouri: Brand Consultants GmbH)%%Title: (ECCES_logo.eps)%%CreationDate: 15.11.2007 15:03 Uhr%AI9_DataStream%Gb"-6s,L@+N@+K)q%!3r?]5e&KbM3GN5Yiu=fPWnaCA`6dlW!@/e#9oma8Tk)/?.aT'+f($MO_d`@aB(A=R]r;sj"]pL4oB&uqsB%7`L9mO:7:<1-YU%mbPpm?bLpcp"d7[n^D"6`t[5^kBb?0*BsAe5JR2Q=5TN*\QNA]BQk-0P,30/.D68f7_G]Di+r)U*^@Aap%H9V%hnOMcp!#FnG>I\aJ+M.Ll&RLT*e41[C\d&Qn]P!0:[e:%]R+u#pq+FV[m)CXIX(h`lJ^Rr2_RB8jWT/.q!5PQYFiQ*qi>ZEoBQ9M%O'rHIe$$1"J,DdIP$[Z;_*<;Dq"4*W=20t`?[_UR2tHJtpn7Rhs8MrHLCZ-L)+]iDSpp\#hjlr[oASLEm6H3qqO<!6ji_SVGpVKq%s1;?Ns4^?%orh]8q>Jdc&$HZREO;3Ub]/c;S%l)%9LE#I>Ai^]H;418*6ZET+2M(*_:u,KHM-[k=+C"E@-@(QgCNbeq%lfrQ`hKf%S(mZZ5(EO710`uH*>&&X+.llQs2VUP5B'B,59'OScej0Dl:H^j^\dNm'(]H%("T!nn>hoE^OGiA<r1Y$`t,B2^&@3#0D:N9rl*&F%^3[OXi"s.Xp%DJU^<k7kMnL3Z(r0>e''QS?6WYhI@nZNcT[0nej6QKGpY'.,IOU3HMtaEiIf8u<6@GPJc2RG8l`\kcC[p'Q6O/(h%2ue[5k6PY)+$R>`CEjT53rOHnB3B,$r_#H5=8sITp%IK__,Q6h=JU!UbhXcea8O0l0*M_H0?=+jl@0fBrqHMY[)g"Hn?Z0n*!8E$%-\nRPh^RO5PjiBZr:JqKhr_C_7B9V^Y#_p0's25!Gjmo;5asLTAdhL!I\YF1BSF4j'<P"WZoXcIc-lukS5*bhn:4:V*br['+!0qI%_ZRZk&TbT)&"gp=nP0$G#s[Gt>%(2$M,p"-c]k&17ehfuQk=dVhMqnk(N[Gh]Yf]t'0Qq'lkqUr:Wscm!QCSu9Oa437k;dk5LJWP%!AIk&N1;jS(5X@8j>T)?Nh0bDf_BQIgt0VOn/khBIe\bk\:U5.5N@X[2d0X=^;@eq^PhpH-f/9T>^u\4a8s+Q[)2b1PH.5(+^Xtl%4OIjC,Bs"S2<4IfFgN@L*&!gB7urdR>^S/Np@Vl&s+`M"SPpkILMq7br"Sb?:UD<o@t)?&^Pe^tK@q8/F38[_+m/P&;Rb,Zdu%'C%7SZQ!/N@,4RM,'/*O3oQ&oSVtYDCMa@n/&!3d^&aq)SIpjQ'!41Y8/,@1NnFO7^&)425k3bdhlX/B?43qkS,-qj%0Mm?NEre(7TC%/?eAi&NM3.m1gR(<ZeM0Qi6KE+Y<I#^F9nMrJQf1XM=QaB>.`&oAAN5;@$ETo3Z9\^]*B1hYFm0Is/;N\$u9GrQTh9GC71)k.efH%p\0?B^\R?oF1u"2oA;>';4_:bn<<1\p\p2fAUZA+Ed>0%MI8'.`Xhku2"^scnaGu%[k`0Sf'OoFG]u++kk]YIqbR,k)=kmFs4%'u%:Z&VV%`(Fh*-B!amS3h!OA]aJS6?n&JiUYO"3oViKRD-BjP'b)r8("9S_-'$L\nu%%6P,j%mK+64sZma^iV^\mOS&rgb-&D7jkD_%Spf@@AKDob1L7W`>ieG^4pP;5D24)kl]&0CpE9&Y0t)komN:kl4KI;uSc$6`5t;UajAW:s*[$#UL0\flE(Ut(p6O'0;&RmODu4Cl%cZ[X,-/Ea'*:EojEU.7NMkBRrjF;.hr![Q<f7::+&oW>T5%bdNVFn<UD]+h#g+X)-]Xj,.7jXoMJ<d'S("bkY*b)bKBSgA;/,sM)%ZZV5Bef5hseSd;:_GSGO7]s,XX9"5HP^@t[<7XiUX[9g:Lku?W;g`Jrb?3,<cPRP>LjAkg\R$+-Ska[PkPJ-HF3G=_A`Pl^V,YFc%.Jd0>h(?WX=L:q6>auP#D9ig.^jI5G9H59rj;?g]!QRa`%Ped4=c;J<LA#tSX$I#j8`1*rWDY30;9D:&^_VE`<k+U-[Y"FI/P0`n%Qf@MN0WcR(>KYir9;PF0cA!_:m+]Ke_l-/Y'(V^Y,%&%&fP]*3cKK0FFfYE35S(k!OZd,RQm$/YIC8t6IVHuRI(2$RONutV'B[Fb%8F,JeXgf!;\*#N$Chjk^%Wq3Li+(\pHS0)W9.\1lpI6$T"bE17_0iFgP\5UO::FII*W)u+La%[N,.:6prpI@1kW`Hc&H`WO.BBP>%ZLDrT+7un@UM>N6jYqI7a*B`el^I)5<&PWWl+6.BFO^'._Zhnh/\oW*Ga;Dj/`ZY@d8uEAqL&3WcS9(T?!gV1G/PB-h0lQAE92?8%SoXtl/ieH'8iF>WFJCt7Dt".>N5+ma<'&$CcjJ8(:*T`-Ha:5Qm2]8OElp!(,5Y<*fnEY`a%?O>@H<#ETqa5"`ge0H=%WS2(19G^%.eX4RMii(0=:H3`Ve!_Z+bb$&cV)^>RoF[c8LC&eH^V1]k%E-83G8'4*@pu&SKUJgdY[nYZ`)MNrnkm)Yl;+ZYC!ME+L%`5M7nlE%YI"9G@:kC>,>Ce'<BaiV.+d)]T4(O2W46`0IjubUpVQ`g%QSHkFkrl*.0][Qo3,4UoI:P%FA@k:>.*Nu]1%!sdbtlh.53\E*8g<E%j0KhDX:O-lb)q47f$EjrHa8-]($"S``S<8\m6uHbbM1\PYs^Y1c>D*="S/(XS5e-p.e!2IW/OQ4Mn73Ogj=/)8rhi/:+>8PaJ@=<%s+U,(.CFe8Dng5fn8S?\o5BmDVm&d06;$7k#gT&0iqc9dq>KhKc0Q3Hgk2e:c_SMGo/>hBSH.I"SqF>*.G5FX8Eh<WgSp_dpg'5K%n*+/!90MH]#TZINAH<"5N#j;n3ld"^HhNRTU.L0:<`pjN<OVcWU`'PM6_iG,RS9MnKC4gdNPYE(3uOX/eV.n<P#\>ja"Ga^D^fm3%%cp<TU@3eod2@1(GGb]FG23_EM0$+mRa$J#PddeW4n*k;^:nuu>0i%'hDfIn2sccpgf7$gi^p$=/!`T8(Nc_srat=o4AjsPZnUMX%rWOnt%rOo*1=c+)8pX*.PQ'B]!uq%Gk;)T6$&A2'!$)(*j=K!1JDGa(%O7;t0`-LRb1-%FfNn2J<`,0b,@@iMPG+O*![Ygfm0oLJ%V%#Y],G.jE)AJc7cJ`GB.[W?CORFA`KNa=$LYJEM9O0l9I.[BUpE(J;2,+sDC2ts&3E(raUP7DQ>]7Tq#-"O>jbe>KCp$R4A@l2[%!'-CP\K,8q)3=S'`I1=RUtK5,H1of"`^1\keQd%iC'=o3l(:l+pDNCsI':/uK=0(RT9SIe`uP-/I<9sfn@aTT&Meu#XNZ%Nh_YP"%1:P(Oc\9fQS+_,'C=0H!O,sIgXPjWF5d/*?l1NVNC1'o1D=9k>$0@cT`#C!9jkg17(2Bb@426F!@eSJQ%dHuDgBX'sPi''a8DC->%A<j.@T/u5[G?Ssu;/J2ef5Ihc_/4D0-'mAW3R[=nf_(Al;FigpYYCV,SE'5rpg2C6gFIA6f;X]2'b@H]nl_iJRGAIQhI,-jCd^X1%T^2!6#%]6_J^:qCM=#`rdu.K:iHQ8`#MV-!LeK2Gp"nn_3Z?IM9g?*F,"+/SSlZ4f%Z@RaF``5)LP_G/H7`+FW.p?n'(WY-:q%5^%\oU(bQ.d.QY3Xq^:K)'"*<qhpR(f0@TVi(DkX9>$EAM9"X2f%/FinH$3kFHg'60>B/qAB/2pS^In4f@4>DnF52`4A%b<58QAnM`l%Z_pVP\E2"So,C<Df$\*k"*k^S!QCO_&M[)6%D]F=-*W04L""*m)`^^Eh.5@$"*Z(a9'A(BhJ.PArik4-PfR&u9CkAL_JMS:QWlnm%cG$J3%;)@pg0@S2Hg&u$8KFHOP7m0:Um/_7l?KP92TJalSk9<(ZQ*(AC(&PCW*SX[hK$Xj3VbqBa4=3[#91hMFkX)Ijlo3R*73$m%p>Y/7lkI34qeE=&m!bU%KXoe-ea'/;qJ'*q%*bE<?:!3*YVR7_UK1!(<:tG5e9*a9ED#Q>%<M2%,)i$:k+%qL\Y#;IkJ;"K><VK1%_^\lLFsj0"mh:!6@C':5^^&uEM":Y<l!-O3'3*l'=.Q+gs&I43*i=CAotCSoVUOThBsYX_8X8Q+dndRH)!CY?=#bKTET=+cnqq4d%hVs>+PAs(P^7kF@=,p6BdiuN3C-!mA>N1:g'!u--7fP0A*2h\,Q#bBBihXKVh4UZUg:R"I\IPqAB"?dDEU'lRfbjNhpCqAgKLJ+6%^l#\@oJOK<A_s3-S].gb^@"pCbLF1(Vq"s/N'L$4/EGbjXm-=p'DYs$hk#/;NS_%erMngdjP5GnF8\Gil./!dH6,>$s$fpb/=7L]%rl^Kt^@U7Wp@V4qcYoZO+8*nYL!PdKSXQ.e0i(a1.?a,V43.s.Xo@o6p!*M$T.P.-[/9nI8M*AMp=]&H?QhaiJ">H05mYjs*kV!d%p[=^1IEg+#htkIXY<I@34i;72rNH8#S[<kE(83I<^Xl9XYCHB?;*Oj2p[:<Frb$/!qsNr4[pQiGc)]m.hBOf?lf0XIoA<n<Ie_%T%Df1'rqj/D>H1c@PkHiK!^AdWek2kpds5Z9=qW5m2s)Pc!HM.!4Dt%Uth7ijal.,+?J,/m5C[('_qY8=Y&-)Lgh,b\jUrA8DhnFEF%C[e6onbFD]JDMC:hLGIc?]MmIp[2`ZlLWoJqUa=PT76h:m5M5?c5sCnm(^8\s1<c/p$q?tGE7)qHMLn:W#nVjqGr%q:1(^5mF/,V%hgLQ.35']cHN!O6QbWQef8nNQrcd\kYHAAm)uOl.rr&ba91@Lf?b@[B>X&,L+2<pBf:Vs1m5H-d2gF?Lq[]<Jg>2(mYPpJ/f&qO1%o:'r"YJ5@h');aK^V?!30[ARi(0Z-9<1,K<_<<#e^4,b"Wt57,5q)]fHh=jtiVNtMqcCOtYHBuSk^WTH@qne8(F!J.O!!8.Fo4Q[%nK&5Mja.Qie'#3Rh]ERsT7jZ!IeNL1ZaW8"07W`Tos_t#0:u3M6CnK@MVt%RQX>ZXhTFkkcb;bCkMtCQc,Y>2roI4bAIJ:4XQTJ)%Dgl`bYN'Z)a1JMbs*RoYs7)2O^5BZ&?a<b_=0U;n=*i6FF*la/lX[326b:auXhKP']"OQHWkF;'pb`!eobHi$*7BET%/G_>B>3g$%Fjem4]l*3po[W?*MKGrn.L."oE,O&Ek7L9?k\K--4P8u1^@(B2dat&'D@b],?UJ2V?HleV?c??39[:qTAl2G6?d$>qH-k/aIGNZ$%NYe$DIGNUmfW4>=frOD=fIJ%kl%hs(SNh'r%f]*k6'R2gW`.]0E]_3_BFjd04ChU^-qFoGp\FFDpWlX]n"/E#+4'iUp:NRBca-G6%'_K2OoDJUercEX6IsXEJqa%<iH=-*H&4dMJM&g\aI_%b7:,!I(WLqnDT#rL_0be/1%sQ@gmdEnpU>=Ua]7/B"l<UsD6;LH4]c:o3%DP,hChk"`SDK#4'\_YikEgqd4U9&k^+QN:-(FB&ugo=Z67NH&N+i,RBZ\UX6]\iH^^Cta<oR?#+f3Wb=g5N=N9,"..N65)2CU\/f%hHHt^Zn,/qAMHX&WmC!Z4k7/j>=\(geQRkb:_M1`FZG\Ao"<bE;n9dPB^)@Y>)MfM&s<X.'G("b^<`^)QZ)K:4Z?rdXNVHE\Xk<5%h'r*jK<e-Ip&J#BaohB1o=%?PT^8D+%,tQW=RVM;Dj;61;I<I>',iq\?/7"Oh(%5;V3J'7&W@DNa_tP\B<Te;lgEbTl`WI0XKR*C%C1j_rp+f)u9TE;%C<p,M.pfm6s2hna@9HsWJ(rTHZe,0/lZE+e(o+7;gU#MAGkJCEgV+/]YIC]Up<%$OFRaDFO,#MOY`T1g-_q<6%TDeWS^$HHV9l,E(ToDjqrf8B(_l%2JLQh^\_#Nr??rVLKXGI&"Nan'YFArqL^*p^#G?e!P?se/AK9=8DU;ah"Mfe1Tl#^,?9$pDu%c2lu7B,rajZ^A'?):E]+\Y.oSO7Rk8[;htJoD,p-E`_lrOuoQ0T>$qh%_B@MB'YqiDT.g4SBpses2R:YGBi$8gHcPS<sMtnTX&NL%05;-op2W;`[>mi1Nm)apft"uZs/=5AC8:>n#pJTN(L?7-$[\f;pfuE&kW3-pW\2:fjI[.>5]KVZB#S.>.*@(=PN([inITj"Qu1<o%h<JN)Ka/W=e.H.p9uqei)r(`]g^@=K*/"Y$_C&mL7JN_drs[k]45m)aiN!3WcQLDsA4B#_XpP+;iPRb1Msb.PH4[XsZCje_WZldj%436PAA.uS=c0Sap[0Il>+=j!nZR`?G[GKm=PF_1g46#l2+Jb#2W?f)eO^/VtT*PM.PMPk;G1DA#n3@QE8@%%eflij>Ibi.II$-)W%q<`eg7hDCdZ<nF$\!uaA6h^%3g!B+u?aiBN=kYERIQb(@A%G&G3/LQ&qukVV&2HnQ0GIA(g3jbhi`<FC'8!FV+,%slOC&W[UPS'[%6j"=$M;3qWE\Em'_Z:/OaqU+0&G?)_kR^``*\D+9%^c5a<\!I4_(#]`&jSI,1B,GePM$Hc:3S<Lr\inFfm75oQ'j!EPD-ik/,QK.%]4]f^=d;]/O7'R-\FO$D\[&$:ioJ$@#Hljkk;q]_1>?5XRWDW\=')CC9%fkS;"mO1*&K9INgCrY(t*XPOShE?[4(-hp7'Jp3++-N%J.KF%-fkR%"'uM\'oQc1;7Rq!S2m5a9?_+m/7=g</-Dc[>BbsD=STpD(#ZhV^f(9b+eEeCG</^;8DRQYc!I##TJu$)_<pFSYb(<d%R*O:lBB>Q!RGAj,G4VV+k%b1-DZ5Elp2[]Q/:X"c]Wi.\B9r,U'f1-=j)<KD^%/?+%VP)&2=pU3EVrDWpi*)V?SdUo?<gD+o)UkK%AN>bV^upL!I_>gN^,[>9<0Up(U>CPO^Z:S6]]ge-4o8RZ:R5eRgO(L.Z\R^`2OZb:T8)r5K7/(+M7<`(ejb"r[(X)DXseKC?2$,Q%"9*Um3e%%tl1f`Jhn=O8p?PdE3Eue^s)I]ubq7U+[(VKCY,,FUdl*ZK@9(jTVY5F\[B&$8@BZh^%rL]0k\GrpL$ed'C[S:_^ZW5\%rT87V]^@\]gWaO/l_#3RqJ)L$h7UnmQ00Z7?7'h*qJ1E(G..$daQpV<c0I2nGQ'Ye[d1-%H1fF_bu\1Xb/]^(4j?,4[l\CDF9a_L%/;7g!A-`bT>K4>Rn-AL,X0:F[k26.[1<KH@p!<V;,PeB0@N%hjDFF!2r:r8;hLn&iq)7SG-m&A8)g3kI%tD;&]/O./J%cB(2dm5H%^(%\5@1QFVfQ0[[56&oVI,FHTI-8Q?LVF=#_3^2(n,5<6hO]'VJ&LZWEsDWS0-Tr)'i43-I9eg^^[q-M':cgT([H6!"iObRT7;!3%c>=f-FKtaD>5VB(CmE2'FVImRIqS2>_:=IJJb>!9@1P8G_\1^+iH==)\G491(r8L`gO'7'S[O.0ElFbOYdOrjBK*Eij*Vo?J,Ag8%L]?u@`Tn%D`,4@%2t=(Pgg:q9^FaA0&/X2V*Fg\aDRhu+RQi&s9Zmi"/stUY6HTflT:TB'rT_r'g%"=arnhXT6I6MkjjBN8QIZ.q%5,*k#N:5dr5V0s*qP1e'0Cn:U(Z6Bqq=sRA5QA4Spm&_rkoX`UDtLO3EdT&!c?e?`(4E[En$i/f0C\RFJJTZuj*u9LP;f-#jA/#<%[u1*1I8!E`:[jH*DM3JHbhuTt4sMX<6>cB4DM14E;;Sa[DhS>knI'dpQ84KkTT\%aV&RffNr::N!N(5hlIBmq+DO$1csaIN$BI%-%U:MB,D9At$lV.^LC\p0>g$""gqa(Ug*Qq/Z;E:U$rMOV!a2B1Zml.d0itu?pe\9CKKRKZ"Rh1J`e!jn_4CG-Gj6_Y2aBNVG[RU^n%D8#1Zl,PV?Eg]2.j.s#IUWfBf*m+E%9gOh-HKn4O*&V,aK'?d2Ojr+HqkBd)5QVj0O=*]*jE/WA-4-$^(V8NJQ^\lr)O?jL6KK#h%bWl@O!Z+Yh6Qa;E/m@]uV]1GJ@n8Pa`?]q(*`6>8VM-i\XL-%sjh6J?JpE2tb';g%5=[,<"EZG7etJG[jLmZ^V]srTbee_S@KXB.%DAK<COECrHVfYupPU=j#%Gt<!*jRR.^4#uI/Zk(DkVj^$!f#,,p\7@FY6^#<.+nC1pZ-+glP"*fACX-BkYS#;qfn`sr0F&:.$WVO%'pQ,Si<NMdKJfo(LRR;opj?6:3BD7,Y*=8:9Ks3e'=jG`<2"X&6a/"+obb\C?*_kE_h8YlN)AGe=u"OT@QLA/8?DuTNO#,M=%_H@%FW/+B4Y;P:m2#/#M-MSRRSZ_r)$q'XX4?(Fc:&Np%V8(3qsEAKBE>@BnmI\R%,ir*+Uqk_=Dq`6$@HcUM+sQCL(:N_=?#23Hm[o&%-Hs8Pfbp"#DNPCJT-??&=Fu2@De.U%!Y,[_$&MUQj%bnqKFgf@#[@a+6HXh2AJAP!1SJl1!@9-Cr)gt1<>Z#naj(8r#uOc22S!g,%&Z!97OBuK-,02!01e8@f$A.GQ`%S3I$FVs7D$1W,0W`'Sr+$jX:"Eegl5,->HQ@8FM,Qu\1?8uORLBP87D=Wp@W_:<d@IpEXmmQ/%\>HUY0&rqJo.=ERJes6O%YEJr8n\t1&>1Y/+tNf#-tK:32K!QQct'DmX\-@-+oq^JYUYoDb1d2I/b4!do'QkqC4]*HKC'>(5SCK+%0i%@oQS9_7_.d#)"]eQ';2%Mn5V8]J!5g%LG\Qa8U0iGTMe.!P?UH$BJ7f4'8Cp-m4_jRB7[,?[>h:80pasAt$Q+!>jLn8J5_;<p%B#rl>5Ubr7XFEP5aN_=u+X^_[Eh#ET*t@0/+Jm/B"Di0+:!1fh6rKuS%>H-5)^3N1/p\[Q&O9VLP%_rOTjVF/L/>[]&nILD;9j`R%[qUZVcn.q!3N+@Sm0-8fEQFS%?p,C\gp1H2C[,G\V'mKdSP</)Qa[&P!Bi*d-I]&1PmJDpEus&4NC'UIo^SZUElEZNXRrD]OjC$j%:,Z2hkkqSSe/4A[XY3Z\0eFAo><kc4$R[bQE`3atfF@L8KCWc>bob#hI6r#Y1i3tSN<j1``PObnij_`RA6Y"uh]sMt/i$S@:km#2%[\2AO$;OtaS$oW!^MO\6kOQXSODJ7m'1$lCCje[<TXUse?)$]31/QmrhP7,)\:o\>8Q:B7KkiH0UoR$%H95_IjHB.LWgtPf#o5pD%WBc-0ab"Bg#RL95Tf3[+Cuk;h?P0\;PnlZ#e.s5mF?<Vdb*<>JMb(ga(2_)F<3.4<Td.[`n.E)p0i.:>H!@`"!".>]aF_PAU('cu%;;"CcMlPu`&X:<[67`F,'/Y9[eIbpN*(ZEu#N$-5d6<'aF9,ep]=81Wqhf7r#m*e.7CXKJ8^$ucKRW!1(UFKqNN!X]eejr*;f,1)%;OTXX9bCM1q1,@o-<:L2.p;OEWKBdp@]oqD<&UA%4r4+Pe/8,o\7"NtSV51E/94upSPX$-7*%W.b@AJ@,+8Zn!`b7#:_$e+"=OqO%M(PP2d>FfTpDM,P$@JOH:di/OK\b`O\fV8_'D+0S!FANu_!5D`e#pldW_eQ]D<XFFk9rs1N'%@\:(";[^j6/XeHm+nmX@KE\jm:a%`>^aMaA`%p_k<qC*Ep_G4e;CG7]n4.[%?G^A<_UU6W,-jW9u12.)<SOU[B1`BAMB464'"%;IhJU4Jd7aFhZWd$Je&s$"t!t=+p%X%em553bUuR6['*F`?$5TOGm_,\_&o@s@<mJVS_uY?gE4s[1Nn^.)?LJX!i1Z<!]LFDkVe/ZUMm?ok+NG&ZQEO'<5Fe2MGeFNj2Eu6%%#QFggS'SHTNDraVrP<-Eqpu%f?Hmc^>X.S-hIeA9fYRS-[&[1U3K$XI)3#6C(ntuD,j+2+ul?A.&^#1[]F4sl*-#!S%quL!'@u:%K5jdM^S7T0V"D+aW9jd>!?4TcV*U\&g3$Kr!!4ota51'\=7\!se9)lF+<ne1d#A3m!Wt^)p0?EYJ-cIm#m.H\KYq?M,d"H4njX09%gLVO=)n<H-MNdM9gsp4?1G4<1I7Y7/ERL`HX@oA-XFe%J#h>/l:_cTGZV4(R8C9-@`_o_f6[P-\`E!%=:.S(O&poY-EZh\T)cobE%@O<*h@$ku-WMu,+2<>12;8+5[W$s+D*HaDoVOY:0OMGIoW@927Ys>R8KF8kkm*teM19ePP9%3K6;beT4mT@9%HP$AifH'hn9K@1q%6"fM_H:phAq\9$qTjZ+f"(B<naNJ%=LWD`gj=pECeVg(=2+H:BM)27kH&Rd=851Zr8<t7G/5]&8AR_FFK`,4hUR%HR15*K_!</YB%LlE\D5-'DXSsi@C:CEFq)-P(G]P>MrpJQ>md#c_QC@aN%aC.*0p=d(8@`jln8(oPRJ<\"\1d2L]_X_H^8I&_X=1(G(a6@qL*^i]#%*LG0%d-mo0(:k1)Y:=d)a$F3+`?1juS<,DGC7udun%$8')KPU8gA40Q@%2\7hZYsd]J8oLJCVrAdDhV*1;@<T0?5$3f.%0oi:C3E%QM4C$ICJBQ0K&8C!G`ig_@DG<K>B*"3qf4D9Z"\?!_kuTV4n0!L'Xs!Sg*IM[)HoZ$V^U>F:#NPbp74q7?C=+D&rf!<.N@oJbN'e%5-&-aC7h9=]+hlY=G7qI"=l;<[b-TI$r[E5j+)&96rh/kaqnU#bXE6Mg%pS/2^q!&JrYi<ZHE;D?T9UkDRK:lK3\/DZUO(beIk1A%dWJV3QkI0,[\7b>U$<'ODaJ<+iZ;;T<(o)?7o]I)bCJ7rO7(/!fVtO0Wq7.Q`;ea2.db4OL.a+ufTJ+E8rOc]UbO8^R-YWj'HpX-%r2r)oOL.c=rGRD"XCR#",q[W1KU#WL+E3,]V%ti7o\Q7#:-qXP>1=*_%hgcaE&k!RfSM3obbtVp@c$B#&]CN>b$opJ#8[eJ##%_?%BK,57Tn(]4Z^NQ[VG)gl&=>GWUBXmBAiW`4gSUt=UM4^Nhnup#YUAUJ3jpAB(RQbe>+uUh$+,9/"LAb"[8;k84Dk<STRIFbr2CO$%Fs6<i<4bl%>sLk2"Wpia8UF=DLR;jL.71\YE_r$/A:`]k:Bhb,!CM\"f6&]O8>/Lj'^G!gP^c*LYEQdD-#I\B@hcW?<H^H.bf9C[%?XPX&@Z9Pi+dB9YIs+0AgnY%!G>jpbUk;LZ[c&Q=/QAj]2Ot7[eBR28?'TCW-nJuZ<Me'TZfrr=Jf:O]-SeH%mP\?.=hHWWUeO]d%_5t3`W"umGf0F5N$+aEoi!1&4QsJ<3#Rm/IC=fje[:!e%8K0D$_R/X)Mmur5nkbGMH"Y[$KqQGF3pBT\-Vg_F'mL;<cDkYVoL>?O%?#+PY\5h-AA:E=eF_HtQPGqh8IFQuJ=bk&=;XM]>AdZ;BFU^OS,ttWT-koS9R<8RH4iV3f!CtV;PD>C-Un(@1%=3]'1TR[p\'s?D%l5GUf)jjiP%=Ff=[-E;i>7GRUFVUea9A!BiF\q[RX0+bhei^&qVkL4m-Zi<Xb&5a\m':T8>B"g?)qE66'Cm`\>&Mgr_<3!eF/uH1%fK%*uWWNY4?q+FU':tq*NOfHa3NgB.%Ler.A[UeQN4bIS<@@8$nAinUPEBguB%9J^U))gtM[2Zmn#X)-Q$bISYhQT!VGW-9ZE0k$%7U9:ZJ$\Ah["f^#9nscgg7!,N?73G(U]\K"Pg#qeH1Yk&WLIuE6k4KN-=)=)0&_%-LKm%Aj5E#E1/ZSX-^e&^2ZN4$gY_"r0,27l%5EAX3O"`s?(oAgUaI@gSBBlbZ%m&7ro_?G`Z;Wn\gcf9O8Fq8d^Kh@1_t!'-I.tD+mWf`J\+k64Ndi`g!LSV2l]%k^\h`jU8`"s"%q?f@P4q`9=h),`u738c^9cjl,FPB@$=R,`2*;GY52m%bj<&*pGlM>tYPC*tsN]3,HW_'cD'90$'km1UkrK,Oh1#!sq*:&&AQs>I%%7Q=mK]-5;WPA32n96L3ak&G-0ea9U.rTkp^QMR,@.a(gp<]1\2QIp#t^>S957A@!1A7&=m60,]B]Pj<C<R/CERNm_e<C@^Z7U\Y'%\.J*5>50'V%`P(rMlP%,2-iMH]k\jkDD6<_A<?1IkF"7BJFm$pCFGYSgBF)B(*-3[7Ae.4e2T/KN%iDJr2e?u2enK4@"3I>H,kl]%&Y,4^S2HhM*g:>HMDO4_UfL&j+'>39W[TOkJ&D3o)A%p0a#a3UA&b8+6$.Rn#o7M!5M"*]:;1\%,eG[G441t^*.e]H`l_W7+sDiO%%BNg^DK*V$%R'#:@O!&%@"^.g(+=#?'2D>&X/ki+'l:GDAZXP,n&fNr8+:gCW$].NUPp,;>)AQG/gYEMPpsVR&R=\L,f30M&.JFn%:<GYf<mlhbHcrEkQYi4d?]r*Oqm`Bm=NfEu-m7kQ:j"h9!C$.U83%Vh$QD[IBsjR@":M\M2U_>4JhO-[>pWA;;/YP5.5Jd\Pe)Oo%QNhp!ZL'.PS'-!=0Q428NeQDSpM?+Y*YLN+$D?r4ZL')5:KMb)&GJPIW#L'tnD%tU#C:>FklC\E4U,kL/Ek.O.BjcL;;$(+.+Nam%;>7+jpPnH-N5+?3!Q]VnUE%Taimb<N>utl%2]VPT=m2HsPFgOR7UZCd+po/8Fkt@gf4`cjicM#JS2Ysm:I2\.F`L-\GaV8Nh8s2b%@=@"O?BZ*+EMI%E"0n@,*->)e,>WVl]&Taoj^/PR49fT8T6(->_As[Em8fgpm+/XAS\UPo?RQ3d4/$#i:"]n-riQ_'Tlo.!C]GF2%$ng57Vln($gHcRNeofp#ZrI-@IG65!ogZh`@dSJ@UGHat\^5J5Wpp>K7a&#IhT7OCql?%n8'BU;_9'dnWjQ!FBg:/RIKXFe(p10P%bu6>&4`3_CLHQC/HJg5ip:nO7RM'`$,,IFdqICsP.eIgsVo\'oNjU*FO^Z#Y'WGfE2:ZbcY)Q'-C]b`;EA&,>78i*d7WH8;CK,K0%MM5g[-FP$^,-CbP[O@&7Gm.Usob=3<>*5O;iXs5rMU<H$;'B*H)^TiiHYLuIl?9Yq*k7gg2G+s%7q4<"Y=o-pGE:/b[j^Y/Y1t3b%AD>o%(',]tFLY6aE!Q0<AD_(=h+mMoHY"5#3+[WBOHCTiW[3'ncJ[^o'f0d81CSZ0a1Re>$6KY(l>`T!@^bdeN2c.iTCUZ1M8t4Z%XVplY0_T0]Jm6X*)cbT"gq#F^iYC2pT:%V-RUrhG<PGhUlJ?!lQNg+=Rj-gK-'J!\7^s00VX06:Ff+Q8G"peZG'eXERV`dg;pjQ&%g["(*mZ_fl^KW_M^K]GBi20ULZb9u,g.o&QdYr`q[H:M6C:!3(>L?ko^s3,und=YNNib@uJ^*1lmkRoG:Y=N((*7Vl'br2'dn2*/%CMEjfG**U.?#@>8'K,a$DOHl/_S/Uu[.qALOFR&7s+uW48345p`+Hg\f1fN^5DQ"5IC?dMr0Z.)D/X@j]lg96LYX15OLtUa]r*@`%]kb2MdfKCf#Y$N;#Q4_`i(+m:>LPMa$oRf!_KCkE%32Th"G0mE9eR"/2Stm*g-X\65DCZ%H]S?<NF[+eoV(_sK,nTQ3+1JHhX._)%^=s+'T2!r=gI=MNq[#@")gu(nqUMXM?Tii7Du]FpYD'2=Dj4uT>jst8Q8X!i*0YR-Isj@*+:4>*@Qu\Ys+g6RHH*hI1U]R4B@uZk%pbdQe4Li13K597,kIVQ%A%:-1G&O#MgU.(A8/@OQEP>]t5i*V?`>\O+9`n6RQPO39Hb21t>n?Htp:7k@5=Sm/igK1TJ%KEFYhq2t%n@+l!aH5[J6GE&PJMK3P\!W[>6!)hk]Kjg,]=&AbD7s:F`5oR!'6_qBEt5gJ#!$ISWSqB5gN(0VgA2cr,+ZW#?3lh\)hl8oY\i\[%DgO[OD-Mdd\)f0L/I=FUkB#:aFP(kCT7c9HeG[%E[`7FA[V[D9g7HW+gNLHZg2[t`Q3K?bkB#:aS?T?.4pU]ocdiI\T<>9I[]RH[%mJ4E'D&mfVQF#5P,ilV/cXGSV@HVLj*#>^;DS:jlo4`'2cK/Nao3#q"cILW-[4,o1g1'H=c1,]jcF)@bKnBi46YSo=#$PU`d&i&c%Xc4=-2F<3Jr2cAW%U'epY'[O[D<.?a:],1d&cZ+Ek,s`l=(j[59pO@)d>,;M4(2c=IDjmK'6_sX#JP%:@H[T0!kW=ZA1c,?jug&B%RFCB=\np(]m(D`(r2-U6cJ/0sCml9`>Fpo,-/3UM/h,(9]59WBE7WT[^25q<m&[>8@bZ(Op:ObHh0!Ls*IA"a=nl=1SXDt3jNEs.%gH+]6Xj:J2em[`YI2:SG%_Lqk_r#T0OLI?ER2B8JFHJRd$hHEOfV[o'lWI/Y_ku[gl<.&X_PZRfl$9J&_R<C4V_ri_Hi/n9%<bM'%T?t3"E11_.-[PZFp[^=ns6:,Dn&[<^jKKVBjo7RDiUH@KNjlbflr<WC$G*8#c\+L$`%T/k!0&q,pI04.GsAIH8,F*8hg]Wj.g&m5%J6s:8j=Lh@2d#hT%@P'0`#'HpousYn?C/ThLs:PWngFRVAKL@6Eo%h:0d>PYlG6`jphh#ZNg"Bo7Smq`7%T?lq)fX?@-c/eXJ;/X%f6;Lg\:(u]I2h#W`.R"F2Zq*n(j!<gRcYnp]8;>bg%;\n-Ht-1L[F,7LZ(_BMRk/o,P.BC`*=f2#nZ&ng[6g1o_.L;h%`F]l!pFq%2G2t-#32sHKQ)[KIYRmj'<]D;ZO%.Q2\e6_WC<\uTq&Fq@t]ZteL)MhMW5Z^(=R9?ohqP<`iePBL@X2)[\h-T1,N;qD90lEPta-N%b%>bK<%t!Y8=O?b]hRIkl%EM\RSQLMd2:n=,j7]_FD7C*d=l*QNZb_afR\d[Soh?f2CMcP+3rTW_ck/4es8kj%c4RpgO;4hDdO?!%Qe]5*]&5?6NBu;CfRVl[%iQgXkCg_W%=*jONT-^`YT*loY)FoP!"nrFCs@\80.>e$q!A)_4JH&38?j:8Cq2!(afgZ/&gA1sj)dcT%Q:rZIOu;T;7tm.&56&euWR(Um;X3j<91jX3Q^1OAs(/%V(Ak.s,5+;BNdX_tB;;,VAm5ji(&<=kRJ6Ma>3:6^prC93rln6!s7B[[%0AYMS+kZ2MheU\JG.[_af^P$]?M4'r'97k[%tqUJ6&LDI(Dg]J)MI#-Y5aC^*:puRCtKpab2Z3WfM'+HYVhGCjUWkC@58h-irXm]%'<1f(d:jPn&7!YHpumG<-jV,@&aC!gRp*o,\;K&Rb40LNOiO=mVLC3!/aGqCAmpkn(R(ko$0RPQ[RH(nip3U0$J]s6KI%3MgLAT+%_bsCiJ;FREB8)DIaAC7:+kT$F*]K1R(\@/Hf"MhIq!kRjFX9I.c4U]@^Fk@a@0dTM7*\[I*.M@jScILSWp873+o7+J[<r/T70RUQ%TLD\[4q)HLkfV,aB@"ZoG[oZlHt86=q+d0PZ2i95&JPf\!nOkjD2V#/7s7^T[!n@-ipl<O0T)-^:sHK/BL+O7-U8MQ9o3U=p[4"a%D_-bWS<aU^"JUUT0EQ(?j1hs<2&+"X^pP-KA(W3GU0VjDC]fL_]3p]KU*<ss^9j]3]38`+!\$)\Ti3po*6"$?OUf_W[i!W:1BR1h%hgeIP16,gOllIfRP\N7t$FUs>\La$u2KO%tUfqk;7&CG6gKhc:$'9n\%9teNg&n@/K77GP1l:hmC]lUF^%BBrHD3RVAj!m4L8%Z"%"1&1)5c[]NGW5dIG9&S4nBd6.LHCUT74a!^[;FZ=Z\Y3^G.;h4II7I!N,a$NS^#-t*tQ+@PU)M$b3:TG*@4?cl39r%>dDMbJZ:oW%3DdF79D3V_6W*A^)970'$PV.c"#-CCV'6^khmRL-g@r/[[f]a+S$B,eDJ"$B!CojP<b7uUJLO;j(/:\b0KF?6Bb747qg2^?5Y&,R%Xl.,;\:(QCku[`o(sm8tU$qle`TFVpFTq2&Y_"g/?$kDOlN.<G*"AED1<#=:f(p/>170"7J[)Z!NMD8L%[;AF,4"c<%b?U$IBT('%cMJ1jnBjY)k'HCK+t-Qm@GC)`\/E*ihMcXFFYg3/*&qtXZ4"3F#'.E+MORA_g6o"[5!g=E<:cqlh-JH.+*3gJEO@ZFs4qP7;!>R@%!Xd,J=`g9<ApU4=[4i+K;DV/T&j<08bJu=`N[^]]Q%+:j-$&q&PZ@(iOe%A'7[j4^q#`8lD&]`?FND[7RMTF$OM%rPWUghc'1fU<%SAQ-)fK:3u?s#&;G.lS.!$c6(liuB5FqC%7]l/hQmZ>_?S\Y10<q&0&g$*Z\(Dnj#d4D8+3gX$YDGCKR_Zif"6UXs#E*;`l&;jJr%%;#]sX$*rPY#hk_:mgsd)hA)32sRd-[7.[r:jm0/lNXj>_$7OimHesWY6u>OaO/E>.YkB1J1G_U['B^2"ff-Q"/u%;HXIV3c?X.,%Q>Jm?^iA6^MN%4MglK7$PAiuPDn@\fHJe#qgl5\FDaqA4\s_.R%NIK*PLYOYCst/-$9j2@2W/65B?DBd/?Yb?"-LF^gVa:IX:GQR%^/sBk9q[Q_JF&r7cHa-UZ97]'Y:FQNJebp9mFpl<?5GS?jRd.t+V1=?M4?JM,.O(jTON:j(OWn8EjSAs8OuoZcn@7+85n6"9lgJ4%Q1.Nl-E%nN^VBgjh'ln,T32J]^qM(@QJ/&9`_pYQ$_77`?pQ6>bSfJRc:(Tm98SnGaYp=q'EC'r@t-@9e3gsXkE%I"S!G0ek$`Vi%"KUdD[,\(%"%>>Xre>05eL]`>k5&2kdZ*N+<9TF)KA9jOX$rPmF<r%j(s.MRpVY33C!j#h9a@4<_?:ch0MEXp[F_+QlX9.q>)SEV%@)0Th<!?G+74N2+99-gHg>.ReU-\l_BZ*fHCf(YEWaUtF6"!t&!Je3r^_.:M"c-:!lq/i5!.jid(e)>HRRmioMUlgZUCm*uD@"n>%.@T#"U/5!:E#Yt>M1)5oYGJm\C"dK3E[Q*8i@)"1CC=L+l\H?hr5jqm*3?8(^FRa$eJ4gHmCnN70[0l/_,Ns"2*pRgda:%\4K@@j%V3)$(@<b_7.2n)F30Y:oP4CF%gSi>!J\FQ)FnC)d(!T>T`Cg(@-u)Ma!VG_"EVRb#Y=Flu*@;4Q)64nb$*`30.nFTq::A9&Yn@LI%Lt@-"c*-'.+AFV'%n%/@oBoPJIL3-q&o:ul[rkQU8='\e,95iL%:.pb0^au,)!0ufm\G(-CU:H,a/LT:[WC0pM&C0'm?i,9W>U&\%cl<m^Bi0;%EP,K>6Y3INWbha1C`=I24u7be![<Q;b]=-91a`jYn)?$)bCnqb$I7"b\,il;P_UR.GLce&#Nh\EkNC:V$'(<hcj=C-%T)JBs[8D6V,-?(ngB9Q8'SBg_'h^GR+iZ4gD(3t.H^V`)YrLZegVTsFHrd&@dQ@6@Au6O43\p+P0"VKkr%Dle)2m3Ui0-;")9.d!%\N%\ffBX!#DoO6CX!pl=p487<Yf4#!;%b!^pT`gP?/DST)BBRXkCKJB:8VD5iW3e:k,+jk4:SgA@KN'O,)!rW@fB.]1NP(`MjDIE%n;A%LH%S@h1bC%JF!-co5don#n?'ZQCb&($5SWYr-Dc#s`E,3]aCZ^=T:thk,d=Mn([f@G*OL@"?m,T-q@#2?6&e%O[[DkQLIe.D%UGqonp7N-PfsLSsLuXcYVaiVKAVTs5#u;sjoLa'2<;YWelJ4q1`j);Y`+MT/KoI5'b1('8HWEOk'K)'m8aU'7atc$`2fi+(@7A9M%#VuJi+Or]D,A#)Ug"reOCE@lepM!m-;GaHY9lrTt,mab3%::8:1W0NG_ee'VjAgEp;b!8cFsYOeD:$m#N1SO5BiSoncg5mcT]/>1%Xb&^L9u@5!P.B=WJ1H-EBSpY/gieG';&ab?*jm6j1dT5e_5bop(q<hgMLYNOatp,+2=O=bUr>FsMDds?O'/_E\^U'YWXi?QPg1[k%p)??-V9.#.8C-LCS>D\"Cg2LZHL?bh\JS#jS_1C!hDV]31Jk]Iq>Cph(Z<ombTi<J0'u;q8a7m,M4c=I2]Q&k#.5kh8)&D:3,qOC%[K22t7Z"?hQsgqIFriEEH!`5sATlu:k3,(rHPnLPF8,"'4jS%[E&:K<WKP[o#Qa/_2GPt^j_*NQd)cu-;c/uDU=hhn;cEsBi60u]%/Cpkf<H110;C2^[-M'e6>-/.]U9`*E,o0))..'Op?!GYFBd><0:Y_o1K-a.(FLRFaA]GQ:`7iFfjdVrDVK6n;2n1\%i%f]uE+-W;%B%oT,5f'VOQ"=jhZKV7%>;t1f%@Jkp\s+__&1B##oFoEfo%)m\:<b>6<b5.$T()RY,Ju[o:9u6E?+j*aW2]6@EG@h=V&09Q("uPG%e;/cl3A#=8Z1<^@8>_GE=BP2oT6-NN*Is%ge!--,O^]4+aBXW`WIWT`9O'S0M*k?FFm;8I<`&`%/8AgGQnV6EkUnP:HuA@16[]up%E&8>CUFQdS$Cc4'C!GGpI.u.5$Y5100d+ke,Qhg>/Ai_*!pj3p:5n;^ClbR3]W+MCeq6;F8ee)sdUlN`ZQ?ufPt8VOcnQ:c8'&XY%flVofUSA#"&Ng/!NN.RkFi?a<S2O4n:6R*\e=q#s*SJ8)P0K-f#r,7.D?aLNe8E(KVBD<3F!QmBf=<DIq8?r!3jfB?UE,!--"!%I%8#6Ro"i\f'W^e9nn-esqes\/b!5UQH9H+D?LJ0CU5E.WB:bUH&^RQ3VR\QhLBc/<q8`6WD?/7ZNk[\>@Y'P](;R;.<]_Dc23S#M'%ZfID]DlBUH=@+#LL$uc1UQc#,)N0/=Y^R).XaYjn05]*T034']&tB`/<s>6o8V^PCMg:o$XL0cgX6.%EVuZ!Lh1W<6qO%AAm/$.P%VOYi*,m9D:DQlJ`(:qFp3_5A*JZ5JA[A\(4/8G!K:t+E;1RK;M?qY/p:Y$/k/c]nXq5'##OK;g&=p2WMiD#15,hTD>p5h:jekDL=%#)PUQJSO=a7:MW2k_Qm9j'V3amf+Ki0_$e/%25kdrYc5%+[r:@dj?!q!cf%c_sg_I?O_=VXE('@+_^/[=Z=mRB!&2+R`D.87EDE6%BV%OjW7aj3-%oR=%U>(Le,nC3/]5m82SEFWf:tJEIZ[gkBGRO,m,UW/]"P>&+h15\EP[6Z,756e">=X]MX]rbN'MTnCgd_:oXbLg%_2*5moD<XY5l8K&aOQF,'Hepia+PZ@jkS^[OWM`E!7,V-U^O&OEcohdq?DZ6Jta8C>i"5tMJHVueZ05P;+,0oN)t]citNXmWuL'9%;De&_+U"&:#.A>Ihg=6MGRXFV!$#EC$O63qJQVX5YYcd'`U$4_fdL_4AT9RLlaYGn`]Iom2^`9p48R0?[K)lt'!1uL$h$1R-ET^l%?(9'hF0).,!OkJ&".,B[MsI1/^5BqRC&%7X8\U&(r(867Qp\<u2?(H`au(f`0]Idh(EL'JWpd=50JIal!`<.N=`F%JNoo7]WZIC9%@lMocC%S3Vc1@UJ<$&P%oUrlOXZqo!Zl12Kq[scd6jbiL]6p-0UTb:V/^lK("=DBP8f%&A*OXOA2H15j&R8tO)n6>0W3]$6jBfUE%a0#,E>SDFdXKl:rAG7ls]hu\G.jsq\p^%P2J='8Z<*q(De2KI'?D:k<@:aO*UNQt!Odq%c$f<uc%O^=J)Su&PKBSMG`CjT!Cic%&%RmC2_BpHLY"4_YgR#;i[!hEj9(J&O\3["nj,Fc_(pb<jiqs'4I?i#eV*oglANj(kfS9:YG$Sm-ml49Gj+A4W-AW4e^O+m[&R?<0g%k+odAOf7#QgL@Ufm!H_FQps%WJ]:tACKi>F]?V(8bc>ua:8uWOEZU5B<23"n5mY]@,e)pgc'7si%ub)p\L[eRr*7-["lOti$&*6C%S/deKs1Vk9WG:]>SqbX3ZIm0Kqt_m$')PrPB<\_EE<U,K\NPgYR%SXj$3iBCl3"<;ciK@'n]"FC2,]^sr3/Q=mq+1RXf2,1H_TBA%7_r\+<4/ZCAT&Y)NYc@G6!V9.35b?$>BL'RRc?j_#U/=<a-K+2eb^[A7&u\egCH1=e9AH4gK/<1:OWM;W_j9'Q<J%Y+A8>Q;5O0!%DaoaRJusAh$#WT_9BhF,$t-7p>faeAi!=j,nTZ.:<2g;=1nH=A0VDt!P\OhDnF927rmC"PqQj)@ApCuU%A%G+I8e5`p-$pgb9Sk<%3#7Pt.ES=fjdU@$+>+q/Q06sTnG\f=gd-jhl?f$cr.rVro<EJnhmHe^1O=5&3mn6C;4;4J+R%dp#c#e0V%Js!iA@!FPHf,]c$Gd[%;"\!8I'4pX9Y`A!n8MI2!b"4U!"bM8guNAhIG4@maO61B9_4Z5gblfOJ8k;%4D1=s&TF<(8+7Cq*K8>]]qY'Ijr_>g.qb3_ii;BJ%GeoF"/##ul8(JPY5&aC;lZIlQkJ(-!L\L+3>L:NnpKMYn!q;T.b?9()`s$o_=G)cipjoX2R@Yj(<<.L?q"EBD5#Icd]i[3LQ>BdV%KIdM,:sZdeM1G>Eh'-i,0DkY\_nB=O1Esr5+=Q^Sh[>5,(OYB#r()#,'6sC1fYDjJR)#15-R(bS9D_+Trp`_qhO(1^FNY(S7Ob0#%=.=bJm(`dRAlc4iG4Gt/VA#<l80JU='30Mdr\";eA3J8F$s'X.8'$06PKSS1)\7&I(t_V34+/X*2"FEN]$/)X<RecH&=bWBFS.PP%inh[nh2.in@aL8&8#?tIb([iWUi/u,)*pF'UWb88"GKc)74)]>D(c+nAE!'NR+9]rBX#9qTjg+qp)'mcT',/jFEcn8Q^X1*qj\R"%:]2-?R$HHC6F:6B)st*]Gcb=9O'drU&P@jHlu.mJLd!t-?\kfVl#=."60-LqgD8/%Qf+RNVLpeFSV`+#Xf:WP2lS1p(+o[S`XeD:%%*Xu;j3!Q'-MFau$f8(Xal$PM:Q<n"B&UMn4pE#!&R<f=n$MrV(:,Chb^S(i^N`SH\U68nbqWER#>W_Rp`,H-+bn_;ZBPsp.)9gD%JQtip4Q]`cj,R:W)^>\$C5Vn=Zu,(l._,*PM$j_es7gKREqe7%%e&DT<DK`G1L<pl/TaZS[#Xn&ChN@%+m?5dl/D7bcNUMdF$LnX%&FiE=q"D=&-93r$h5.G00Y1.KT5eJ,^98-nkN2h$*c^gs#.oN*'GY2bKZg48:5jlho\0'Y0p3<`F+r%,5?qKl2n#Tte12K@@aQ(j%O#mZHp*"<fH)C*5-HL/O#JP.#:`-e',]kI=4FPdjj%Tl+3eI/UHC8ahT,<o$))gK=G@rc'QesmjO5;rC07pJ4s10Q2mXQrK5QimC%g[iCeK27"V?*&mlLmUO*/K=f1o,gh4I0MIkq17]iW/mD5B#h?+:)PU[,Hju.WHg[f7MpGJ[RY3YR^[Tb]:$-I=',qlS>LDP?j(6M%K651U>9&)'3)m]r:bs!!Y?;)9n4#O6LNRC_4W]hlQE@_d(3>&Y7\pd7DjFrJkot82M><!``NPF0D$6W_.K,49=]).<a&hbIY/uL9%K9P#23gAW@ZR,5f8^HttlF)=VVB>($K#on^9cIUWr5bIo].b7K'OK\aILD'I`jp)\)0-dkAO3.4JR78(J_9-O5kHm;W55(%BDL*e%=%e8`p[0<?H?]5086d&n+$E[d(_p2iM5t1^aGa`,07dpO21]9#\l.sJ_uSP_oSU&E^r/$3`':gc=(VkJj`SjM.@8)s=/l*I5?o'_%#?K*Q3iMcdBIhjrERD\J:d*L3Xj.KS5.Y/nY>Fdg-'&5p]J#g]fSM.Ab@R8iSY8O?EHhR#M+9^@F$s=um`j_Ui-Z6^W#"BkQY]SE%C\TVO-gT3pK-jt6q-ca7SlutJUI@r3d1p.@Q&*F3*Y4P7]WDF1;"t?ThU/6Ro&D@9*5U7#RJq7ffmSafP$CnKU/]AO?Y^BuY:bB6%j!cGiVVXE>\lq;qjU-B\psa%a?e6ggV!=13p9<K;`=<H<;E[QD@n!@eQtBUjQJnm.0[dJ>3F"c8c$.P_0$a$/2)VXu#cpG>1;-Mo%n0qmP`A'OJ#\(r",,=E&#,JasA8>Qi6IkDF/DNhW%;(hu?7`3H%q,@O:fB]K=H]C#(qP;%DgM-;T91+l+[:F%@[dR&3-lEB`0$Ub%ApA`o$[c5'Y!=>Xb(X886d`>"#)0<Ln9VWC:b9m?o#ai3P6K8A\dR.VYeuFZQ\R`QR#O'f7UC^6]dB'M_=7rkicYm>@7O3%koo)3%F^X)Q:!+G/%]`*6o*iq12/G.9U'Z(AaQU=oUh1;!B^9H/a^K>mhj1jNip%7p9EHZfA%jLa"<CTeM9CI@N:Mae^<ipOJc(@m>j_IS%0Wkp(HhC(?$;9muga!^r`_Qkq+5>`a`Oq$WeXPZg8!%?h?s\6Roec(ET1&Eq'"o:W`V$dT&7k\Dq"=*,P71t);5Vl.pnpZicA:+6%1G<bD"gao\+##Q<=YY4#Q0:4qH9J7no.q3dkpt9pLGV!U4+Lra\FsFs#O8>6/c\%Y3r1SbV=ruTZ[]^_[!9h?]u?T>PNC17TY&q_%qSTbRm"It1Fql_&U/HlpR/6QCZu))8F\:ArOgN4VmA;5K<WL`k74MXJrWuGmB1@G57m%FFIut$6&-$lV8FDV7X@&<8AL#DOUt2#2%E=XF.PqKGb:0>Do25EeG1RU7s2iK#'m&78Md25Gn^Ed;nP*\kV=gDS+AP"L/E]RI]!aZ_r@LnS(Bug7h21t$kUZZ%NbTr'.6fGPD%1EG7MKjK$=gL;ccA=&;A&n*D'(Le3o,p@NN7EWS;hAe^>l)X%D"=gUKrTXGigD@RkE*e?'&(S+m*AnBEO0l@bC"JE\6c\tT5&sYE%3FeW/%qM5PPpECh4fQ.7[CGbq^;EU;klo=BS_?spb`Q9>$lZHE)JObrXp!H*d+1#<`Zf)f6"[L%m_@_k;ju1:B4i-Dnr.3t-k)ds%3,2omCqN(O?CAuYM332`N)$mQ'F@_B!-UC8.9cqZjN7r5"$%6WFeQ:X'.Xu<TR2["lEGZ&(#3FVMD^hn<Y[0-'s"7uCTojGAjE[o%4p<\TI(nJKT6_G')6-E_ApT$U=i9Y/qcDD6;em<=-q*eupJ"-AMoHrYI:"NZ)#:\"7i4:lj.NhlX5DiQnS@Ij(QT>,m72Nt!qU>4%hG"P@'m[B)-htXj>kH18i^[D5aX=ln:=`f^Y84?,#[;QI,nI:$-h#H<V)L=]fRdVlF6qa?p>cB?;bn1Y*'s:Z[L),'%1LeOae4s=%XO+q5:nrh3F1u3:HaN!Np"t))Q5u"O^Th95q+ekeQAdZ[ic<UT&dYI(SRkE(h1d[*NO*LtA]f:p')##$%<EVc!eCU'2s4&.f>)QY%1g<1H_D:TXE*0AC!daaVWT`sp_?lTq0s-_bqCAQaH8:e?lm]$<d6V*6+j>O/C9i'<e:O6Pe/@6dB1<j\!mQ9hA"F]ke@t6<)8nP$%-0GfA.tPp<:eZT((0"&NMYtSfgZI'u[Z<%oQ-O2N@9og?,m,oe6/C(4j%t-*'CD2m2t<o@//B'&(nN'e(fNo0mA`qlVHX[@=2(E$%!i!Q5"o&*8UQM7IDOiBs_8Ck5BX@71PRjfDJU?#d$P":5o&uUfCdESG!RI(k7ljE$;^5>7O0aEI^h*(l`Aljc<9XBf\c^9'q=-M(%5Kt*T0m`d$op`SZMUE6t^'==9GV88/?t#\TPfd<3+a%.<]c<Ss5SK"4)',[2+A-0\s"idkkAFiOe5l-^j&!=P]PntK%VUcTmoQF8%AM+nHZjUY:[^Cbt2PXe=Y[H"]f,uCqKOt@ZbaTIX=X)/<4M<&T)Y<4k%(HuRC=&c#?u#tNk@,X0Y?J-GF%gFP,7rBH:8TsQ\1&b:%PqCq>CK?oLHLd;c8q:Ttm]15hGHi[IQ(V]c1f>&+@`E^"nYOQ,USkd<)9OkA+=bO#[GVY(\U%fs4anVY=K&/>5^6BZ.*H?D/FtP4%?aKZljX.,aZU*OD>20\UbkP2B$;(EKSQr9Ddo@=[l@@-CaC1X818b(TbD4JuW$+kl":l!NiM&L`P9l[&0`Ce!/[Bpr]D'`[Q7\qU%3/?)jZ"g-a1pZmoJ^U5@Hdm1T?IHuk[b&TH/WeSt"42dp,l#d>_W22%<tcXSd2U(*SEVJk@QG$-p>@;')^uu4g2^%I#MO>+;:W8Z%'Cu2(N,];]/k`KuE4W7l1R&1cc2I$BMt;1Abrh:<GbhGWcY[!r<XVNggKK"I"BogG:5!ub!+;r#5R7#lB%-mQMj4fE(9FDM*HjO4%YD11X1I5uoPMDg!\I:6>Rp3X690I?BW(q"`23/DPFiThHm:cb$#mDl2;S9fbRbC^X!!_A_:0&<pl]i5`9XAtjQpL--M)#MD3gNj-%"#tH/g[5=iO(/pVfe^Y%A/h@pmm,(S'"jM>[K&2c4n&AZ"Wsp$m(20l1gO)pR^G;"VQ/)^e43of.1k-OP:M2:JNKV;h95(20POQ;%LQ!Cqi-[T_Gh:Z")Fle$%eeg."04LM_8H#%0U$\.%)k[BiTpeT](=6(>q/<7BMQYiOB/POlT*0Ub>rm\2pXB?'%`0r4d<Y(;A:7B%e9l[MAE/uDZrVj&2p,=2#=(bblmlh=2oguf-8@7"#p$sPC$7R.=uH8'D.t)q0";S3_CQNmXd6Vf`B(PN+cOO7VOQ3h`E`?5`AYVG%"ZXj#>6dA1fQ,>9FM]:1b&pT*JfKe,gPFCd+S!KofMmni6)d8qLoF]\Cn#$h1bUL+Z.V++Gq67V[q@Vl\WI<k1%A_N!$/P/:+,H5%prU<P^^=(K8o\#kEs/Enc&'_Ol&ci[P<_,_c'Fe%FKOIWJ>IT6l.LYO?=-3,@(<.OG0'1,*$7"XO%*C$.a#&D>Nd$k#nD10=lL7q%g*NT'bX$@?d\=5$huWsYoR(FI<j+'plJE]>rJI2;0.[p6#>iBbKJ],"28=0\T=u8S=3Vta[26,o"MNe=/>ugtXf76Hr`.uLlmS,c%"W$T8[+A]a'QKCYZCF5*eialXc1F8XTb>!^_ck/:=`Oraa\oO@:pp+fQ!$ilC6RgV$GYY8fhl(d=mLW_cOtuC8/r<Jl*.:&n"E'6%RYf&+lf;6(%TKZ8`DPr[GQ;7aB#YUL0_[Lb6_Vg$UX[KFWt9<XK)][^!R5`&U@+k)^5!e[khX+$ZO4O4s-cN!&EfeQ"JT0Q3!%Ur%ie^$?4pii&bTi$Hk;8oA#GhQd\XOs3BI9.NTq-N+eL:FliQ2^X?;"]2(+P?'S7W"q6J\5eT4VU<j@/YbKel3jEllduUNoh16_X0S%ZFNLa\WVN3;Q-EX3<Kt=:%!f$[i2^"lQfl#QL&6,F=n>'=t5Q:9Xbh\*D@?BS,8=fF1-cMin>:4'_9bi@)e*!IdduBa8iUK+=/[9%?<!7;bi%gkD#D)66N-Fn%JjU3/*!Du&j9l@g:V.io%%LjG`+,eiSAgW@q;ABJL+8W\+'"6b@Pt3^03.&)hj2r=ETb=/C#1+\l\tp%8;Y;+c\n@M2G[EA(;])XDXOjf<bKMCE%*@g2%unT3XAP1Jl%uXbu6GMJXCeUEjjLd?+aJMP;ot;DiA!&3DmA%g4`m'cqL4b5lJ"b%$bV4?jZ5+EYZgf0^n/Z+"M>F\cAjn.:dj&RA`P:SOYFZmH3DV+7Zu_TR1?<,MUjRVjPZVfY2&"XMjps_-tXb7do1\0m^!10Z$k!4%*LT4%#TV.GX.m+*Y&=]PfV'(29UR'6ddVmd@3IZ](f[mJcmmS?g'b;(/]6h\>,l3jilj+'>r!1>.q2.+7RREgi%e@%/U=^U$S@9,%mFV7fE,'Gt]j"$pT!>4%#3!A>/+!g+9=e+LF'%CXG5/69<OVkd'I>F>_s7,<rNd*5SWP%H?2XfnVpBr.KrNOI^(@/!%NEg`5&/Og%J:i2CX2W!,C\4\_n37cW.$)!_(jRI-<Tkh7XYpOLDARgh$9%(^`.WUB.nOJ^LfFIZ-)U;!<<7'5AE_L]#a`Hg0eFfJ<4hD9AXP.u%g\UOD'B?.4;QR6?&Ni"57Teed5Y^Ijek2OOU+YK-MB&@EMJ2EBq0K7VZ%Dk?'pMdmRp+X,?Zn+Zo^su"DU2[9o*MK`cd#!+X/U;=%ZA>*#J["dX<_0T2jj!]V&EqZHEQ0%N!+'O$=VnaebL#r-#97kh,)b!f0\KL?G)6EG\B+86QX9Nnc*B\:RY+V"PN4[GbhCS3:Wc^f%`=Jir9,1,LnC0PT$/\tD[.NMh;-:U)#VUHdEnFo/br*$@g/[c>-^Ynn23X1+qDAnTBjG-9E@,I'3O]J&++F/YS]OEZIMD@JjmjON%BYAf2Eo.o$c;/Mfmb=Tme#M`8e'a03Kr-?%G@5RX:nVY6:D_D'1U_GP`B&^iC2i$\7?\+hf,:;t4u^DbHO8gmY?S5;V]X.bO7LdD%2B?Uanu/.^(0o#RigL81?3U>U`(0<s3SqjskPj.`AqV^A6DVM3l<B6JES05INSW[';#LlWmcS%_%^+%a]V:12Bn!"e^X[_qWuo"#%E[Bqb%OV8;\KVYY:q62G-KaLCR:3?'g2;c#RYH-F!Z(jU:H,O%5p>bk!mSQ@ig?UZY=BkZ3,n^a)"at`1Bp0r_ihY>06ZAM>IKKV%6603sqJe0VOB7k!guIa-_)0K,E+Kb!]OA(BO#D],2iCeQ"M,ea".nIZART(+q*<c!cGI$;Tb_D_c@L//Md-,15W5YbNRRni@k!V^%$/s#MPGFY-0frKq]5&Ed-JJ`Kj1l0:r8t-+"]=-W[:RN<F4&U/'qbPKa+IHIY-UG(:i6FU/ogA?\]W!CfYN\gb)Mi6PT?qN4nge8%Ph,P5L$qh-[do<"9AhSkfPQ.RSZh9UhLQ\+O',flYi;59ajmiqUJtKc#rki`5d?AcfjY0IULpZo`OnUSj&B+H,]Le&H5KbT:>8H%%2npaHdSe=$:!(jAKQ'\!3\$=qC/8<4-L->/G8O<V'Ki;JS6<RhY"(6cT!tH5=[4,+r@YG96Dj3PJRdDuaEM.8l3K1TIkq6QEoK?-%L;%qtX":-(3Ap3/)lJ70M8]!Y-[p0!9FcQ7RX-,p.[oTFag/TXEk-LcjN!1_(K2k#<OX1Ih#fRio]ns`(3'O6d177k`2r]nkVa@r%?J/%Jk\^jKAVP162k4BR!G"H9P!!)Ie0ccpTT4;D1Nh;JeL[j,>ac^%AHGkTSU?3''S(_Y_ubmU*=M\`Jc>U+^!3R$'*4*'oph;4%WJc1ZF_V*A?pN>)RoZ%!":!%J7="[2'H$.8?CI9t2Z@F#B50R402i8>ji>//NS^XE23W/YrdFY?"mfh6g<rJ2dk"@A8HFl'%]8N]%3rBY+2'nTp`=I(^ipkr1m>\@r$P1%@-f0*QM=`K6NB#0n<.(OK9R66A-&g8`2bZ$CP02'gh=b<b61T[W9qkN88s.iF[k8+mKe"a]%$kO[("&'?+\64tQ$<5@s%'Y!l/hldseP/D_(NC!g2#`Kj]00aZFoebD/c.qTd\$H+7QWP'E"]T60,1ZqM?*)#A(@\(/inMRqU3lE%SiB$kJ/g[,;Do]9V#(JQiaK>G1U`KX!jIhuZ5Z2=Qjkj+DH[?9C\BH=aDuNN@0i=ZKV5J)`J%@M12Vk\j#PJqlk`CK`gc#2!Su)m%O[$U^G>d(9ZlYZ'?F(VQpj&Plq[dMk',VE`0%KDe1Q=&#RYP\u.+/9X*G'Kn8[1g^a9#Rps0ii7h8$7-B(?qjWH4SYA!BXH>r5);%6EKjHI_%p7#hL2'8;#J8?jNFU\+X$TZj)g?f^6"<MR$.:RbadNB8d8:S!U94$p+[5OqMGp=G3qc\.h)a0L4I`IBqP>l3^:/Akf.u%B8U-A/"^d.baU3D6;."!Ya1[3)oM(r@]_YLd>$rV&&u"3DJiG#0^icRKO:8M]8]H'=#[;e:fIPJ\sdkp8,'TkFH9ZT4J'E=@!2+B%Pr;QlX9R@:,2lfpZ-lf4]&A(h!qcArgXHpHVAmI%#bgRh42AQ7(9FIPnf/8BUJ#,*s!P<[#AMcEDl0?[0[)TZc\TAiGNg1C)%2Y2%4;Z1MOWi+uS0_qgj-)7%pgLjjkSdO.,Ti1p@*io!TWE'+BUPJK/b9;S]eP@JTK8:Lf4Co"K0@_&hi"(nK&(TeC#uq2A8C1daY@U_%#g`P%fPFtV%]jq**YigPK5](&q5$s:1N)epKipAn+iL[5h%2[$(>r:Wd`%PAOji\K;HZA$+B@9)V+t@#!1@G`Ws2<rW26o]43$9O%hZW]*@Xd`R4=e4`Mb/#tE<=lgesStVFjFn/p1l,XZsd*7C]diEa$M8*ZjsCtEJ#J:etbVePMt$sEaO3#?If\nnn"Q264hmt7[inV%Ud;!j[%pdaTY'AOD9Jnl64ADQYDIlnZE6A]4)$Pfb=KHiZ0]3U!9Kf4p#bXe^kuDRIn9d_7bCMj@T-*q$JB+_ZgutM.Z6[20tm/!%?=ZKkkQW<JB&iq_^V&-8c).^QZa@TYM8`/\1"t6>YQKq5fJ`Qehsf!qVjD0fJ'F=OD7M+RXoZ/)%n4PeHI[Gb[ai].TY>^>dKL[c%',"_e:0=%I<%X0*RSYQLpaG)Y:IZS7DH%:d4bFM$!D,QD7boK;[$q>6m;_=[M8RN3BEbVX2>*/?4g4j7X#tr%X^2.YNS]oudTQXW%?ZNFW6NQ[+>V.l*M"q('YXM3l6l3GF<E[D$V]N^3ilQ>ZDiu%T[`Z%OltCRChHrRAB^CHWNJdMJemi.P+O0u39LiK8;_83_/N1Af%.*kR!Pf9k+gGD$a#Ii_Y62SO[98\1VURsk=R$e>Yn@4Nr!S72T@';VW!g<lAZ.2ml;Dc-'?)8%_EilHtj%D!/LrXBrBJ]hE2LCih%e.Gi>SP+8a4U@fRIP$3WAA3&&n0fWEn47=DlnGVHMHY;Hb5/+?k0ZX<Ghq1&ehA:?5FYL#.aX\T++EW4k.tW9l?<plG&S>bX=7Em%;d_kr]dgP0NfO4LBZE0;'@RFRGIT;bnCY-J5DtRf.g%6Tq^oOe\Rh`uEco+e*FQ+ae"cM7T;>%/hE;$D;k"M=-.&F))G_n+%h<K+%8XWii"JB&"<bL>[;C$HVN1$qQ7EReR+3Y9n?o/HjH$W$b-G\[$klcgE_A)6"l(2`HQDmWZ;;CMI@+>k(2(Y2Ve^sY\Z1<oQPmlqt%n[</"B,Pkt)meG;NP^`aM/SBt4ju@78=>i-_Z9\9@&:3h]_)Uq65gGTU3*TuP>Gc`>FTT:YSmX3o3h#"$f?CW!DL\d5!*gEm@6d1%GLOhL[<4G,A\;U;2c0FV'"W%J>;^^2YAl=C"h\dSl6bNUb87eZ?&,RiId?tiOl7,m&d3\sSm4<[&<3C;j-r3aX7RkLC;J.fLk#*:%oc@IR`Rt"MA5D&gJDNF->d*uC-Bu1X[,)5*fZ)q&!7*`!%HaA>('V@ZXNds*6^LI=HV7$'9@17_g0R$O*;1D3)58s[Uh*@SqJ$LT%!p:GG@i3,;(,N@(D63KWSKijQO$B3gbE)AV>&Nm>gEuIDg+OctY<`"Y0@"pt(&H^3G+h(jX#QkVpI,=&5Yq!b4N?(.NZ#pqb61>h%J7l"C,(lod@fJtP/U7QgQ=8]3\\)0;K7@Ok3)!rfiWot'H#\D6bIN`S!kIeEUD%!;-b*(gi^?;jU19a<h4S9BF!bCTNnM"a/NW#=%>M5`\7:+]B@rZU`o)4H+lIF)STK9f*>s6U7Ee5r.EE2_)62<a2nAVuul16H>^-['_j;8ii^4?"$n,(cS\^d-0-s^fAr(9W4D?]-?%]4HY.d@C#WJ6C8<6GAr/hdEm.kp#Aa`D$'RR4(g#g:&sUX+)+@?c*-l'6Q.b4_U')JBUal;#S-Vm@[S_."JG*>D&n4]PVA_<F;-s%Zg`%e63L-n&`h3$c+f(H1LjUdS7\"N\oMr9#`'CX&R:]EaIuba\M5+R3Xo+L_hDX/7%6YS<kj7RmWefG:iE8<SCk777C]qcdkI9&%72@t[eLD87-h/Jj%qJ]_W`gI=D<?4(\Mr,AhrfBDjK$JoWMM+GWXuFPNS-&r54hs)PG[UB8YfWZnC=AFSCqJ9/;.FbHD_)70dK6r%r#Ws1WGCFU+pCJ#_nhd)Vb#2Tkh,\R4^rE8)$)crPD)_B>"[S!<VIjXL,'sAJV+,[GoY'*J'kk!R`_MTjN2u#Y3p1F"DJ[7\N'XF%`=[^U:=QGjn)RI[4)8\UQEtafoOV'm7hIa+&i`]E=T_L4[^<kLP'O6:BDTo?3k/Ur'cJH6!Wkhi$Pk&CR3`04Qb+n%7fR^PE#f'c%K`/XP[T=DaVD3G'3Uhc$J=G9f$6-(oSlsEs5j#9O3:jQ^Cia&"bU$#u<Ba&ZJ0q:LJUc-?$M2T@TrHN@NIa`2=D.+K.fehee7',@%'e1o\+;PtKnpd/tGXS4,ZW4EEZGtbt$9_XjS-pfF1uOO$CE'q=BN+Y:2P%-.#j]WtpC*u\ElrW1%],1M`I=GHkU4_tJOBal%neD9%f*URIl^._5>'lkF)\afK_uO1Tj^npg[@f?]glEZ[DFUjr]r%Ho/[1`k41EIHRL4V`.+8g+of:FA<PA1"A7e5K+8%r]V8bRXI@ZMf%(3i)ihlZkXf#gSj28o5lCjYd+OmeYf1S35WG,$SM2Cd1:`IVl`#>=A[ZL"XAYTq%d%*,@tW2jN&guObqp*,"D+c*[Ul:,12I>J2=%?S0]mFISN')tlE.9$Y.P"kXPeG9I`MhUO7%0Q]u@D*=I6DI*312s,<8a&On.9$l1djejBiT9-l9YKuoFC:h@N;s1AW,#EY&f5.dZ%68r+@ZghC-DuE8sDs*mK$RWFQ2rQ^Q74EKd99!XD2PeJLmpMLjS)E4Iai<7me_`7>:J;7+VYk*uRl\7`ZoTKhp'i]?0JFgQoI2(r%K8!u@5cb<h:=aKX2o]+2+bme2!Zr$g$E*EE)J<(UBf_s8N3r[D+T\>(MlVnbE@19[!-V5%+1s]T*l5-"H5eKR4%L"'8ga^Wg#*=i%7jo(;kV[ino(te^K5.*6!:up\hQf5C[A@`=5[LJ-QFqYmn5O8lTKCeJCjd.g:9X@0%]$Mm5j^g,)f;s**=h8o5+$'#F;4Ff-Vh"D%2PR'D0P*rOO=H8K3)%F`V\S7SqpiH"J\h8u%tLRZ=4Z="qU.L*O18mJ+ighVb18KUAiQ`@:!.-\*Mu"P?7Vgsr>PnUMj+C^(k;Z9%F.@d8:m:/7<k\_Q!cK@8m$DHAQO5?b$T=YIjXSXN2['D4r_-#BK*u`_fW1oaRHL%aW-&2Q#:me0L6H%L37:tm=,/O.%HgT78>R=P%2sdo1A?p[O%Th!clbP%\9Vc;c!n"[jr:]>i?p`\,T_Ngbob(@Rd%cR8>_Dcd'Wu;.+\%m].MY'P-P!&C3*A;*?:d#4V<($LZhP_5%j:Y1S,f;XtVSo6`Bg%me@]@V:G,rla^s#*g&uZ-ojhW_GB*VUkPkuTV9KVI8E7qpU$In!T<?]CfF-Zo*\S#q,0,DL-P@E0q,/Eoq%\E<$+3%&cTCFYo#X3A#qlp([2'Y*tQ?O@OY'3N_G*SGO#?Whs#lO2`'eo:IpGB[a^Vor]8o>,*f!0[TK_!GEk!EF"T:aIb:(bG>d%_;0d;!8/lQXA=3JKJ]5?BF'HHNLkdiZg)aBH8Gj<`s0WR-OXh?)pl0=:j>J_Ve(_r:_9AgJ7B<oD0cjWbH;\d2R<cCA6XW0[nnYT%2EPTk;&dZ*=QTAh`cPQnKZECoZS!0>\DVr';jeRSa?\M7i@=?4e.E]@"6`%_H5639NCW$XhA1$6%;1T#Ns(OlP6rkIjjN2C6&C?&%hI]\2^$]<*$8gK(CMCGY`H\Ani;skNcFh/uU;8AqTYP*P'u>*YYr;Ra)pn;A^9V[`Z2tB'._uV]l@X6kUZ6]h*UFU$nbUt@4">lG%op.^N&^3]0af^t?oFnZh@#gr>$)L?Hc8D@$c`C'b2R0q]Np"8o;mT42Q-0h'!5j!)LC[%7k%U!q9OD@5QNF4KeM<r1k/ghR0aIr\%2?,Pp8P@a(dY^>pf,?SHDumc7G9nu^,s43?MKs@U=&<9XfkE;?KUDluJ_ok^FNueuXnA3d%9CgJC^-4%L#q<*Ouc\RjO%#U]prT5%#`dR=X0O1u"NX]_/'l#Q,[8r^b&h%l9mm#Q-QQ`AYqKV;5d[,S&VoK%A,a1=eV/>>_F4-ci9^.=$?l4p/gu&8_A7@6md&N]`)9e(%:5l,9jdkJ$L<mEm\WX"<F)TT@s6C(J0[_mAGVI"\kKFkWFaA1fpb_6Gg9-B2&`]aR^+<IA^pG-_XA5G=$.Qjc'Ne7:4'9>E%Fq!f%b2mbhY\3pTlOmWkmlVT@N>Au0]Wq997Q?E5=AD>j85ZNrHZ$u&WAQA2pV^qUf$Ip6Y^gT5K>g%ib_Z<^m&U7PN<qFi&A[KKYY*?s%YLfSpH#5RV*[liPcfi\^U?gm3:8ZKoU?M6sb`WphRNi<TVSg'-78GP[;e$W5\gV_2'4=aQS)o+"?EhZ0`0L0b;O\[0Vn:f[G7ZW6%;Lq$5Af&K^i8i%HXFhsgU8;NQfs9BYE5:gL`PIch)Hk3U/=6#D<P_jYOp<]/[7J;-m%fu5c_rtc\;-D>.4rg)4"Jh4B#_Rq\)gU#%d3@ZTZUfoS]<BKq3*_]/%2uXG+bpdZau@,AbjY!,s7&-732:"WOb=4Ib4$?K,@!#oFRkTc;/Bl83Lf<'(NX8tK=omM>ad!8kZ"3e%,q73"#R,D;+SqoD$FUs;H1lpn9cVK[+9:Ig+b>&6A)7U7>@=B.m=*jO2)Z-Pl]Y@4-<i_Ra(;WMh><saalqDnR-Csh?gA^dEE'cn%"DP:o>7*3VlZ*RYYHNp=>+*BNTc!AiMroi$`)ks7MhbApm8dkYq)9cJ>?m+@bXK@3X]u!.YDK/p+$1gJ)^?rF]2$1SUhs@4eZSsL%TP:2+S0lGK[L8!Ila2sd*`PUn.L+mA;[m/Q-tOIW'Mn0pTSX5-bIn(["'Ca=k4_r]RG$9:jX@RTga(43i:6ZdX@q\J7q39F?a;e!%f:<j7e@BC%Dq-KhYhV)"/?LXt.D]kR`P"!S0$h`o4p.[hb"#epb?FUGMk*4r&`Xis%iaGAZ#D.]Aa\fiH>jh=WOto_V=?m+<UoD&%_.Ia'^WmY2A0/D#P5GHcZ;!2@#ER5E#Ls#_9k%J2_;k3bnML]'M6bi5<b;B>X+AN->@^5a$^0_>`6&6%p5rSrd^W$GV21,t8nFQB%(Y7s,m:eXiR+m%[-J%Z9WpFkGp)YQ2&U9<7e\o=<KC;=5#@UrLS!%KN[hT/1K'R2)P(Jl:m*2ZN0V(mN4.R$#.KNq\@I9_7gV1%/%DmX79Y"HX_<Hu0j350.NF>Um6l("&oQQ01df73rEZ7War>t;k,%9Pi8be[A_9ulM2$UoWg.q/76VEjTMh;bho($oi.2BA\2?f`MG%I09+Ao@rHkj]%c%":j<$>uoUckg$0Aqj#\e?T-g!Ct'D39C)="e7i/Lbmo\DIXf*:O4T`<egsrH\aFQthe3N_X;dheKECf5+F1'q%d(/"X7GnG%Vs11CJZ".K$WWnPSgUb.bm:ra03"7Y#i7'sES=Io;:g#b06sq\5'hAnB17;JoGfJm@((ac_jB.;Uc<cu&D>50RU6N>%ORg?r3c,*s^g(QA0'l2d:A3rk4C2B`c&UA@kX:k@(KrO:D5AM+].QPum_6u<Z_`G]A_!5an1&C#LS`]U_[4Ad2H+"-*ME4>WsUcb%F'4JpF:bR,C68\rW"M$Sh[eKW;S4QF:.s'm8Ga&[b_:e"^MPkSoAPt*.maXDS-)9)I:[Oie1#Kt-[)h5FF;j-o&V&X?=02P/nWXS%(bHfAY"EEN#+\t;F=Sq2]3$#h`XYaqeYdT(c]2-JCqrph\E)=/nWrGPRN8J;F(Asf_h"n]"CS,glG.\(39FXdoAs7jV*TE^!%N'"%NMj275-eiC"e2Cr@FA`DqQnC2b1WiP=QUW?^j-jKdDri.BC^ER*j;`i';H1c-_aoR"kChXK2GFY>4A/]h99G@^*CqSCNWjL#9S6p%Sst)1m04-?ZZe>ae*t!!(#8`FG$+#E@c(t8"O<2k"j[[1B`O%p!VDcB_aE)Ws$-564Kj_k=VQ9'clRip1ItYi't1B8_$G\0@'GWq%&2M62#ts:DoA)Y!C<kYPfg'KB777WN26&M*lZ:qOrjpj$LU(rVN/T211;XtK?Ub7hf;n\0A6\02_rV-3*'=LF$VY0D)Hbl!5'n&_%X:.a'0.(bE$pp&902GS(%mlaEJcA49[d[S0W-#=:;1n'DPIp&$G6Do&nl6^[SHDgM6.mrH/8:!_Ob'4kBeCrg/RM(8Y]qH?n7>`h%!kPfkR'"*cDI\9PMN4m3dI`]RLH5n*j$J2;77JC@F7R4pMgVhEg,*fgD5iEKJUI$PUVINp.BHJ=5Ijer$BU/+@$3s4moBV)5-=ZD%"A=B_'u"@8mF3_$V!e`L87"FiUM?bPKQ\?Q_a)$DntobnB0^KVV'';2>sAT]0k/7;dt0io,qYP=+,!6I=]V,M?e0+n\/!*tmY9U,%ORu<,oqOQBL8@@`/=E8AL,)F:gVq"jm@u2hN$eNHR@JYT9S@,8=*JZqeDu%k;bL@.ptT@.\<c]_qm&>b4onGh:g/*b%/l1X>m\b:%OZ8+qMkqla't^E1');$S7WPU$_OGcc%&JOOJUD-(j.;ii2'0T*09$9ebst#hLdk1R-0=`?H.;qF;*4:/o:LCa>Kg-R:l?lA#upYq%3*ZA3-E^%^5VNocmT3qH%#2@7PHW-U&D32G'"S1%5Q";3=R$r1,k3,+1;c1hahu$cI!WRs%S"1oe4jVPmnGtRop+"Yi"+;YP8BTa%R5TG8Da]-le5e]dK>d5Z5Td!Z+HMPdJpO4VJjA9$$h]Vfd.,"X=C9#s3Nhj-b*T+7./X9+!?%k)5^E9$&`mNlC'T,h^2JlG#kI]t%'F5Ami&@_-pmAo@_FM';):l_Jb2I2kY==ffiiu7eqOToF85LHtpa`m)Ygi9eWI)u_h\n(!9"C6:IU"?UY4/aMo(a5RQPBePWb],%%TU!:CE>?M<(!2YI6[GY5TR`=`O#8'O6L.U*cA3:M"jf#X"_kTk%5$$c/Bt@cZaGGu.c/)%hIY@un<prLP"CCo8r2PqnMI0iA`&\=%q,3O#QtB!L%#[AFF`Ae4<<]!jh1A,mc=i4l&c<m1&Q^S"&_Fh.B9';Fl-V?+)f:hQ`+5C4(4GDf9*kn?5fZ]SlN[bFo)QWUWX)]h%K#)e6EIu%b75Ia@JL^MX*%cmFgI=;O&cJq-lE'o/8P5\5>kp,m?`&Y1:mi"pT^WIimZ?Q8F&gsKp`K]sdS_N@cq*&_QH3&lL?\:\%?J%hU?W9#?.GR<:MXkEDI.Vj@^3g-UlhTUFUUt63=)#0"17aAt:$TMjnLC9k.Sh:R[mu!qa98,ZpSE5!_T&MV%IA,4.l.bHE@^+M%=.aIBieY53%C4'L2L0a8Y(0(k"B";kCb3fDZUNDP%;^)/08k5K-OhKE^l`np-?$b,A"lXhEkHH+>M:-#15S(J#?04R$nN-%j+Q))%#keDAG1"&<Ls`"K_,YEE.Pr8PhCQXN'en5h-h&V.Sk&MT%q9p%`)LOB<=-h=W)b#S5*PJ))lcj(Mj]F]%TlbtH#bTC4rg;J"aS18%`Y.*"Ab6F1e7@Oira>k)/;HK%\iA,R8PuFooGK"lB7sJ9V^CWf0a?4-M8g2Kf2`G3(\I:gL+18r;cXGjl"]IXeR\BA9<mH?Q\gGc%R'RE`elP08kuf/"^5)8"76F13nm5@cPTudoVUiELS=XM)M`5W99`!tiTPM^#:jG7ARNnIYP;:'F@7C;gC@7'+$Y,iY,f>V)BV5j@%;J4F1r_p]-OnU23r$@^SGIX(gSKJd8,U8&crP=&iXG>'m%HXCBAuA]g[%nY#YgH\H(o'<hE5]jj*Tk:S<8$?[KBn8KGL6FE1Z&#M%b[[lQ9+EToboh+RBOL(MZ,A_>r+8l^A'&*\%TB&&T"Jp)Ah@>T#TLQX;/R55DE-WZOb0u"Kc\(4)+qN[TH"go,#\lrZr=5QjH\k+%#d:14hj.?=aN$7$\qFrRN)@,f7fie-S;NY-EA=1#e)edp_[26h;7:^$D]OkZGue;Z[$&5WE,m"NW7$=j5`^IhS!b)@,4Q?qbKc:!%89Sg=l6=1,DMq6R[^@F<9I>D'GqE-M8L$,e'+o/;WUE84Z<*/P-*6bhEFU^jG041Si=/0A95^sa9:jP"`0Hq;;i/Hh`>u9cmt*/^%eEIPU)WP+"R-Q-'G8sIOL@d#ee@h\QYiX0/B,FGsAJ,#aB06nBi/3\B.@\bAS]B,bA71UG;;/p>%A(Vrg3dTAJu*7Edt[<a`rY-<%du3cOL&fbL/H(3N)X*'Q:bSO!@N!*L5"UL<EUn*rT9h#6SFCq.I&0aW@_d@HRm5^HW+(mlH9B;ZlE(IB$rB9p-n,dSXTXRN"HFlL%5rJu"@_D3@%K;G/^;&lXQ8UDQ/O#?@h,\n8[FD%HQ>`"skR4J0-3L1p&qW@$lAKkcGmK*C(>=necCQFO&q5mUII_M%"i\Xqf*gJ5%&_2)an,Z./rlLL(F+GaoilJ`<!M`tLMX:is/H^"U'^7BW[#l;b,fC+fISQT@qHC*/P)'J7e-fM\Clpqta1,KY&`"n,o'l<QQe*S6%TT5okD\l^K,3XTVI7D,2U@FHYBY0CPOmC$]@Q4jk&KKQ>GU6TbLr4nh:W&]T=.QK1__IIajB4KO9<9K)#'R@HXKTE52id)5XCE3A%8G.rj[]p=39"C51a3S&ep'p]+R80SL_M`()E"aCaWcC1d8!*1mBjaU_isQ3$5Jr(5U')2pY/ao3Q9\Ub^A)B`)RQfP`C-d6eH7ZK%$07mQ5[2eg#f0WF"B/'1U0hn;i]HG(j'[ht9@8:(Wg=o[Ht".H90(_W&a6,_4AE@iY$^\0.#r[K:e#0YRm2o]Xr3rAh_4_L7?@di%l0ZR:FGt!_KgKll@3:AtH&R>\n`F0mLli]AIsM_S-)sBq@E,/S[Wr\sVu!X+[&q*#Bc1/\f_cq2Kg1/>lFPaJIYmM+)D8=qW53lW%KV(LAPo/K+2Of9!;<_9C-*Y_QoQN,G8!/&W'Pj?1p_J2ON`Qb3Q)PRg%7_$W$6=TIlI1GB'2S>u4:G0oqRd4imm)H/QBJ2rBit9j%DuL0E.$eaYE.r[':rW6^21kQX%d-d-bjZ';5$AiFPYlh.&:KaRH4S2^f03'9m7KQT\15O']ZZ=#Rj[UNq`7&Za1&-p/LE6RD%XeT%UXg^@HVQ;/,9"^Zk91j0ZaABbE+;5=Hk[,RG9qosj]kK*1bbl_Pl/gnagu/+>E5d@VqP>&KuNpE*$4-7s-?c07=q$Q&B[YW''$?E%YrBQ:f6oc@:LY$!R,Q,>9L0?eEjVcLii>#kOX^emA'f+t!l_k624sqjTI@%D!CJa[ks,?_r$JN]!NU05%[8,K=H#Kb(LOj>U$kSZ%-Lh[mMCZ7fF$_(k1,5CnaraBEQD:JnL4#TGQO`Jg,pqCMAdmR*HD2BcE>OnJ8<^/IY3!ac*4[cB[<*+9X:.OG+KGkt\RA`lGuucO%ETKic(iJs_!L)q)P.NSZ^a%qQBSi0hC@5UYKOD>gb"BI%)eom'.j"QR*8Auj#BL\7U[!ZTkD<G"\g?tOL9"8Yd3UtT_K5Y:n2.0W%/190bmK\r2njotbqD*.p]FQ%b'tQ:r&[3WT@W@`u_:+E30F`eP4MUad;unS3WjM:t?W#Dt&Dh8Ce\L8dHW-:Vo_*D5DT0E4#'mkM%B"CfqiY]nj!k?T8Y^(dpS%j![?!3ouN2m:)i@Zh`9X"ZJ]R9?_g9(Wt#tbbQoi`/_0.hot0V=R\,<dh&m)d%Z!fH0ueS96"L+j^%%$^1kf.4<g]74P:b,m'KZr^G]`XI$n#/.(*jSt3sr-BD,cT=Tk]\Sf@,226Ja(7?`<?G:I=o,%8!CG#MBNc]+CqS1eU*SMa*a.;'L%@)C`9MnF@hn:+@k4>,oQAjaORV4BrpdG4)/\\F0?VC9jPqm+p&4o6YMG6RQ^B<:0K&W[B0CXH-#M&'6$2)&S^gq]3d3VZRGMa-^j%nt\]_]u`kaJ]I3p2%0U;L0Pma1%h(b/e3;,0*0b"-#ZaOg7]UU>0+#W!(M<slR:Pnk/j@)2HN$MN_-cY9\auJR-2f7i1lpVYV5Hr%&q8m$\E/5()beA3L3s]e(%:&O=5P!S<I+Q,n`k1p;r0'r7f'Og7>U;s=0BrBTYc/S)W5[r,'=-$^PTYc4bFYKZ%o]q6>uQ<=`kK;%54R^@64B^PWbrJ,-gB.o%fr_89HmqIWhT&J/&XAB<>mPsT.@`TZ:uY7`5G'i8IRc]95)fr7&/-=+8;_sj)(;2/Ff$.^uK*`luXe]%*IkhNW-=Ed9<l5''@:e9grUeu[`AG!:9M>Gb;hK;e'M<Iihf*/$O[?8U\unS`kn]WG:@p22@5M<f$\oHM5!,k&,7'3lc"Vdn>-@G%ne,gQ,!LtsV8-S(D=(O,ZaPh_8?Fim"!3FIrIhO^=lAf6F`e]9J[h"(:paX`=C0c/B:C"KjHT5k.B46-?RqK$=p,hF.?&1j$pnM7%:fLPo+.kh7=:I).n^uk6%jh>_0`j-/<!#[Djla$rIt\.7O0g3KW;2/RAlIVk"<8<%PJqT1WX6l5%UogFF%C<ZnGitF%t'+h)e/qS%Mh'>7>c]1^+_Lu;gqlWq+t6nWd!4X1N2=Kl3FMDeTki1iTe7IX>7t2!JA]p\mun=Me'+6jY'^AB*iVVAE(Ho?'&h7^#LGZZ!3>R<%nn0:Z<?8"hOs)Hd-nnn[+rT/Bl1%tNhNfA%a>#(N<MSlBf;ckh]oK2Zl_p`T4o)$!hSF0]JO59?+pTk=;=ZEVHDZ]Nc]SE(<lK\<%l1KEFSP3TV79+2''p$E+kCe=YRT7=]4ZNU,&Noq&Pp44J5'45kH4rl_Cl550(j&^H[-^ddH&@\l`_ab6?kHgi&qq#-,K`t8'[gc.%b*/pc&0q$g,DJRH^DIYTQGoI.:'F.-8FOjoQPDk-P/Y6^g&qa_GYJm+r6YpZn3`n2d]?uH=TU75f>SEaLc6!=\oC]ZoKq:]`$JH9%n7>A0`$H2`&[)H*\>6]mNYBAX(?#trVh_e#Os5qL`c:7#.(^<KnXQYA*f3PA;_bNaQWOaJQCcY=RoiTfe-ZJdl)F#M%@]r5A.k\Q%)ElOVM>EW@8CYtm6=T"LCH)aK["cKf9Lj%=T'6Lj__\E6W1RdX6iB\/,XtS;6DAq/'b^1<S]&b7UnT/?n,HE&qS*c!rqf\0Ee@4H%k6MZ6>*5@PM!V)&,7-+8ajYs,,XF'oVN:qoXV<,hhm*k?iQHOo&X!\W,:"F1Wq=Q6K'RE6+CL?T6r[NX+B0)#SKM25Y[<V;AD7AU%W5+i]9#`+^Iq23p<%728^FnXp/fa\sQ3>e`@.Y.rgo*Y&aT-+I[*rbcTa+4qO80O0X=+0:PhZlILi<(:f8;Mmk@,-GP*&70.fa-i%?BIc%TpI_afQNWU_UXe^!Wht>itYn9gp_sg&=]7A,&p'-,`sa<V1W8CH5&KW$Um]([hN8F^+Tke,;6j%)IA41SIN;hB(J/g\WFRa%6Uq:@,o%'09EiHOfsrk^)N,'qnr`Pq]<#^bH55j2p#KnVfIKbm+;B'llkPEoaS2b"#+lFF;nA+WdimgieJ!,i)YHg3g^6&r.A"[i%U-:,7$cu'qPJ>utn!.]VQJOmVF/YknN_EcE]-[<X"X."uK04+`<@mk"GK"fmW3f*L5(n+u0..3953/PZN__VQSd<f2gR]NWbkRR9%Y-*!G>PF-VIA^B>r`rh6d(G"m7K^t=-s'4Ah>?nOH%'75^!V(R4R)M(fQ<h"$k6R[s0NDKGgC=O6E1!Y%Z2Mr6di_>7EU<eA-T\U%Y6.K^;jQf+R4.*/0_*9kJpDC&:QJa_U+&7u-5"2R'ZY*Z-&T:\_%q\jT&.4SVit8k?;qB/<&iio3+l6$:(6P=2m\EFThI'Q04$8b%hnh66aao+[R_[hBA1#W`A`1`o@ELal=8s+@.\27Pkq_<ZDYU$;@8@YoS8)(QOFj(]jJP;XQAbLKQ?]+Uk'8WX9Zktl*M,\XTfGh8%^%Otj*il5;RqnBDqE#Q&1iP#R-?`dr/)!rnph;fY8kDCr;CW(n_t%MGOmV.,8JbOW9e^V!^R("6WqU[b-[a")@RmY;1h3E6lu+.-%du`fB]G\H+*,UE8gI3`'aOe0%^b2$SNY@hSNY=(i:=7hMU.13p-R)3rFW?Dp1"_:WPFc.@62TW(AD=ko.hCBL=H[NX[tP(skFeSV%:,][Lq$NC>_!;N%p+[,)+)$(6KnG4kocHdJShsV7DEYn07lS2PNIGSjrO-dr/5tHf_g8qDfBefa]!orP6N1n7ro7V(e[iN]et7EI%2akhbSPH4hhJ(O;A[hU0d''<'>pumA(OGtR^Zqr,_6Q6q[\YTA#:]S%RHU0PaI^(D?oHL<HuSZ3^+Fsge35j/csB0;h1K=QVf*?W%^6uFYeXBB+anEBHlh:0,q:ECP#5I\3j.Y.P\u4ualFCsJe$+>qHi<i6)=s_cp]p7Lh:oR)S"""rYG_?VZJTP(N=W+Z3]_!X!WS%)%E*2QmaJF$ep*i^sn)9=Ml6ri9Ze]E*EdQg,pSms1rVQ]Js6;bu>O?b6[TW%k]?S?JCk#,anACXai>/)c<A1iLgV94m;9,s(e4'.,%%F5i<FdpoFCjONWJi-LACPWtp$+#@CbTLgpTE]pY)(70_*33ZH+"8!8pcDKX29JNnk,i4iW?F_/o=qkNo*M=Ij8Q),_C73N*_lhi%Z(,Bm'b`C_ZQ_Guo[N<Xk%/<AUIbVQcfHHXR?:WHGX?WldkJb8W59f1Wf@nB_]tCZK`T7WeV[idnG1?FT'[ea9@fej[7-HLb$&(,%p2;JTDd23%&]!M#]%e<D`M5"MEN$7d4#'Wj0?1&-?dRlE(Jo(*d,4Qs`CbZ3VQ@Vlpsh\#/YI1$%g3[ms"6@Ucui_rRdL7W1<ML*%]6qc0NW3R"+a(T1DE)Ic7stmH)pj)ZJ'kKhi^i+HItFubd!mW:s81CXD5s;CZJbfp`W+qJs3b?#E5h<Jra1:4ghiYoDYslsf$mrb%C`3l*`W$ZXoH]J`;?_c"E@q'[s$ncr#[9'YRKuj_?U@n@-/ee*-pQaei\>k%s85ZdE$o:2\Qm;I#7=!Dn/Pp*C5/*nja&QXP@h9j%&+T_BiVs"!`IRobs,B<l))M:G0LPj8?[nnGg_LRtW)Pe=5r4-+Tma([@;$!o^^Nu)0_#M%]iO4orMuftba+K-HZ<d#SHgtm6`>_8%5?<HYF\#q.-\bR>3u$a6PFf(eipQ*R3?'M<2[d_pcF@<r;T5/g3_7'cld-&ph`q,S9YTSHc)O%4+]*soD`SN3&u"mk%9@\.Afq-S%"]WgsrnjhiY>dYuGQ-!eJ!=#-o3Y;j@*$j0[oWqkp%i1)]NhJ.hEO33R^,ZO9#Ep*ck2:UiM'(3>k#^LWHqg)fp,p0b13WV:\]F.%+Y5(4hnVZ%f3:tb/kt@#VITs"B)_+9^"7%C+2J(p[UD$IDQab0QAup<>37d$Yjrt8mh5VDn:kXA)p+_'ccZM-6bN.;RMaZ]jaboR%`JKW7,_cnX+)R_G@OU?"2o=IFR?Q&Mi*93!(\$k0&M&SY6.*iKR4"k<Oc2slZlRhhh?k4TUpc.m%M!5`1Fq>-f+pZsr:h0a5(R$;%$6+:NCdpL'G$aJ#I,:9+jYP:efP'<BA<uCSs/L;?bN8?mrdnU7L,),!H/fCCC1F$72[mGbk]S!PHq-oJ02@s[m@/V)T=a69cbakb%>=l7B^SmXum<u=k.c3Cub-U2)\)&1]A(i<_3EVquc.68%r6N!eKh)IH5@:hTY0'P&k4JI8Vu79hjF*__<FblI#P9TgUo]eX]TrqJ%OnaaD3r.rg[a@BFU^,Qg5<Re!4@c]C@5r#h^=SFMd0*7?(8LA:KCPR/s*hWF['6&"7t@;.(bh_+1"i[(j8#t5mVgYQFhBr%s/)il%C@!FLH?!'ad(+"jrqNKUru[<(2Z12h19PtRoA"9Xpru]Z^"][hJ()@>qU\n.IbhJN]1m92"sSF:0Va*95Pfjo2>OHIZgHU,E.Zps%m@m<n$5UdjCl@dh7_:S">&bcgQ492\a(+;p^3pA^2$tH2OEfLGIipQV`fT&'q;8g(G,LlgAUT!/%VW/W7Fiei:2'OF>eQ93qEk(*%?b^;4M\,m'Sc#+%cr^5sI+5Fc^R9t!H&^un^[q6hj^eBP3aD(&d>UAZ#HX[K3W@4J"jH)Cd8^,FE(YIAs7+uK)ZQ:f6*GFgpn,ii%GsHHDUfhWtCi?#LrHIj=H89'Y;Z8;SPe[7S97^YjF?2G*\EWWO][WB7qa]IhYX45K.f%?(H''_nJMgiMrc*GBs&ETPU>c-&-2hT8%hu,#KW)Ut?"sT[ah.c&_gLtJHn0[5R/SIF*rO\usf^.4.5m80N*l468R(a;!LE\RO2's;&9[`8'IS`4Ep3r9&lFhYQHiLi/['b;0%lucLX@?dh3,$u<QpRe&S"283,TA^S^oquE2gq/&`DJ?qno3W$squ'R%gFTNms(m*>/[P3,^:VhE[(^GqA`[8"%I<hH@d<g72KX3!%D>'FsEbNL.K>MhQg#[uIfRt94nm/`rr05t.*`c/,2p7l?OmO0#!P"GE\)-O9eR9sIIm]"c\$3%8eVoY-[]=WL2k>9h[bU)R3aM`s%A(mfPfqrT&Y]>Z^9ME_*Z/0g=gZ$@]H)fcY`l(F:WRHp1[,/A1m),"p\p_/nLoC[dbbV9fB71kFVVb6T*LBcZ45,DV?VQE1.rX>%%pZjd4Xo&+TC3[#?jAsjsmCVQX?*eq6H'0+&&4^s#VE@<MgNKD@!/hCJfe!XBo)kIs',]A&9gGU8<rT(3(s'"*henbW(q5aFY26J3%\po<\d0fa]kk>RCUK=Pc?GG6?OJ2jUs(Y'rem7"jQ+rcI5"tpPhQ"%(.3#F>ng(]Yo2i9qKYGl@3qYu(eS2@t=765C^bhM9rN..>%RO6]eb?Cf@DrF"6gZf53Ta?IKb+IU*1cjIIk&#-*jm%Ur5Orl[U:61ZOi\4':3G?sb\!Ksp3DZnnCWJfT'A=+lp_,_3\M8nGIr+-%!'Sid[t6^)nRM)h%;2s&j^6D,N.5EWkB.Kn1dbp/m7t0jjngqJ?Di#)QP-5.ml&A)6#ub.Nco0LM);pqB`(8rnO1iW)\d"O^-C*m%B7#M..)]`6Ab*jolPr0giP<u?-`m=8gf0k!W/b4il+7sSepFoV\q).k7(IBO=gn^,heRB`8jBd2E&s5NR`lnBJ7S8cF0jd'fdV]s%1.q"graEp>4rT=43?dI'W)SMe8(<m[^$YMCP5Fo?8+StSBC5R#BO,=V6f6DJD(1In2iq3_#@dE#2'+9/0T$]jqmkI,C6nTiO+<="%")c:D8%U/7VO'LhkiA_tq0Ck47TGp[)aIBo^>7,lHKp9,s2O*V3Rji^m.>eh;%lIgF1WS+T,p^h[j7W^->dAUa<g]Ooim^9k0NmF%X&"s&k;$EMnMAQV<3(q)o5ooFeS5nleC/9nc8i#*0@J5Co[Jk^<)sqm]$RB(Pqn?oZ)M>Tj7=-+X`PMJAMq&K"Fa?b21HBWf^Cp;%R36G'%EHe_-?%(5,QdH#G!>'YZaOag,^XFIn<DaB+I[OVSY&,nc%4,g`L8*6+grTL-(gac2LG1Bm<Z^495R3ii^Pm3"uasj:2[[i%n)h@a=F\J3b1h#J/:YI?_%.c[Qc)b%X)Zdn(6)'.A4[jPXIPPc9;On)^hr/;aR3oAdmYE>!:SS0-`@Ni3o0fN2;@,m86=:;8td1B%oraHNW1qODRdH3nWX&BG;t`)Qh-]tnlntA<NPBN[+gl$kH[,`)D>IXq8fKs@IBZAHqU8h7Lite"J%BuSW&37BMW?L(Ct6F2Q9o[d%brI!Z%oJI-JDg>!I<Fm1<&0FJ@T/?hW$Y%1<r0aCD$(U+k]UuA0Ju.=ocB@8!R9!:"nQlP\_r+7aaI+Vp2]j]>QO?;J^Ppo\?@Ju%:ttC\!>oOQM]asb3<id_U9cK!=O"EB>A_pp>3iLi4/5$prQ8t-T:PO2:YhY6Fri<UB"d@HH.oAW$KqLsrbAl^BVYlB"4dA*-LKq9%d+VheF,!.t$\Rs5jjPK`"2WU7n#L#-DfrUtFN+XSHGA`QMD]IZKT2FK1f$Hu,h7j!i^QVob"IpBs7''Fpjao]2CPrt`oSllH"el!%i[lt?#mhPjM<2,)m]HDQ+>e.plo[.G=:mFSj_Q2"\:%-F)Z93AUsC0=@7(:q\d96E&^_6![F]!=El88"[qil(nRrU]p;E^Fd@-B9%Q)Y,A+_WC0T5O)cqp&4U(PBCRXZ9Srp=l>aC[?6<oH!mO/_GFG48cqKn1EPri]_g:^%,[2j*eAgXnLH)F`XnD?)tGY>N`b>2LZWp%>[LiU)cs6")X%+No^26nBkD.%n(X,4\F-bqWQg-XG0bL1ETuld9pJ_F%Scina448BgJ@d-Xe3Gt_qt%-S,1]3G.FK!24*0i\A+p'%Sj*+@>5n2ADec7KR@.6m^AU+#D!mfgc0t=5/I8kf=LDOOC$j0oN#:YXhcbAq^\tOHdHQ);Sag(SjV+0/#0cDfHJ65MBt^LH\Lhl?%mDTk>:mq\0<N833f6fZnpDs7DgB%LaDTPo/HJS"ihKej"b<KB7qfJDVU35ejc<OK?50hKlB*P'k-sUJ#VL,_]p^Ym75;0/+:<hKU%ZZd5rC3NEJgKB/Xmp9<"3mAN6bn'!`iY/(Q9/Eh]]AMEta'"&_9t,#??d]1-4nZ3AI=?I32J?g%kC7k8\$imDomPOtQX2Q9f,93%%^D:1j[1C^k[4a2c%U2&k6%P2/CONI/lb<!d(-\N'b'#sshT?\bSXqi*?!gAH'_V]brP<ZT^RV,Epr2[D]=Im0b!k$Wh/C'oXr-eU%DD&AqeuO8cQ3Jqc!(l$`7sFX3HY'qkJ:fI"GI@"lIWN$0"G>F!pn1^G?gjd">+2-nS^u2H4q3u:BYF:kG31nsd%,pGSo_$`6$qp!%((H-@-F),b]CY^$P<S3r(\>=#Dml,nB_V=X0s`S6p?P^p:`+mWl1M*@e@!`-:B,V=ih[0#?[cQJ#Hs1e=8HCh0po41CjdkZUofpL%FRJ%!%Q\r]eD/:e[)mJU:4J*0$DVPCJ,%6"*ieD$0W=^[)mhQ5HYnU*03@:GK0"K':/CYXgYX&q,(k>IA$u9NJl,q.`PbsS*r^EX%``kNA:f_r@futGc5MZ6e',qWU&]9'18$/Q8oKa#M^)U+f=A9h.o[*.a#HdCI#<#/Y['b@jfr+etKoA<iqkpjXY?pLekH'.T)cXmN%)YR,$6hOO3T_n*RqqPBOTXA1qI"(@ugXJMRYFNqUWQ\Q3kOnXPdoh=[ZS0L?^8DM<@DDVbWj+N*%U,=KL:t0DEL8cM_eNuTIE%r;%hQlV-fBr2rO-X+:AtBch]r/%+LNP>D3TuCEmu,`g6!mD^Fh9`U%libc%16mu\C-N8DWulT\cIGdreY]mB;9l-#(6am@tXckp)^h&%-qO72]uWe^Na_Z`48j"9FudAG5CBKV*8M^.^nC.BnWe!AG[b./rnF7d,Fi0qYPFkHYPP<g;2XTHiZm47523n>.nNc$1H!dSpF]n$%S`dLVI8aGIbQiQ3*3@'_/^:s'o_oM:&D#UB>"p*gm'in:c$fa"AVl\D>Mjm:CqX/.6/PJWdG+&+01hRXr0Yh`VT`HJBD?iO=0&U@%P5-W,Cn4V\YEJL\*RAmb^LjltHXGm<k6V?!48EuhoBYe)L,tSK^E64YmW*ca?WOI^4aMSP*WDMC(csn$(](GO55hn&Oo=UDPKm%Z%Y6&4irj!ulf'[+4!M4RdjKIJ##Do#/D*DV4qYB7Cb7J/4^UrCcF+2sB[?^^V([(*^phLLP<tFmmfjB6$[kDcN^&-Y[qc.#4"Sg\S%k1>?9^/E;VohFQ2=n]$<JSjRXbkSDSFg?K[qQp#Jo@MOGVp9Dp`hm@72BDVjFZ9<cbJU^mq<LbF[nW9,lS88%PMjR"c3#!n)9I^j%p1B"E[da,"ps3AQ0UMXXLA9MapMZ>j^\?m>eq:6<;18IiCV'?@FR/>BkpLslCA&PE[L54n?*uo+\T@:Xk;K]oTSr%p2-ss.:06oA%gap5f^=WXMrUqMRgU]&^\MqPZ>dm$m-F3Mae(,N2rVhr3-X&9l+\SpYqX$:DI<4q;Jca'[kNfK@JRbl%R=g*gKXQho@!tjq)D.AX%N'T,3AI]'il]W(4/bNPoP0"[X/X\[\k\a$8o_$^c5,`o+1)pu[^1545ep9D>409YCom8Qp'cGNsL&-3JI8G:L.NF[gYV.5:X]I7_%-2g#;:pB^[^]0ES.(AuS1Y2sLhb,nT:t4qi"pNrr3^Z'[/RrS04NSYos);qK4XfS(d62o7^FjS"IMoT\4tjXLVR9+)ZSks;G3m9/%l?\-$A@3[o.c_DMk"D1nOZ^-pKU^?UZ52e5CmJ\W\[QAs&S#h9L**QMD_GmUCp#=,.W\kiScEpHSgH_&Z_7,Li,;i`(YBN#&n=Wi%J[8k]k:E4%k=%B2=)qfrXcKEK4NSqe_%ndhp>24*!D:B3UHc8hMX/4/I2+YqM8&l)Rmao%2!'_^YNFCEr\:No_tA&=([/tU_6ANp%>=SSQgn$j*Nqp)jm2>H7nmQ1hP]hB3PfVjB:MSTc4u8MpO0?,r7Ek*h6i,R5m=R\QLHgl]eM"?tb?84:Z9IU9X+T-!p#-uqqo@<?%4#lsYIg>3K4J/6gX!M>*W1:m$:YK91G;-Hhf)4>d07YT?Q#?&gGLh-94>sI.[qE-ZCgZjY-UCn=.VX.*h&d^0fA3,qNpnHo,4"E(%jm/kdMR&i%$qtq`1!4mPM>:feBWh0)=O6)LQ^X$!MRlV_NZaE@O"7PA.8/Z<)m/6#SCq.3cN.ZC>h4/jHj9#QDjshS)[GVD47uQn%Ip:X+]Ng;bb)r"`G4jm(g="?oYFVDA=ZSuS=FO07-uW+t#I@n6-*\uX"d8cV\#kqc(PKeu:?O=-<":^BJ"1%e'DlLV\/[nf&[[d7%dL_TiV)ROnD"*Lc>W?r]UuL%^p_(7&Hu,%m@NrSd@Ws8Il?:$C-hh3%F*D+XkO2sSIX2aS$iQ^UJohHa_?K6YY$]+*1hAa]pi^D4%Ak<rqmdDF2T\e?`f'K#/BhJ67DQJPNGo`@4,,:S>r*K?P=aH:]_K*)<l\U`Ufo7^QjSU`=/"+^KeoSH=/8kCB8Jb#3NNk=(W\\D7%+8gT%6BJulEd*3OK?8Umc4s#A[AVh?T12cdYI-^JU+U[H8.MNHI$$:_GA9%iPXrN!9I`Q/4$$5O[`JH5Ad55V\N7L>J&+h@rfq)Q%m[uu!q9&3F:n#Mk/61dLMR$2_ePc)rL[L*q&nAp,0kO0uOk+ao'4P)Ug2bV\^"[&+F7jBEMN+VVRi<0Qq0W:GUemm^56q.r;hY[M%oM^%E(Uq=Q5F)2V0*fm,_GI*Kf2V,/B8W_diG?C.(I"JEZ*D38p$8qhSuh5l-Q-^1Xq![YR(\PZ.;n-V:*b:-FUbc5:1Cfri/'js%42b+"iGA)]MuIUOJD)7"23Ed)qt[\ZP.iab7O3;-429=",Q;gaS*O)CY!9]h&fVt:WUY>MW+fNUF?m!TIkkS_i@0nSoQu'S$ii,<%<:66[pPU_UX8`%`;!Z<3pODX9DpLWg(?a?'./u/$,0-Z@WlqFXm*he;k5%\+6P1(13VV]G#_.T5acdJ^:k*sc[pfiQm$R6N*+[mt%MTa-FZ=6>ZGi+E"EU.3*oK:bsS(;+]Q7MCnIIr=3p*Jq.dX&Gbs"\d^7?*3!EW&&D6S^aU-2[I$WkT?Q>(Z@`dd6eGW6TO(4MHl5%AY$gJqgEu)StdXoJ-DcbYWt:"U7uH,^X%8<gl4q2d1GnjFoG#7cXY&:1-@IN*V.hk_G8/Z,+]!BW@!b.8S.b_J<]<X"(\@YE*hCm%/PV9t<)3`Z^+PdDBa@#7qJiYD7APaUjEZ#t[Q<i%GrgaR5V&i^(ZS+AOVqXW3nGWt8Eg?caZ%Y"6BRW#lcWo@Wun76dOq!inFMg"%(q0KS#4&Q"87OAOQQ_3Ckd#G9'oh)F-mH8MF7,+r04cau@e&RM^.m6,qp1)H/ok/J3a41d^heL9UoQHQZ$GoZC$$^1N)IWsBY&2C%HPs.YLSoC%q_:HY[!q",B=+#R9_!Rd]r=Q59;6lm8\RJL("?7EIP=F,aQb>A(<:4Iq3\mQYY+9C,V8J[IP:&H'brZ[lq6V\0jbJ=%n+[No%/8kj*PZDbhd9+VbiNO$SWKV#UB#C&*3JrH^V`_=OQ:Ji=AVEeNgB'`a3JE'N0>G*NA=FmVoFt8(MEO`Xm"Gn>oSEk7<X.^%*"@3ciFj[S^&n7,i9lm,M/ouEe]Z#&*[b50Li+'0'r=TbC?4Y6>t]IkO33N;V5-/%ELr-")YF/Tp[TcjN%PiB=`He6E5m8P)`dfB%R5q!BT/&(EA5(dl(1oAWhnBg`HSYP0Zu=?rVGW_t\VPg/6pHM>LfA<=i-rE%X-Ed5+V+nP1L0-@jtStoF(>`9+3Tq(hu4noH[qs6%6H(O3ObUZlWoI<2S%qQInc`,mDq67(;\Yq1,17#`]?*6#RL_<Kcor8rn+3@mm+V[8HgE%-$\t'Xcqgfn?W;nk5GRQ=H7r/3.\8c.%2#Nm0:Zese1c((I>Y1'4(BoBj9*M0NFZ2f/lCh.UX,l'^ill;A]o8BDW!j2IQH*GJ#/-EC?m?IOh9aiY!V3<kpiJl9&,AE]CegJ<%=HOh7`43JJL8V[TPZifJZT;I8EEu(dkluH[Bi6sHFR\5jYnYG$JE)n/9K0YiNAPpE#UX,k/$__,>'+(*-XbFc3q.A_8`auEdC.D)%f'Q2Z]:4oR@qWeID%]6adjsWXcF=h?.=&6t/JNR_m_gn<@>lSTf(:1$0ka0E@lUG-a)KF.<M?PR7b#(%b9E*&kPb>Te(a`)F+3tg%g>AiGGJCo'cHi3-c_-KUKq/(>3HY'7FMO(fP!bS.6!'MC9Fb?W#$icaE9&"Mr!^0bb[bbXnh]LNV_irE])2st=Na*QkY_UJaibG>%/VbrCK20Uo)_6[r^R`So+#es-5D*k3I:^57\dSh.#Y-K^bQN7`1t[E2[CU#mOCf_Ui@)>6P:AJec+$Um\&>0h$pHa9YW#P&.GaN*%j9igg]n>j>U&Al&7#jn:On!O^*G;7DD@5@%',C-gEFsusZrF:)*T%Xg.uZhkOflW>FE[:aiUmWemNWaL=L-\jr%ue%;[P<&B0-3J%qpLUuSC0[K<R.CL]OmOq3>JGkOC5Q4m:W<;A:+8a(>nlR6$H^*K;(##VM]YF#J5t(BpT!$M.TC:q70ogjaHo#&574NMFBjlR-Z^Z%'Vp8W(R*[0F]G:!]j<<U'b(Ah781--Jnl7@&AcX!>.Jr\V9$Q2H9T5U;Mh@@%'mt_o&Q@9B(&![\%WNQQuWZm6B\=jj82atJIsL(%,.9WW/*AO3OQ2:0/F#4%PQ(Fa^H50pMgf.>X1HAqF/I2?-T*KMFH)^/2^#t^LciCZ5lM.SmX5"u8A<mI7UmIFP7%UkBf[UG52<e[%#u+8-k.oK`gcW<L#BPk&_[)uI<m6AjA\Nbhao*ADb>46lG*R>'$CqW^WZM^\"*/".=_(Q8^do:]n.`_^N5]Z[qeL]@feXQ`ht(@P%;q8mP];5G[F4%msIPd8AE[`_EK=VohP">9Fpqi[g#%g&:>l;].h*m=:4Yl\Nhms,:kB'^?D_QN?*8lJ*97%X)CSqC_b2q]C%,@Pa%?;@):7&A!fqj?A$kj/hsB/6'.'Qac)OUI;frF9!!$SH,>3FC!08OG(mgQa4sS\OooHK62)1HX%joSeBd4C3?h1tVT("'!@No@p88%HmF.,W]sE)WO9NuhiBdA;Y@;(Gj6s,($3`pqoL:3g?K43hT8q>q8[Mrj,tT2B1eR5RF9<@F?,j]-9&h[302;AUq!.jWsG;k*Z=9T%n5,*jADS]kmRZ&R76E?VbLICtg_T]_C6.g2jH5"W1L&(I1"[]Q9/G]cQW>qpkjeU2*Z8Bh?lE4B..BN:B^$QU^t<U?BHqe5,590C%T/WoC#1;EEMWc+OT(@E0jI?p@*6U]T4mpA^:u@khj@<k'Q"BVdCEg0#H<ao=#[KJoOXc%oNMhC1mtR)73H\_DoA_B];t@aa6$m&:%=D$b`Br3S<_OcgW5H9"e%gn!7(<W[N"p,5Q4c"nCPX:Pt[u=e:)^DmG(8s/FFN`lBlKOs<]jcRGb_I/']tVAZE2As(0m.!h_eCs)%A]0Q?i16;I2gg;D./@gr&ZXL0AFnbLcU]''+)YJpi'd.p8/k?8`(`97%R#]kN4>Pi/c?MujMQuJ%a"59E-1e06g#e]%jt.a1aB/J%5$Xdc?_/qEDQG)jOa`O=3Q.\c$Yg<AHo=krUsbK:SJ?s;*1672lL28B<k5b5^kA!\77--LUJjBE4_p25$bgI>k#3US2RuG-YtQe:%B:QG%UCjMj>aOgh.hqLnM0H[]U-fb:"eZMhL9[,#aQmobAQB7[8'=EE4GN$/LF.e#(>.=8a7/XKdu5o^NM@1p/p[q9]u75\QcD=F%e4]EFNq.>umq3JA3aE]&IYLqk1V5-]jBT;4HX\<1O\C$5(fS(^Ig4tl'asKarUskJ)6(W6!KX/fPEBUm-tG=Ra[e9qfTXBIXhSNb%8@f\'Ons>I)6'5UP`bff65cbp-^9bi\bIu-K3VTLZ"K^C\"X$MQ=@lgjV_aU`B&oQGdM/=@8l.Un&6W=$HIQe=u'?siBC^#>\^/*%`)GV!@Vd6fE+E&8a`)ko)^,rVU=4mCVLG=?\D2mr&Q@YOMICgKFlF:td9hPsNS)Ic)&YWA/lP[SDr1mk<FKN-(S8_;NDog[ObX>Q%AZpB5mZIor@_D-Tp42A1C$!%RMtr,g6+$fJ6fKsTS5f3W(PRQ1G^?W,*7[_S=up+'W/,$RDJH$HnTnsGr;63;b.@7oC?9lJ4Tu&6%-N<BFX,)8B5Mfftnb5u*>:5p8#8YPm?>?_PZ`ts;^I;&9\ijOm0:Wj':pOGqX$M'_g$9HehJ6`/>@g7$R)kpnYKa\?)2#NLdq;IY%YF-8OQXB<Hh1"Nuf_t_eRQ5%qB%D3Vh8maC]?RBh[W/;V)ClU_rMpgA6n;E$n'B0I[FTT.gL]N?JDN51)0TgD?m!6oj7W1B*mO.V%H"XZ*G!.p-pDQhN>Q/W63@NI*rKWX@=NSglgSrG/Y-m"G>FWbTFR%]4b,<=P2?Ps%rCq)qBkCfFbO&ejQ4)TB+56nP\^Q&BDdOL'%g4bg__NrJ#6$GY;@a`Z5oqc?'NV(ZC-_E6NH1&[S<()?Z*-*"K@-<_46smFO_OI9<WYE^Q3M,!IE''nB:%IRO(!&<`1aPtLLP`Pk%<_4o,k%`>0jO1\6M+W$qbDm:S;cN9-*-7BD(Mtm=EXdijRns^-bc]$i**bn7q"dl=Wp'11dD5[MoaQkLN__+[F+oer:kYP;PVt%!%-Z`U#%B-%"8e6+d,F^<&L6VWnd;6D$>e7#Z?__8_V.n[5[5c4NVFt,sG[!>1Cq=*MQ/cK*(!:nD4.@iSQYmM@Fac5SRdkt+1>-KT%lmV'hB%'1mP3:9T^8!Yc2I3K;H=GQLBt8>"GH^%<dj8LNlp%#X9JW)4$^=]&FK*Zr@qF,c-/HL\'$&=q94P*O;`T\N]!P_RfR$4(%aJMU/m+';!'?d7GgHY,jSRaY7i!NDHaJKpUL3Jku\kLq#U=jX&3oT9>bB[WBG`3*&9pZgR1U1c-Zs:2YQ1B[SVG$5?]Q0=g`<b.=%l#1`>3h%a='2r53(c.X64$IqQflUrl/^5!ajPnj7R:h#DflUrLLqc84IPtKc%9U\[`lk6;:<A>eWE;W)e,V>/H8h+f!P"d%FH_)r%ZqqrPHYNh@U[*rfCl\>YJVRN$Is/6+=Sc!SAMIf1]!Us`_=dR-eZ13`Z\E7`hk$;GShcN%ZX2/'.HNIlhJ7.(Bfc:P;K]sVA/3E)%*e:/>)F3YSZ^aV+O7Q1H$98MiWb-`"RUnr?U,W%\4bP7aKC17J\\SK8\LS@'20PBL/KuCNd+qOgLheGNmRF4B20>7u[.BG/F>lg\%;P_OmaRRA>Q+>(e-/eaS0i2YcbhZ*\-:TV/Ve6>I%Y#Crb[&&/i==jrK2LL9!mPg0""<:EZ/2'tWQD@6>gWUFpVH>"^aZhEWui-)%ORsC;]17gfL-6V*W@0idF)(%QI*A7)`m77=a:11(YE>7g7##E1A*+Hh?>JVaF,:6.p$2Xs:dECtGg"R@cQ*VJ"J_Z`ZcPX'*Bt$@%ehnKS"kY^[PPM^b,e:B`TV'2C=huH@n1J6Q3#lO1bF-$P<@;c0?Ce02YZY/#`.\3uGJb]W/hHP&MeHSeVhr(o#[JnX/jI+VJ;/jN%)T^-cPpWd\pL#1WTfP3fV5.'67!(p]Pp,r?1R<Src+i,YG5W_mT-f`R'jpPL'b#F"KhBN(X'jS,-rd*[^tDMrHotm#@pU?Hi>P'r%,@9fXCI"CaifsN/-)&8T7]-db-bH`dC9/oO94fZkiqb0kBn)1__`O1t=b4,.S,!=@R)j7B1l;.Q_%lB1`K/sp(%)]WX(+$T7QcF1%$?ouj4q<]NP[>kXm,HQi_VJ`PjUJMlMcRt>YJQjM@8^mr(%3]W_His<g11h3lRu#mO(4-aa$($;k2bX<:!/T@nMs_U?kh)OgRnB\%Vo"j_.jHCl7\ZT\T*Zdo@P91c2l0:/i-pE0Uah(&69dL!_@;jMK]Vdq@MFUDDnk]ePF)?)LG1rqYL#"W<IN,><[Lk.Y<X#TlMRU"%_:%1q\aE4m'EE<1ApZ/MM?[QVBDH0:+MVJ%A+$/Z9%_>Yi^RYej1:&gfsofZ0#n^)<.lGffuT'6\8GPVY/GBdj.R>.MICc0P,TAV%oYr?SR&p0C_/bSU(Cr/'k[VSQ>iROX),F1r$K\d8>kAD;</#F]bDDL2]]mBfE)L#i/<JnLp#laKHS"Xj&PQrpEf]8^dW?<7YH@Iq%`Y5?oVC>4k*kX6V8Is;H:8aD]Da-rJITgscDoX'2n)2o.eVaZ.#bEuGLFC0<G:AtB24pEMk9!cnNmDC,]=F9!VeF:SU^l/Wc-)<+%N-r-hgkp11;`"GAjY+'Ki?%7S24Bub[U*6P-/j9u)0C)F&Ni'jX_`3jH`74/f3t0Jj$%t98kht'LEd<9,5C1[]oHJW2/VSXlRXOm%chY!DmdoF:<Y?J"r6q[g7apkp=QZ8mkA'H2@o.Aqk+R*M',qY]Ql*9'PP_i4<\k!Jp?pd5B+?uqD;%,\mk!H(?Hu2'gn0Rg&g#:4%)P6pT;_Xh^'>'mnnn>U;UrO9ADl,;EnP$)#ObnA^TXupueHr'N*aJJdGs3Q91X.;YIlTP]Oa!dUPN"D>cT]?dK+boI0rgU('b)%<%AcF#trl!9#,8VEM@bcYO)_%ZEldik<W=)d>3M%6fXJ%nJNj/9Y:WLA+TOm+s/i<WGUo^qSohUHXV(IZt:FTR$QO:e*%SC`aMpb4S%*mC$OA]-#DZ8`61Bbd-NS()`*MpaXIbGmB2@oo#?m5V]rc,Z>`]j<>3;ko-A_/@<'F6YjV"`NqFD\p*r/e'Xf03;J=]egc@1Ysq7%R-^.-f.,i'_u-kcG4U6.Xg]Zt_1Oau)$Y\M*A*#5&YEl5V<"PE33Ao$\Q-p+^(n[C(@!&)PBd?NqS%3GOH$nOe/;L0ljh$g]Bgnr%$TS8FhtTt7A,&K!*fBenQBkM.>\JuOmLCcu;`'W\O&tQdnr3o,c8Y0nbY'2p51lB)^o20`X;n:7$B*t=WW2[?g6;qZj3^iA#er#j%<\Gsukok:3YuK$B9I[^f:XSdES"HQ&/;kZ4)c5-G[B%fD_0-2cd2?D"nb^J63ZFU41IPjXDD$^^fRTI7@HQ,,B4EKT/tB$a%a4t7%2cc\c!>^0?,bp8a=b&q^!40'&@Te4MEr_-nPI%RqMrq)eFj!Y1h?N'AC/rJIa9!o]",O\*dB`h2joDFYQ]\QRMrk!LB-WI@;(omX%*[1tgf1]j9a]/q=[(*i"@8T5f5"ts."lgE\9Cp"p^*m@*$hl;'b,9@)Iq_coJN!'eMXka;Bto0Z0htT[]XQB;=-P?gcXO1Kq$(P*%7IcV?43NSV!NEm=lMBUH\N+Rq%9;"5K8kbgIZo!q$L@O_l><Kt\pd)CD9&^CVm>^tf!60qY$_0[@QrG,lhX&Y.8eW6[/A'W?,-<)%Q0cTNiTg:$a%DKF2hAPhl*upWrPm+C.Mf.bATEc1f.T@[8TOfMlhZGp_@1YV&:VgX\phUKJ;dFY:Z&4K4*UH*eb$G%q$/i9^N,"=%IT\[f?6Mon>1YF,rT[D]ZKkR%=4_BWXL(<:rJJ6Q21AiGaLi-crC2Tp:9Eh@/<,Wif.XfRR=IA:4hbALDf@kR@8C970/1O:lM<*o%<qVAkbL,YPj]D+RD\.n2f.T@e+JY+Icuo<X:jLd7I@3K/58eF2?I]Rsj[AY\Ei]$GPEe%PH=op\*4`4ZlF[aqpaE%7YNqOY"q7NP%2br3sfLt!-2f_'q$.Q4p%]ntt/=WE&W9ZB3hF"$;?gNd?OmDj47S-SP97)5)Pe)<RA>N!MbPIaD5W+s>QsJ6\QmdR!\pd#tiuA"8%VH!4-]cQ&bae(Tdpr5=K@4uUbb]'ERigo13oc*<fSa<q:q5UfF1Qn5D0rV6^iN0DklMB`N9NLgZACcfDf.Z"ec$m'7\@R,lr8=p.%?mj@J+E(<.H@4bl8qls5`dZAdV5g0[*-7$Vr47@2X\t:jdmpM*Qg`PKI"c1R\pepKEu,X?/X+>&b,Xa)]lQ&3?,(cnSan<Y:tKV.%`[6uBPZ-*ceZKmcY2@URK-Sq>b>Si>Q7&XMN`+I^F^nEO5:unH\EGsoQ(+$>2;CeQf.<]Houk+T8_]S/lM>);M\9J(B@dp"lW<:&%C$`E[q$F=R/C)Z/qP?kWUPM=Gh[ta[-D)F;"PB:-<_VTDntS;1&^poLinF@"H&'LO'Xc<bPX?E#Ki-G`0pgIgm_elUdu#,l<8#-:%&WBj8@6m9)RWI6jnJM]=^tcC^Iq<BgH2I3Qk:(qP5)CW<c-:/#NOc<;G',fPR[KUYHhPtE.bg@pm$rNp1076^QX7(#2jW%OFPe[@%*W2@9gE3"<[M*Jl@lmanHYdp%q1R;2NN]GWoh0oX0(pd]o[TJL:9WPmYd<4G\*SLFrJR5uN'H\,l2=9-Qd9Sg[b0-X_Z@C7="`.u%r^r[Y=?N![5@/hHk]T1lb]S9u=)PM!RGI<qYP,a)VOobq<ihbi/2B<U3lc%(gsk<9`f00,fB8UCe)t(%XhAOpX#mYbIJoir1\]pO%eUR,RI:HjQe'@L=g;hf>G=eV4cL!L(D6J2lg#'"[908O7[PHCH^T,R!h&i5M\t=$0p$C+\qc3\6>ADh5_]k2$f9<QX/sfnZ?<Kuk%(81hr43N'mc@=&Fl-cVer=3TNZF=UckL8T7[QE;*me6S)\!0OcP!_Gc]rA/229H^t-ZOM1GI?3&ep2tRl'T?5:J#eYf%rO66s_hu%F[Gk-COpp^PCeY1X.<n)NHr@`B.b94lqOVWbL[rkf%erK>$cH_Kk\"$J?c??b.>!9dgIb]=g$"+qsSpdX7aM.Xg`cKq=F?WXlYu6%Sb]ttIBYpX^[58ZHp)unIHdEEnIdhjR+jj&=/:=^c2#pX5ZKLHB5^QDD'!Kf[Eo_C7<S;>.IS)7oeQMf=o<?I;Sdi`e7[=.mIQ6!%SBX"YmJ54#BkHtN?8Yi-c(7uM]jeJBo;hG;e]%"_A,H/gC\bl[jmWKdDm_Iu_bNYtiTg79]5WuQ$\+lWL`^eA(N?2YqT-;;Q9sBk%,Ob'%KKkP^%Bs#9`[Xr3Nu5S8[q*0WSXG4^Sse7*,4LkH+M'Ph>f%i2n;#VMJ*sL2DXu"MQN1'e:_P<g"91JlaKZ2YOfs)?#e8gK%>&QX5.sqR<?<.i_/7d;SIG.=2A^blM#/*.!cm[J"Du$T*h\U`Zrc34C2Hp*eY7W$,A!5I?lR)'OC;%V>bb3^SC=-p/S`[S[#i2)W%YZpkgc0FHfg$Ga]S%lUgVtEjOmE]mWb`/fah`2u91bS4R]rFeLJ^?S`MU6g:B(VY.WJ+k]LI56j"P?9LOgU,S4U_1+obZdAoJ]&8%kp$/^`YWD$O8U@9ea*1$";DJObF78a!P9m#_!7j,@.*8X#QD/PJ4I;p\RfVmV)ig\l1_Tb`BVi-=Sb1^W]H&:SsSX.YUrE;W4Bu@%7BMHm0tr:#M89Z8q>8atceES/.iJU,ET1sCiP[B>:OL^J>5>bJWm7*qSSds0\^'%=8TTE!<`$;5E+]UWYol_0B;Z[>-n=teZd2HV%paEe6da^lNJlWUr%g7f1#(jZ8:T2-0N$It4*]@1Tg,m=FdjEgqs16+@acR1,BeK-?)=G4A1giu.?r\;7B^9c6-3Z[\0*t'udTfU!%X?#f6='A^bBLpHOH?6ZGbALtH>G,(TZrD(':doNeo`8,1WO]S8l,F2:&&IaPJ4&#/O%96sG49m#r(#3>B"s`%,Ic2+SU,@6Kj.@L%=PW^'nq[;Qkf[JL$`C<E.Vbn?nl0qpW^$t79RN6=a^T/ps&L<?KgVmJ$KS[DqM/)JoA/fR_k2Iaq9#%kAE1uIbe0PDU"'iH&m*CD%I"Tm`n%oT),oSkf/(*@.lihd%+d`mbS[WpCXL`I9--I*WZqil>+B]O('m-#$lB52%3Du>Keot*^7];X\^.+`H=O\,Y[;4U>"g&]*%=keF>etneQ]OUW5.IdE4r;"Ap.ob"0=e0g)&_2H\J$)?8&\AQWe'T?0M\h55c:`qXN-WmF@NuZNhgW6G2^5Q#GL'f&N3NumZB]Y'%:%.#jj,*'ZJgu1]G!Qp5j36JO^+\0GaQnF!ko-o;l9O`0]Si99R*59t*-T+PVTg;OrSK@a(*g`WlTaY$A:Nn+QK+j24;CC'/_SFc%lf1NsSZ0gS1D^pSkA'Coqa(bbW"$.YGhLHu?%,_:Fnnb(P'EY\8]\dJgEkqIDJA+!GFIBjmU%<<H)Ko_W:`kco1mcHU\`Ug2"*97%)`c,Q2=EB8S)7@B;Y*Z4]1Wgh][QLj+Y+q=H)Ko_V3qX(hC*))QOddMZkorhrZ"?=T]3ees0s:EjPjT>*kCaDQOb`!eb^0'Ze!=X%Z&d$sO/j:$VnsO7,NgBNdpA^A]j[Aun=QaSU_Ap:%nBBc/GS@tnT0KR15pI\O9TLeI]n.Xa"[J?@#pEP:>IqTar_,_h,-;``\M?0%OB=\K'X5iM)[0F]YVQC-r]s!53m2_cW`%<J1$772TO7$##b.&jN89IX/l9dJ&aHq]^h&9Z#FGF,?$"/2rqBU<o)lVk]7sIkSijKN%h4sE:h0loJ>^BDMY4!=L=o5Y6dqq!-2?0GdeS.-12V\3$C:Up)]",TE4'Ts!kI+N"NarZt]G[Toi>;7YbNkE84!!dr`GYA'0iEk[%lL!EYq<sf4+,:rif9b73eZ61!\\C"Mqn-4'g"P6YG""nbb9cfgc?"JFlY!I!YW%"$VS;_e?*;/K1bcrKTTurE[FD/!TJu!`3bM3c%k4a2F,m%=lRDE`j4D0e^&2qbC[23%]$PuH_lclQWG"d8[o>[Eod`f=<IrT7PcYXXR"jY4"r,$fXh9Rmc!It"=I_G:A7u^\=]8bOu%T9kTrF5q:T>8j?eTU>1sk*D6$+W?\1C:6bkiZMJgXI.Ud\'(jVs0KS'%bcg8FbRo]H@,@;aCJ$aEpu$#5G1qBrsV[4rKGG\puf7(%IS/!$h'ARPB>&]kq?Jr@IsulkV^PcAB^?RL5=EhL:>'S3DUhOfF7E3-^pG1a?LIiV5C?Sk#A^gBU97ls>%9PI%G2Kmdu+.Rdjd,+%%n`.;@)S+c4h$/Xb6Mpj)`QYe<8SdaGa"UE"&f=eXscnjM%LA9o6<q)Z,.G;geI.u,K'GSY0kl`U48&<)dg;t;D.>f<=_kI:dtE&%3JG$%Xt$f+Wpim<_Fl!E`GD*jCbH#$hqu+Vk:^t@j@7Y`M9o68(I$hr&:1F44f7lgB&"-hO_Hrse`krVV6a6/GO<WRYjPfQcL]Ml%nE"aa;"*LIY\'0?n0923F5crg5q`,B7P*]QhAbOIT/h%`>@7(5:A.nO,GD8W[E_J9\*'sP781A)]hlI=,^e_qHZ^eG*.'a=YSM]S%m;FND%T`==FN!pt5=_?T^?d[0LtV.ue#.]f$]:a%ba4;gR<8SZ0jchj(,uojQnKDr;`UFkba4=:35:tV.IA$(&`Y%<Rc:O<Ol1Mq%rS:=/Ze>5CnA^j/(#9hXn..@NL:_O'o0(X?ERLDa\6H64f#dO,h+!sS\D*tZHK@up43\"s<lFIf:/B,N]\JCTY,&W5V@iPoP(sX*%jjf5Gqs(3_)W0+$OoUOO+;b_aKu:'>f+scBd^aVYO#U9.SrMdRQlFM@Z.'83)7_XV]c!..*Q:03'KN'onFG[=ZHT_%0,=(!H/0Yk%4,ON:>\Sq:&UEiO:A9,)6Y1uHKu-D3T!b#Wp\4/@NJqo3#4=4&D+&NjNEFQ@C$6TPYFXf;#bt[9+Z3mB0b<<]o'fDsBEp&%*RMM7%mUB/q>UY`R'n3FrR"ITPE^;Hcf$I<`amDr"*mTLaZLB%1oiPm?ABtf'$0Pk2`@RM;:n5hMS$<3fO`o8DD+\[2eZkXmUT%uoJY37f%rN=1.'ZaZ#7c2MC[^htl^:p/AD/6Ft/:BTegX\h39Ae%H[R5PtGkuTt[LF3g,5QJs[On9*`mqQi[I)Cqo^.$CS*^([khE\WD:Z@e%$Wc*%^U]lt>4;0oFZP)3Ot9A#6k_OnnB]91m$^(u2bt/d1"8q[*5>Ngrb`p\gKWUm[%DDhQFQ[%8a1hGd,%K&M=\)Gg<B(B3NT7T%(]=]m>ORn[Q\\jJ04/S2:C@T?hO]3Vi&&@s]S2,Yrq9%Lnn[*6k*Y7ZbdBB&)Q`pIrs<)&/,UH1j3-+[l&"6".fC,XL3LA@q;Yo^%2W9ig@Q>^h!d!o-Q5I5Ho0-6-\Ji*Z^Xl)]^aRkpN9fm)XmYL(c--1K[+TqX_?S<Y7e?&^?*""]m$<Scrssb^i1F=P2GCl%3Y))*%6"oY_1gd<@27mF0Tj.\+IU-7Jp:'H/rVK@%hYk(!MP,mFg=cI+H*tlN?:3IKja!4&]8"o+dfMRtY$m(:-!"?-s'>O)#%)j0=c<BS%$]lV.+00WCNsGIW$3$FnF&6=TNptl^n;m>5QeuATiqcFG+(`'3=T3Wcb.$$j8]eECMJ'Ojfs9B?Z]4ON"u9K^a=5m=>@@5;b6TTA%ZHTT`5C&Q5KoebQE%AZ#6!>SlX#PjsL*/.Jpo\+]4Y)%"]hsq(RK`QP=s:tl.Yco,A_F9S!Xd_U/4Ps*Cm<HA,cF^@CQK[H9\!tc%O^g>5ph?"2?n_NLIh=V%idN?qI=PY+8cZWDc[NhC9G?q$0\\=$PsH^Hmg*-VH%8-.X9<,86Q'4L[L>*J!<0W'i7iD\!X&]BgL+V!%o$*&1RTA(KDcJ>-k,u^Bi('q]_a848@_n5$T7BoMa%)pL.QssDA%<#&[iIjWF3=c/.u";D-jX;0WOOXL![/?HM@fu'#d\A5Vse;I%,K+[50:Y9P"]$,!^^O<k!#@iD#;Krr:;uiWptCBm,@c$&QiSn]-(&W)^b:3@4Ne3?@_8l?QR0PiY(8[e5]4"@]5I[!%*O/9)"835%l`Ur<4;Tpo[_VGO0L*@5D7KA3>Hs::TWc/6Gb.JLhfMS+jAuEFH3=OJ#P]Tt-(-B/m_CSd;O\tr!A_lLAmiEWQ]nKG$eB/M)k[55%a"T"jXFo(0T9pD>!`7)B)nn1<Bo$P<jT^H6o7AQ6!KT/*QfGlS2>Ybq4<%\<X3cRBJ4pB()?FE=0W<+O6c/u*J?eA&RIHsf(bd'g%.\6[I`\nT[Ad+p$7YqoF!9UE!Wq^ObBn`^NND-!-_rhS#9`W%XQgatojrqPCDB7@;QmTWX==_3=c[[YN^-M%TaO)hH"h"`(!f/#B%6'+SRjR\)/r/0N$QT"hpl\Hdl_2kN-/,4h=!iHI)U;D:*!-BHC>RP`-o'M<O)Ft'UKt0`P3%Y5m]&EHoBK0jpmG["Z4@$$0RppZY%dt#SlEo9#i)R+T+`,OXJ&inXl+_-<t"&;M)kY0]q^kQ\[JEaS(mh*K^@J[4=%\?qG,6#LLL<"7a,!A&d0Uh)iF2J*/jEmDpJ/ku$%GMif<;7'=X/Jo%c@_rDT31tU;:'Y["miqsIl/CUV,SU@sEYfS<%W$b'^i`pNPQMK:$-2(ZA(e3nX.2T@V*MOB&.Zd^0EX<8TFq_^%SRLHKL?f)O9nincbV3JeSnSah#ge*3j4O!Bh_T6G%9O80OABY%^ql+.!Qlqp)"9?@NF4.7i'R^Y`^>=EXT1Efl@tk,iIJpQRZmo0%W,,R$!t9GlOH<sSL_Q@+m#T$p'@9`>\JSR(mR,pEJ/6bW'98"nB`k45B*/F[nUP[!*mhQP4<:BE1?$m`>ll:e6&,PU!=oQWg.4M[%#Eqo;LE+Dn!(F+_4;`W^d_q7+!f[6)5ah]DFC>-!dniOE/@Kq$,\5R:G90V4bBAHo)(:i&Q96h98\o?MYS532SraeOXFZi0$mWhJ%OO[hsi*+bA<b'R5nMU=]4)"n>$.D=_"LpeDo10:Vo)e+eGQ]]h*uV6'R90I+""*84I%VmN33ZUH,M2"s$7$+ZI)e]jjNp0pAc`O*%3%XR0]QSjc+e!6FN+"4AAdrV89\>q&3_Y&/%fqu1dua\d6JioLZZmG@-h=N^^Z[JG+(>?K1L5bD4HLQh!PI(+5bX/J4%on8+;Tj*%3t-,k!1O6jLft"A+5l9*RmIhs2Apfdln_a%c3`.*"1B8D)Rtq2QpHl@i.rQ%>h^J\"@NgH)FT&d0Fi+t/e`(<cSu>.1A3@R3H6&b%G>Wu`D@rGrQk5!`351GqCN.Q-qe5$K%$6QYP60[KGVVAc#8jEeYRi*-.XF(E%Ees8J52=0ditf#.%fJNGpH!5+"5j[`PV$FH/f2u%aT+QA=%KG'C2aTLRr?b)nJUV`^nhGUQkMdpN]%H'ciaSpJGB84;20A3T4(>W&3qO,I_Z"&iX$1b_CiVL@7#q#GG`D`L]ul%4!74Z%#(QgNfGDo!lP"&hP7mp&_GPm@4Z\09Tbi_.S2=Df!d?N_(N?/jdj/K*6jeeor0S)p+=m&W+Yk,UH(#0nQD&C*N<"Zi6c'QB,&..h%B*P$F=roR,;?B&'cOln=VEsR0!D<T9!^AD8n5A-J"V(8ca9#HSW'CdeP\$W$j,f"H)@s+ib@,dXL;Qe$aCX9=J/[LETI*gK6==PM%>S1n?K8><CDPQh,4?tEh32oL9h6f4SO=.pud!:>o5Y'Ig36'ueOOaM(^i><R!d0u_cc,(109&M?aF]qk!&:F/_Yah,UEJ\Ng^M^+%J_D]?gRsA<[WAQIK39V08^QJfJaFZj3=h_2-k'c#8/2hBk#hOc+1[FOLV`f*EIjnpr[FMt5gC&E!H7O"R(KS)0b^7&6spL>7<2hE%jB>EQ?9CTfQo<*"5Cs*pEQd>Meo:f?`t66eDi2D*1jnds19l@RJgQE0N/?$d4(SI<"FJ&t+eYXa.#M8:De3l.*.'Vm^_fCoD:g1-%<`aZ\+jhEr%mV/0.DVX3,92ERC]ZFF9TYfO#Vu`^87$j;'8+!W`i83tJdEob*M<t+&0)@nO7,SB!PUh?;,<imqZQF`98j[KF_9>.%0j]93No8tZ#l$Xa1>Jo)IV;qSJfZ:ldK*)cmM28N!4fRU+b'KHM\'8u*^N%H3<V'blr-5YJfsn-o/2p"+:f_88gc#0#SBcrW[`H#%*5E^A#j2SI(A.SC%!KUHm>?N#X-J3\EagYh-OB:j4OQMZm(:)f4(&VtMQ/<sW=/l3(+pM%@h<AXUd=4M;.GTm$7#ar;&^Y!M<.5&%!GT+O1i$:q.N4*oQ]P[O4G>@P;;j6^.)PM9S3`(=>iZbn2&:$9XOKO?:I9#LT]=adhT/H6jMZejcesU5O(JV+JW`n*)/*2WW3(]t%C4aG/8rFQRn2'\;TGjY1Tt8?.8*_V/3])kUneS;=:+@0An:Lh;R$J3Ym9+hh^d6]^550GoUXqo;#u1U;>!%Cnq1EA3>Ce,[]+Oai%gZ#j(E-sV',]ZWb3g`S(,#scX#VHpum,7XOd,:D2cs<Cb_,;9!eN8XAY+bQYiS&_!:Vo7b44#bY<k50Z!7q:X%SU_$;;Tu\);0'a%LpmEk-th='o3F<a-J/F9E]Ai*-'=#mX\8uQ+mr?\/h.!TL_hEUjWe.J`>?RiB-S4H.=`*e63p6c1dP6?Tsk)KmQ1:,K2Us#P=nr0%5\_N6Q"q!;6Ka6pEe.g,GW^E,=RqF0%O9LKE]d9Ui&lPB:lp@4cunLb7D\IW\gI3X"6piZH4grn#cSC=Znjq`>!00!bUC(hPJS(F%*fsUEW]X]s`F,iYEus\"MC#LO*'2M+)JK4\gZ5fNP[Zg3S03X/3lE;sK4-8@'iJ,.^DK^Uj9N7FGP,(Zj'3cmKV:;a0VU`20V<+g%!GM'E5ZA4);VqIqTG9Ludn3`#@(trGI`oNQKJ.0^O6\0,aI27W$3CY<b6hJu6`lK+@XqAl1Qf'lk,i;&>u6RVL%P@7FRiLhTj+Ik%"*Oe=7JJnsJSBY_m72C-bhaXYXD3G!4-]2B:ZrQ_U=Sgl0S>cue/JT_1c%BS+)+O@$,D13#&]*`^p67GE:m6Qf[n'\D=1iJR@C)>%L0>0u*e_+aJd7PF`e^A9KBn=RcsaiKIA15j*!/WTY;@"-81-p[$8`.BjLpc'JO>6j@,Si,`>h-A[R4/VG!a8tcuOQ(cR[r-4i1Tt%fK\_hl17ps#c;W_#GX+k1%^b='o]N$7tQjBJ/Fi2('tgeckBamK;ARdiS']O1uLH'[HL31>+mTLL]Z0r^GnR$WK/To4G!8FZ`/#Q%amnp&rAK5O-fs%FP(MXTL]#$)Ebu%U8Xu[)Z@1pME8O8j:/-g*W$O-+P!M@(%\n^rk[aBIb]V;QA&.a>Z#nG`CDPX.J8lV@+pSu)%I7MR.b96OOMa6K7,DS7)e\KT@%&TR&_P,tsr)DT@`U9[*Gfel`Ak5Z>L>HC#ZV1`I7C[AGd^1$X(#[4dF>@n1hunR5lJ+;r:fnqX%rP7%'GCshBD4,]#&/.HpQ;HTR_Gtu_E,t;tegD;;!;^l@6ps>R%XksD-`0=E,?[Nm7uIE:oj#d28Z,#`d(CHo$+(tg>m#n(#n7@^%GOdj0Oa&p_5nia)bL]t/5T>_(8ctTn,7GF4U'hQ:Z&g0<LRqGs4cXXJL\i*B0L/LD$0$ft99<+)HF?Ki*K+(3`J-(uoKr7Y,EQQB%J8;F6_<W@+irS3;jJ1jOJ]n4Eg'o2b4:n;'B`tNoG:fpA]_UJ)%`:$=VU*WHi^V,lbJ:f(Ae\iK@Sq067L5A!LXGJrP!3`FJ<:0U%K`r54&YV#=U-Pb:6bNOS'`B/YFmT;"a@sn@A1QF:bN31C.,6!PV[fDBn]uU?NEC#=%12D*FHt4$!F7)l52M[$"5T^]7dlj[RcH5u%3s9RcRcs^UOo5.h!(0u+^KjoV"#D=U6.QI#6%UfO'0'D2X?-4%k)M"R>ulKY)@OiC)0!Iq[`>8maJG[Tn/]++%+j*8_:f!"Y]rA&%!aH%Ei'L@Zd-:TK*((uK!CLP2HX=KBjJ1&U`[d[3+0tsn"?IA?e'fF!G@7)0&Ab*+JS`EX=?j9A`L:)DdmP&#?&0se>]EY$$IC4R%fagpHQB2;Fe+]D(/)ZH+0eBu3,OZ[W?RC!i\g@d8j;r+6mi[AGb/IdX-_!]9TQ6kON0@oh7c&9a86G(B+;0s^,eDgI`%Z:uP:g#i%=+fIC%,$ie]n-fV$Y/F-5praN3Y<q^]-ir9%^X"Hp5qe!mM1=.ne_]-$@Z]VVWLRWaOBAV\pFSs7'9(_'s^r^%,EFe/d!uSd(NmK%J.WQ>"bDmN7^ikK`PKu_CLTrDm/hX"\ZW'(H57?_`8m/^LNauOj_:#B3]fJlf@"&n&oC>1#??L"6Gs'Y6P!UsBm?)?LL#IKk(\U3%%S%"9A\t.-SY)h,d)1\rk5'BS:e`NU7A<PI>d.2Ud/bka/7n*Lr.6C(9g/Cq(l`.G+``OW[N`p2k3LCe>1a0rgXOn7/R8'CKrIQj%$[bl3p(54aOkM^gK8V9tII!`I1,S>KoF2I`e7"/4>IX8:j;<HC8U$Q)kNEs[>Z/@b1NMuH;LG?e57r`o/Z<L!,[+^/*q1K<14Blc%Ca4&cU-=AU,RJQ/K.Z@%J?GV?]F#c=9gTcRK1q4`Ck]kQH=KeKoKDOIPQ]1fG9WVQ0e<U:D8rcGkfOr(!V1%_K4""s<<p)9;O`?t%B5mbga3e,eYj3Y9c8X)qKS>6J;S94]oc@=WPr&b+Zfh=,AmcGb?4ZPe"aGl9@9`ul4ekZ2<,2eSOS@W(n5`#d_K0:^UkK\r2J=*:%iQR2d)$\tA?Qgj3,)S]8!kMBNR:jtWpf\qrceLg56u*O1_W10b%*qB"0LM%a?U245h&[lO=S"0IgSAHZP1_'M)tJ72iaE<L6WYjY%GVJ%a=r1I#U7^-`1L<Bdj;TI^9ksoqb"'Pep124`CQPaT2f[,f;sr;n1N&lnNL)HBAT0W?_NOufnTJ`h%birohG%I!as-mKfuCX5%qSdSn=uOAQ\9q*[FWu#iKgRSt@NZ`-qDUctR!jME,&ChJMdP!Hl8E/kaPlVM+Bp/o>j,2slkejl[=A6q^^P4rJW:lWC%0s;GH\:e%7YoIj[-B*F]\&p%6+\i?Xpr9p5cl3MI_\rC]YFq<$<&&aM(Z/"d$]e'4.pg7O8BF6#Kjs*,_UN55sqpM<d945]d$$lk\rM'#'3Ql%-uaVp/Y%DA@s&tLnt52'7Fg;Iqa]n+rfqF0"tHZSA>0P`?A>5_Efed&=6g/14)&E_9EAbR<NA#.a5IXj!^d@4iR&NROn7lB3;%//%``IgEbZ5jHHOU23[o"6b+;*+?n>ZZY3L?\*">V.Eoo'H6Ldb7[cl8Z80mQ8AC>t%r&_dG_MRg1JO+;Ue9ZR_!Cjn5Sp>f`A5\)\^%h3*fT#fDg!EH;Nn_BT?BEms,01W=![q8c=O#utJ@^*UFhg)9Ud35`R''CtuLVM$RA(.;:A3lU@_/8PL@$^i^t?6&T@HU-dI/eoVZ%!g?m,5,pK1jnPd`[g9to_2K(#mW$8Y&Rn^Wi/f<F+9Y7AH3drrY%?h!n4)!gU;K=tHud3"QQ35CH^rPnN6WZ!kWYGQlVWn>CRBl`%WdXCH^9@D$;>:OJ.123T33Ak"MqljKa,-8OB]13qOf6)[2LKs,m%H3$3)Q%fCfeXOFa]0U!FentA43iG,`hQ,?XAC%E<*aSTSkn^%"r9mi4D^(4$VqlkmcOe'i;$Ud'B;SI2hm`^p_5FSgc@&+Tc!KWl97O>KCPTfo$VOXY"LJn"r\"#H_;aYT+nm#ZcM/78n&>u)Dm5"%,?qQ2;3c4qSkNQhCZ>GSl\B4UkYJ'+8i?4YqJcD1n+4mJSb8bug*,]!E[2'[,jRpT_8/$=-T'5CB&2Cm_.toF/G+H1#--u4o-P<R%h3-s\QS-8S9"p8`HJfo3KR;b)S#4KkdDsKH(!4,k]MNgs#ku?N"+A>%1q[2eU*+Q%3&(hLs*bsKP?T('ZpX@d"S9u3Ur+n)al_I^%rRg2\G$I[%ICO+]pC5Fn\fN:e:i#0KZ\I8b,p0+=NW9Z8CD-5.a.h\KqMLI5U$WR-+?>RPYT+\fN,e@u7h%Uc2I:'DiU.;2S.Xtl%oI.]b]uUtCAkO!8/9CP.Z:4ERT^p827-ao,`%fUE,6JXU5uY!a?tcZMXgZOXGK;7*:0lP;#'tY!:07q<XH*MUkrOIm4BNS/H:SN<%J]!=4!"ImsB7\V>*O)\VC]0>*3oJfHpUOqlj[#-,RUMirH=1Rs6k\2m3\=VjWoN&qaBPjU&f2:iFi\rMf!H]U3'<Q;@GKsq-d!^\%[GaXk%ZV6,ctGQ:XqQ[R>V:5(KE@:+_AKAT[:16^4DkmYN:At5_[qPA\Z,B5(gZi-=H,$&OSMGV/W>kq\q(]"s2aFu&C9@<-tGQQ%Ha-3cN/A"i$:h9\`g/_"N0uk"\;s,dP<!l2JQdnE98tf603HRJ>tfsS:`Tk4:mF:Q/.XWGbmB%(Y.0RJs)BD=^Wr!ogd2er',lE5%pGf3u/#4Q4<D`k%,S8sV(9EJVjI4WD&E[5jMQJ[=FM#oU;CI)JYWfTd)MKp:E`1,n96X40#Z6gq+/_fIKo?<+*Xp)LYUf?edm]41%KjiHk"HhgX6@e#!\fQK1FE*,)#h:^?^-X:,ESkGJ6R;_Fi1d8%Ca7sBjf'B8&u":O,'WW$M#7ku<o]"T6_Nth,YDQ*,NtrB&5!u)%(pus0!uN.OiK`UKj_gLmaE*d=Pq_VR`6_k3JEno]&0$3m@d%Zgqb?>K+pp,3&c`DF`I[g8FdX,&=^2P/!G_mK0!8d^EL;_L:gJAm%<i`j'Oi2,)<$=iOh9H^dUgVum9*mnQ!6'*c\(!7%N+,'G+M?1=[fR2_Gh\%Eb`OM4]T'ltJ^\!:L.L6NSOmfl#W!=nM$0nL0J7#2%0Birols,?/3J.N]p^F_ue0aH)[73Fg>j21DJ-Q>F;V%+WE_=Iu`&%lsb*!cUBbGQP4#n>1Mb%!Vl\+4k;AQs@:1.i-P>&KbON".I%bDA%_\.^k:ZAG!)Na(SOJK#3,@,<Wa2)X@VTi4PX!kA;bM*rNBEQ`d]@4P/\*@K3[U+j3pM9&g.TsK,BPHukGh$:A86=!Z'o4`fB%;?[J%DhWb,Jq7l,lX@YtksY_,^cYD'!XV/NnSZ(&4K`X'EuL5T`C59jUWHK*!2VCQH7N3),:bd4Oj+:D%Sb7.UeK[&aB8q,ZV<5"%B5r"&I$/Lc+g+YW\XZB1?qelB9O,>HCsFt-:l)!g@lTY$_mgVGL+[Zm82]63`28<)4Q`EC5_NU)<iASMRMq4umWf2jGRQ8RdnFCP%R"3,,-jXP01F$P^PH%dh6t&W[b"a&d%Z%t))\QmJ:7kX=&pTcP5oPM*(4AmOZ$!=-&Uf4IBNi&EWFA=bMarugNib%@*u]dJga[bX%E1S*k7Pk6r:P1qTJXdqg@;t1U`\2T>OFdSaA`-46fc4H=((^$r>f-gj0LlQCZL&dgMBZpDiYjpZLscJ>@WS])YuKqn-Drs%NGAZl%CDpBF@IkrCL22S"'HngC2CSp+.H!CMYa+ZWpf`@,L]ALSc9uCiIccPm/.FE!7du-+<eKp]EK+9YH&\VG'ZSBu9_PeAPQIcK:hDA\%frfj]I1F"#Pc5CK7JB^;kC?&le(oYs0+K]k1,/&+Ad'g=oa/U-cT++\#9f\X<NcBY(H>mFJVcb+,&%%*?$K;(SboQ?e7`'Z>$1=s%d\(:\qbY'VBuUjAKZj='N2OnHV2RuILBqt3`&"5'T8BK\L?a?7m2TP"o6[29Xk46r*f>ZhH(1,?R2Z;\,/g2u!b<UU/Mq-`P[YFM%4cH)0oI7.]-p![VD)`[AB5,^eK@\*V1&\$q1IKC2QQB=Pbi38[`+Tr=$ui0X`8[p_IN)$W7VO%LI!!1EkhdAdStc:mTqjq/&\?5j%Y!a)%-M*9H11*"D8V3??=#E[_7R]8+/,:[+1&-,:T=`]LbNAMhE7X"X[bLr)iVOoRek!R8Q6m7`\&!"M1jY*ZD(',^/rS]%*,<jQ%pESL!;+MthjYNK(Cgt$lMo0q(7YW"6M_L&2o*>bW*RH6ef+AiB_GaIu1/3OlJN,Te-mC9YFC,+c@LP`S5Pctgfsk^QkV*kYVp-Nm%?9Rf[@gOm[.H!eUO5,GMDBOn6+>";r1Z15P'GV:k7R/mIFKuUV6+7I@`ic^Ao]3rFCJ^=NL#,dfQuEr"A3(o:'\.(C2NY3gk\)J;%K4!4aghPB^:%T-,Sap7Mjh=6(o!Rs[.C*_[Maopr8+T[;7_g[DE>l&H1PG8^gR.LE[^%W-.FOE><bOHrK;ZQh2THoM>VV"goK4sZ%kQ6obIPCR`62:*[0FnVI.fm6.H]"pWk)8pe:6Uj,1&HmL>Z3g:*Zk^+9,$5+S7GmcM3L86o'e!S>"&KZ^ltS9IuI-HPB0/bUdNrN%F"&M)LSt:1G;o]JeKNS1=7J!;6YhCt65C)2E`(dRAJR=ekAYd"&dl\ca#G3K*[p:o6YXnD,s;7KUXOc*#HaR%XVgD(T"7Y1#@*n]%U,)cY8!,OcRj)aj6@%(RjcOP92OfX!LU]J)q%b7];fiPB\7:1'Iad7sb*9#UPAA$GlL@LNMoUTVPcYXURi8kC[D]>L;/--fhillR%O`B$_`D6jK,((4-DbVno?U6Z'8c.+C\J80c.2uP'#]NU?`<FGcA%Yo0[@3-*s'+72lq2:C=83*u*I8qq18&VBR7nroUW+-)E+'\&%)tqQjPT-%lqFX4MZJi9:SaQ]2lB[`!]=uZD-BhsEj6+A>FVPN9gS'$F`0MJLG$R_G\hI(C^)ttHE"tBGUeoA8npDs$6`igVT&hA\%8ik@_ZYVB(9i&NoO3P3khsTAjZ0Pd1_?^\OE]K%-a,cTAA1u#/%'3_ZkMJ&Q6L;1]rRR]P<0E75aPDhQUp:AeRa3kLFDc0"CpkL+%l&%"sq*gHC*TWh1gT/XNH"G`E[%ClVfhLb,=KnhGLAHV48oDp!WRQF+\cc?oN,%-,$a:`E&YO*@OT<t9drL`:WKN5Jc<;-9_g3\-%ePnR--u1T+KJ:gYGG:jaaHN6A*F8BI469]7G#EVLmV+!!r.3^V?$^=A*@fdN2n.)Z_Plg&Ka7N^k,#r=e-6A=@ckO"?2N&B[L&!p%Z#sSBa?V@JLh%bO[!_qFJVWZ.cT!i!gY43g!?06_#L$6%IQB_e72kf=%`taKZTtoaAqKq*$k.IlYVH1=9\8\FJni'cr%8]`56GjD%+%dkCH*(p_4aU<JT,7=-c!^8,r5`)t+3>Ws3qc,Z$U<#R)I\$=qPj15^%4d1X((ZsKoa:=g]DG9Bt`PCXql7ei+;-f4.#t:A>WeG%&JmsNG8^0p=d+`ei*],CCdM>\SW;lN&[b[`U;eVZZgp=KDmZGMYOCQm!r_>%.Iq:rnqkUd:6edc%hC^<4>*Bh9JNo5q!EE"W=c'E%n:.]A2/LRPo`J*2r65JB*pq0H47Keq(!WlU#p^<SFb3IS;d/i[cMbDFW`([.GIm)#QSo;S(1CY`H@MqiJ\JT$IFm4Y4tPjZOdf;E%Ms=7l)s("@WqVD<(90/hW*Z>rbg7Mt<H/@;NR'<umB%>3<h*<h6NdIgifoB5q`60XhS#JY]<&Co"8\ajqB_EeXm?0S3>AA\0<]!8%RuIAaDfQ.^(_oF3Fr;A&gGZ>7G->;C?*5IBWa'YJl<0OZ-sW$HfW*Lf&Bj&eR\onFhTSKc'2$Zd>.YrHUQkl$YB-=<UN@?-O7DjN%9eA"prF%9%iN;]`bH,9QO\4[uG_MmMX"\h-"=*dqK-VbmFS..4Yb#)K2InJ^W[_oY9/=<2rbm/@*=Lp_ih<l5^a@gCN`F.R&U-?r%s)Hn*7=MQn]"&/IS1mNpmjg#f+o5IkB]jP>\)NO^oFA.>3b%0kKQC)Q;ihc?QSm(+H9%+kcJe:;\gYK@TND3C?"1Gq:kkg330KN?%W75#+HW#9fGb=Uf+OC>TVS#E,&d(o%$411'A5XsAY=X:N""OFHodXPadD;haBrXI"TTY7nhBWDF9RpsN..qcQVd(j5PV^":"qpgc%jepl(l&qO(/$?ReXbsA`P3i2&,oKc?4BT?JY+/R4n(<5<i\32l1AkC%/1tcmL&2RKdKkB_%#JE6`2]/)Roc'8V4o9HHTrnHMl1tJ%<mV3&<;^,J$:MX%pc?pt(Jigh:"Z+IP+Ma:FW'b>'gpDs+3H]=!p>mcZdpYI.ha&S*^f&Rod\VhYqr$Gmp_97L19=qJenbd$]\#J%0W-sF/uWqrAZA][r[mg@,3CrZ:!;?*OTd!KfL]@h,L0_!F0lRtc44#`FU_P4^mn+$GV43Io3LTljuS2R0$GjYLK1dNkY@>+SI%"X%>)nTV$ge]-dOQr:l`LO[l!?rdRk?F]GN[JFXTE?+:TDNHC9Z-b!]QcC-]p=S_mjf-b4JkK%ekt9IsG4Y'q0Og:<dE%?i(R@Bq[Sf%3AaW7/>\(n#DGe4[S%SLM%q)6j?7/M""f9R6@DHKbOpKBd[C9PrrZG^S[+s+VBmjiXt.W!/&9=H5eGtQ$Aj$jnE6-==*Q'$LEf4V%oXZh0,c2d"f"_j1^,*)"1hDHC#Je>sZ!YjH7''R;:emiHZ*Z>#Y?p@$V)#lj*Bda7Q*SKL^GBCRaND4]Y.;ip'10*<c)$6&F/n=!%:!I_9pZ\g(\;+6m8E/mj=\J!GWF1D`<!>0EVG_^YC4:1lT?\q8FCjttOSC#Yp3'3g#,F-j>\SVbm!]CHO@`^b#&Vr\YdmV-N^O`j%8IQ"jK35=84sPXpJ6eu$J?>XD>cH8iZFeG09Sqe5rpE6+7CiWo<'N"KIiA"&-Z[^#HJ'2HYh9V?rbaMe)9=)X6ebN?aK9<)8rRZF%caG_E0JhmgUJkN`PfoS'Kgqd0A.=c%+dORU2X=<e8pCp'kRnQ.>i]cl.n0Eh[*fj]5ur]Yb#*n2r]jF6TB*1uSm;>5<=u]E%mV)7%#s1,7L1X9#2,^YaIAj<,jP"E<D"2W8;g8pJX;(1m5.ks8DSN(8Kdip')8cQ!LT!'DP#2PQ0];@g:%.njH>a["";6gJU7DiH+mSI!%@S64eTgp7_I2Uo)0G`i`"ic,Nq`/:.@,T-gl;RbF:aQC\fM@MI@6AM^X'Vub^Z#J9"Yu-/)J"f3jVHPJB3)?=5cKjQYSS).I57n:%La0bKP&srk`CtaH\tsgI*!s99p9g14A1`6X#6G*p@uKA?Z'GpHe%C;&'ftOUR"e&q/jcI8F[48=aAoYRY,bIBdfM+Jhjif1$t!Y<%d\l92n7-_W6%9\3$lLLWY/QL`QDPG(UpF$<SZ:TJ"?3]T7+TsqMnoC5U$?qP@>jSqd:8U0UbE"J'a0/7lETN7&$X<UMO_#TH474e%gUEl*'LL!FQDpT8P%/;)WlH5,\E^*8T]as/NS'[-=B7lAm)]Z!#-Ra\kR%bf8.16je711&J7k:PC8?Tq*n.o'c.A]1#R?NN)gY2m%"6DB3=GD5_\#H+o_I+c-74'E?orh#h4^s+NO]`=ZA8!_fFn!#:ab\stTsh&E=IXsI':K>dU@1I54g3`^X::-6=MgeHEl9?I#/@7'%*L9VTNZ)7J<,+0BS+;[bEM2b]g:=Z':I)>'T[VD-4ILUE>sm2E[_47kKS!0V_6-Zq[.QFo\H@?9<im,tVa(4,b=o/*('.[:2k'8g%YU5%L6/d_IA8l+>K?4aj'[*0S@dSetL+/#jbFkHFOPhdsQigGf2J7Z_(QjSpYj3*f!bo'Lg/T]bn&Bo5Tegn0;(5d*iI)i'Cko(W%K$TG\?`.I8*3\WJg]q1M!TmAXW'YN7dYJJeX_J!OW,;Z%48eM+Ps0_shJchG)uD;$Nc@28IcbGODVg7^_3(o$c=+'qBOS.AW\/SL%'cWeGHoBK@k(1@-cT)/_nbUY2:s2M41NHgXW+G&:%B/`AF]K&s%#TROJ8kDP5*Z\Q_NU#*Y%1uFT/P8)16]oOo.b<ia?mon6\GFF%$`t]]cnqm.!;tOs"s:aX['[CT,dAtsVo,@Ij*CW0(l*;O_Sl>'$J<%BE6p<$eu$C4mu-E/Cj#DZNfMu1hDdJ_MR=&2b(^EG*ptSe%QGWRoRisdc?WG_TA_rTDm6=#.I.R=;Jc(q&)D65cIWZb-_Ya8.^l*h&>PFD3\$r_X?q&:Y.qIK^,PWnnRl/uQ)piE*$\[&$\Yum*%cK.9b$F@j2;%-q1\FIR8'S+6aKG??^Bd72874BAd1dO+%:,+POq]_3=fo55&!oLWq.>jE](=re?<im0)T6tglR2;0gjT,@06GmKV%'kH=r#_CkK0[aVZY,GM?kEESUl8^H+)]RNCf'<`H*AR*'^S+uNp<_<@iX\(K>?gKc;YPulmTjiI]C3ZBU(i3h[1$n4[7YX.%&,&!%eX?V3]=_qkJb@HLJ;04*gI%):j:J&AY'i.J"LMGWZ5c%hKr@bq=(tXSl/3D'.MWPkZb+RfVEHrt!E+#X,O7`A8sQFWrq4.pJaT2;%G?N'@nbg7?3Ep4@77U*B5(.UOs0j>\U<7)*%7QNNcNH=dp#>rZ3Mp(\:q/S4?8%pSZW20#M'Pigm5]3d2,O+?ppu6pY#mt6I_kTW%*A+>oMsX\IKZba%Z'H_;3:=+'89hN<ip;aV,*#P3UZJ*(q"Bg5$CLU-+38([IPkVsaS`&:-;%`<1W!bJ0HTCuL-NaAmG605O@8oL%j.T38D\,c;8O1cW;+\mrBMWhH]c3pK..cC\UQXE[6H#fm--7TurpK;GV.Mi[)3rDW61<FR9$+?OQ5Pru@RstQW$H()Rq-SF7k`"e%A\0Ba(Vf6\6.V:Nh@H@F=%Th)LCg]]L0IXZ'YLqUjIbu]*24>T>C3k[9)#[uaOsu7nde^@i`6B\U73Bn<[()jQgiAn^rP]<.,)*o%KSLr^l/nGjWm\f&6SXl@=is0].UgkfebKh7$Cru!Jjt'9L_"'Q,f2XJ?R:kp[P%h"clM[6MhraSG0[JJ.S%4"pf6gb[l$>P_PfoI%4cUj4"!dML\#R@]'[pJ',t;5#br>3Y?m92-&ONT`'n8HZ<#Q>$QGo[ukdm9uFfA>5ZQDhZ#RPb-iDMh@?0IQ'He7,(qq_/LpilAt%pKU<Tb-PF3?,tLXh_4H4rMT,@s.'OD[!Gtas#U2Z^/gsCDAKpN0TLHtrU8V02qsmapP=e]rG[6Nct[XV8[>VlRC"8_MU8agUNd&#%.e,h^6GPs9@j+j2:`.tXhK>>j,oHGH30)+`BO*@d%NV[DSM%uoqiYk^UZ=`L9ZC9LE76/go$;&M-opp:L*o@B`9/Ht63?ebU>De&%-mFVi>#^.o1qE#pZ/Wj`?R[C^!mj]-&*Co0^BV?83TMNA*"Y/kQh*&Wc&b>]buq3WeR=asf8Nuf]WiD@h^%qQ_&%!Mnf/>a.+Sd1%78U`^Gda(/HpKp6a!HIS0$l*-s2eoX4LpnWj3Ys9/[c)NV&itQ(HK^<UerMj6ih_`$$kJ2WahriWhq":M._ZkdA>A^XHJT7B`bA!%NHEC`9T5uZC=,&KIaCZ;(f18]iO&:MIAnid]hr8RJ?:WE8##Qf]-YsXAK[q%/;h^0)b"4rl=qe%2[UC](^mSKGN4`>='>;XP`/"k%me-'PWBu3]g<$0p)F3Ria5(;:)C?mcTYT*q"9gH8;1;+[&6Ls0'YCp*b1Na55*=(&SIb>a>p5Hq!KoGLNC?P^IXs*s+A6]T4*e^'%TN'5ULPJ.3\n^F206a:d3^i[nbkS?D04')tLZj-bh4"tjrP%KU(gUmd`BV(`s7_$Boug]lqXONn5Q(#kg[2K%5QBioa"PVqLiLk$%6NfNQ=9s+@UNEMUIiJ`f_a,(0G6jH84qBttTU`VEI8t'(FED(LgDS:9M>(aT"@-70G\k*g8AC(7ib=RScA_7bLop1F'T0r:l4P[Q%$WPbl7A3aS92BRUn,es>knMl>f"*YW2P?OfjMH,2EVE(T5FnkY"NN(WoYl\01BmYIk[ruK7X:H)09KSK8=hoeIYd7d$F=m0]QJ;=%B0=LgQ&^8*h)K\&'^b<#fKgt&_="<`5$V&*]>#sJe,V3@RRFj-B6YJm9(*0^TEtf[T)]XKLB7K<brNDFj/6fpWu8?5Fi*9KW6^[$%T!0.-oUs.0(QPn_G0>'3r>absY"pQI\'?.2F'A20@8kBMo>AaW22qPi"]t(nb!&P".'oA3PGt93&#rF9,^?h/=bK04EmDY!0/c.(%@QfdV^t8ie+5cIdIcB"n_KHT*P/^KMk`lYg-=ksQSIOSlg!g@M\*"^Bj@8rX:iVLrAdNWN9Z:VD>TO\VZr1e/GZ+(V@HM*JC'rt_%)Z4oQ6/*p=\?$8f^3oMqKb#KAUAuSU]SfSn7[b>0_GY'a,nrAt/P6Bh&0)=tS+EqlQ,5\pX?Gt5G[):;c\$X/`hZ-GDqg&LY`g6P%oA,3XZ."jHB4ArRb0H1JZuTMtGKc-t[:t/4jrkl#erDdk)b"*JY7L:Rc?AF<(*tC4\ZprrQ*r1e2+-1t`d$PLV(;U2\DX'l!TrRR%W-9EVch_Sb#h[GS2&e!.SBnU<+@(@"S,cb:Ma8ZTPr\7a(1M^(/_o$)&2o:tk?6I>dCl%McnB85qWYK)^.n9ng@O)@Pt:@ZWgX^`%*pSR96W8;-=rOu;<`a,i`IisB;bjb$*1oi$1R/_EWjuY\L9f?WGIVqMaA"+NPSUsg8r%8,h6,kqas(hB-^OAPl3`Spp=(9h[m%!L%X4p-5E@DHe5&sa,CjhARUHZ)]A'TX?)kE>`o0fu2EP=H&<6Z<a]Q_r%SQfOBZI$P53>TqHm<(%d#%7GB^($[K]YD8hTVT0LmlUV-%ou(7X$)"mf?tLCi4YGet%fk,lgD(Tc8n@J4$)$i&*tn/J:]X:O)0#`A'#:W@b6agl=@^1tBZ\iaLL$0'l/mf)=PKiXW#TMOanLRM%EY%JQh7Gt7Fm+#)r8H(oGlk@_XEJ<#3eY3=<5Y&,*`l'7^PiIhG8^&gQ"''[h)@=YC)d6-qo&'F!V!I8J$T5B6p[u)a]rY$fDeH.%Z`ls7Ubqb@5'Eu1=DD[aVk/C#N9a[rRXkqlpH#DC%qcI-E@I?[56U+!66)mkV6jZ=;MNUCNQl[I;M"48%#M^'CH>&7l7rgdlq+!Y%B>ddHo*!J!PO=(_6AAh4,LjlPA]1tuA5U:Jl:N>OD<c%TebbSMZ;<b['OES@`ijCc--&0@@XRc%Ek$XV2KeUTk#P1UXq>@3A\@<a%(:qT<\Rn,PJ42p)5RoTeRWA1:+ZTtmN?+V6[oI6A+U_tuq*u_^5i"TDXgiFE>%aHjUH2(+8gX.u[')!P4/H>JjZ>G*BCDh99i*`p%2"<Zo1t@$:@%_WX6!4/sB<tJ]-(ak%kWGn4l,)<!!rK#H(u0^pb]/FY*)_SrO6B!fHYE%,f`\&7e5Q_q@J"q.e2,u^f-qf\X:iWF%9)V,;LXgi&Btnk0lefJ&0QSkR8,t+tF6u/^>5,EW1BsWr$1>hYCu+2tE2)t^3MSE8jhNU0Ne6tLI@<e&HGPBW`&4#90B5gD.^cpZ%aPU56hIf)4BQR=6.gT%KjdF4"L*kee?;/5#6t!h_jppo$_2PNTW(Ye8;u`7]M&b-"#Uff!=CC8*]OsuQ.?_B^'uZJ3YEe3!)\a:K%9QCE1b<1X#CNH&%h_$O:+Nbtj"BVX6AX0b0KkZ.sTL>WM-drqfQ,e,MNX2>C!:%JZm1X\rKdP@NlUi6k$S$*.SU=+ghsraA4olO*%0;R#h%\#*k7p2%('bQjPU:r;17KE5S4megV(U$@=^dQ@'.</Xrn$iug`L9(oH5q#!P&&B'j,qi4;+tJN(\OW4.R#u>n!),c).gi[%T?a"2DuFXYlY_\Rd/4UjeJAA_dcCkO9f^SDPISa3L]D`<s8)Z;8#n=P$Js<"qHNR#'n;sTY#.JbM/CdK$tW#=TMi3EWg/*Y"%(6a%,Rl.`SGG,39<0YE6tT5ho5ed-I%IJ@WaRf2<#h*4&c0SXSj?Z=%ntr*0!bO[Df<fm_=6(IS53q5Y^fJM[9<fQHe:`UNr[NVhB7>`%Oa.@t^-L,Q*EM=Q2\*'KKTPfO>&sRN;#^ou&gb:>DAkr^g$rsp*,I4f8$ARP$O\?ZWZu4h1nY8mcKruRjA$S\aep.";+o(nmElLY%YFS\?g58N%fosMRqiL[G;MqhQ+-\<$14<Zfg4n5Ypia6t*p\6uJ^+E<SXLmMRs14=0pc,/VoOX&XpM:e>=BR<be;1_Ks<D":8GgT%?5GT?*M@He]`%E8m`4]&Ru9E?Op%t.)"nq;g&-Ob,#"TunuNcAg*L(-Z]r,2P4dJYSd+np%"s1B3rgZ9fi+F-:/)bbB"NAn/K80Z%c01$?j`+(7]dV"X?"[]>cH(q%+bbb<"AsFV-)B1*pc?"Q=s5bfNEtaY1HV[R5.'!XO3HMJBb+4P4AX>F<0on-^UL,5K+!%%o_Q1r%+M"!u+G6JS]$/UOg3n+iAu:;iIX(V3+9/VDkF[5"YEt=MpZ]lqhnT'NRt(8/j/7D*o'roU5CIhOj"DMSkL9<h5Q16GY9/8mo\]EC%H2lok:VZi(o9W8AJ,.:6s!u4i-b]=7hu)`2s5Df6"'OA6Y5~>%AI9_PrivateDataEnd