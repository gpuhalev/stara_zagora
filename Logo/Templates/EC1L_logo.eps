%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: EC1L_logo.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Elke Scholz%%CreationDate: 15.11.2007%%BoundingBox: 0 0 372 146%%HiResBoundingBox: 0 0 371.5376 145.4205%%CropBox: 0 0 371.5376 145.4205%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 7848 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFCFC2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C9FD06FFCAC192BB929892C199C199C199C199C199C199C199%C199C199C199C199C199C199C199C199C199C199C199C199C199C199C199%C199C199C199C199C199C199C199C199C199C199C199C199C199C199C199%C199C199C199C199C199C199C199C199C199C199C199C199C199C199C199%C199C199C199C199C1929899CFFFFFFFCABB98BB92C2C9FD73FFC9BB98CF%FFFFC192BB92C2FD76FFCA9999FFCF92BB98C2FD78FFC9BBCAA09892BBC9%FD79FF98C9C998BB92FD13FF99C2C9C999C2C9FD60FFC1A0A0BB92BBFD12%FF9F9892BBA0FF99BB99FD5FFF99C2C998BB99FD12FFC2C9C998BBA0FFC2%BB99CFFD5DFFC2C2A0BB92C1FD15FFC9929899FF9F9892CFFD5CFF99C2C9%92BB99FD16FFC998BBA0FFC1BB98CFFD5BFFBBC2A09892C2FD17FFC19298%A1FF989898FD11FFA8A87DA8FD20FFA87D7DFD23FF92C2C992BBC2FD17FF%CFBB92BBFFCF92BBC1FD10FF5227527DFD1FFF7D2727277DFD22FFBBC2A0%9892C9FD18FFA09892C2FFC292BBA0FD0FFF27527DFF27A87D7D7D5228A8%272752FF2752F8A8A852F852A85227FFA852277DFFFFA8277DFFFFFF27A8%7D7D7D522752FD1AFF92C9C998BBA0FD19FF98BB92CFFFBB92BBA85A5A7E%A9FD0AFF52F827FF27A87D277DF87D27275227A8277D27F87DF827F8A87D%2752A8F87DF8FFFFA8F8FFFFFFA827A85252522852F8A8FD18FFCABBA0A0%BB92C9FD19FFC2929899FFA19892C22F0D070D2FFD09FFF87DFFFFF8A82E%52277DFFF8277DF87DF8FF2E272727527DA82727525227FFF87DFFA8F87D%FFA8A8F8A8277D277D7DF87DFD18FFCA92C2C998BBC9FD16FFA95330A8BB%92BBCAFF99BB98CFFFFFFFAFA8FD08FF27F8277D7DF8277D527DFF2727F8%52A827F8277DA8F82727FF2727F87D52FFF8A8FFFF5227F827FF7DF8277D%52F82727FD19FFCABBC2A0BB92CAFD06FFC8C79EC09EC09EC8C1C9C9FFFF%AF532F070D077E999892C1FFC992BB995A070D072F7EFD07FF7DA8A8FFFF%A8A8FFA8FFFFFF7DA8FF7D27A8A8FFFFFFA8FFFFFFA8FFA8A8FFA8A8FFFF%FFA8A8A8FFFFFFA8FFF8A8A8FD1AFFCA92C2C992BBC9FD09FFCFCEC8C09E%C0C0C1A75A0D0D072F5AA9FFC998BB92CFFFBB92BBA70D072F0D0DA8FD15%FF7D52FD1BFF27A8FD1BFFC2BBC2A09892CFFD0CFFCAC99EC87D0D070D07%7EA8FF7E5484BB929899FFA09892C27EA95A2F075AFD4FFFC292C2C992BB%FD10FF542F073054FFFF840D2F077EC2BB92BBFFFF92BB98FFFFFFA82F2F%FD05FFA87DA8FD05FF7DA8FD40FFC2BBC2A09892FD0EFFAF2F0D072F7EFF%7E2F070D070D5AC9929892C9FFC192BBA0FFFFFF075AFD05FF7DF8A87DA8%27A8FF5253FD40FFC292C9C998BBFD0EFF0D0D0754A9FF5A2F0D0D075AA9%FFCFBB98BB99FFC9BB92BBFFFF7E2FA8FD06FF277D277D52FFFF277DFFFF%522727A852277DFFA827F8A8F8A8527DA827F87DFD2AFFC2BBA0A0BB98FD%0DFF070D072FA8FF2F0D070D077EA6FFFFFF99BB9298CAFF929892C9A80D%53FD06FFA8F87D27A827FFFFF87DFFA8F8272752A82727A8F8272784F8FF%525227F82727FD2AFFC192C2C998C2FD0CFF2F300D54FFFF2F2F07302FAF%C1C1C1CFFFC898BB92C9FFC292BBC25A7EFD07FFA827FD06FFF8A8FFA8F8%5252A82727F8A82752A8A8F8A8277DF8277D7DFD2AFFBBBBC2A0BB99FD0B%FF5A0D072FA9FF530D070D2FFF9EC09EC09ECFA1BB929899FFC99892BBFD%09FFA8F8FD06FFF8F8277D27F827A852F8277DF8F8A8FF52F8277D7DF827%7DFD2AFFC192C2C992C2FD0AFFA82F0D0DA8FF7E0D072F2FFFCFC7C0C09E%C0C1CF92BB98BBFFFF98BB92CAFD15FFA8A8FFFFFFA8522752F8FD06FFA8%A8FD2BFF99BBC2A09899FD0AFF54070D59FFA80D070D07FFFFA9CAC19EC0%9EC0C99892BB92CAFFC292989FFD1BFF7D27F853FD33FF9892C2C992C9FD%0AFF07300DFFFF5A0D2F07A9FFFF2FFFCFC1C0C1C0C999BB98BBC2FFC3BB%92C1FD52FF92BBC2A098A0FD09FF5A0D077EFFA9070D075AFFFFA90DFFFF%C9C09EC0C1C292BB92C1FFFF929892FD07FFA87D7DFFFFFF7D7D7DFD19FF%27A8FD27FF9892C9C998C9FD09FF540D0DAFFF2F0D0730FFFFFFA90DFFFF%FFC8C09EC1C2BB92BB98FFFFBB98BBC3FD06FF7DF87DFFFFFF52F8A8FD0E%FF5252FD08FFA8277EFF7D27A8FD23FF98BBA0A0BBA0FD09FF070D53FFA8%0D070D7EFFFFFF530DFD04FF9EC09EC9929892BBCAFF99BB92C2FD06FF52%F852FFFFFF272784FFFFFF84A8FD04FFA8FFFFFF7D2727FD05FFA8FFFFFF%A8FFFF52F8FD0AFFCFFD04FFCAFD05FFCAFD0DFFA7BB92C2C998CFFD08FF%A8300DA9FF7E0D2F2FFD04FF300DFD04FFCEC0C1C9BB92BB98C9FFC998BB%99FD06FF7DF87DFFFFFF52F8AFFF7DF827F852FFFF2727F8527D27F827F8%7DFF52F82727A85227A827F827F8275227A8FF7D277DC192BBC9FFC2BB98%C9FFC998BBC2FFC2BB92C2FD07FFCF98BBC2A0BBC9FD08FFA9070DA9FF0D%0D077EFFFFFF84070DFD05FFC19ECF929892BB9FFFA7BB9298CAFD05FF52%F8F827F8F8F827FF7DF8275327F852A8F8F87D53A82727277D7D52F82752%27A852F8A853F8F87D7D7DF87DFF27F8FFA0C292C1CA9899BB98CF92C199%98CABB99C192FD07FFA7BB92C2C992CFFD08FFA80D2FFFA90D072FA9FFFF%FF2F0D2FFD05FFCAC0C8BB98BB92C2FFFF92BB98CAFD05FF52F852275228%27F8FFF827A8FFA82727A8F82752FFFF7DF87DFFA8F827FD04FF2827A8FF%F852FFFFFF2727A8F87DFFFFFFBB99C998CA9FBBC3BBC9C998FF98BB98C1%FD07FFCA92BBC2A098A7FD08FFA90754FF84070D2FFFFFFF590D075AFD06%FF9FC899BB929892FFFFBB92BBA0FD05FF272784FFFFFFF827A82727FFFF%FFF852FF7DF8F827FF52F87DFF52F852FD04FF27F8FF7D2727FFFFFF27F8%2727A8FFFFC292C9A0BBFFC192C292CA99BBC99898BB99FD07FFA09892C2%C992FD09FFA82F7EFF5A2F0785FFFFA8300D2F84FD06FFCFC1C298BB92BB%CAFFA0BB98C2FD05FF27F8FFFFFFA82727FFF827A8FF5227FD047DF827FF%59F87DA8A8F827A8AF7DFFF827FFA8F827A8FFFF7DF82752FFFFCF98C2FF%C998C998C1C2BBC9C199C992FFC2BBFD07FFC992BBC2A098FD0AFF077EFF%5A070DA8FFA82F070D2FFD08FFC1A0BB929892C9FFC992BB99FD05FFF827%FFFFFFA8F852FF7DF8F8F82727FF2727F8F852FF7DF8F87DFF52F827F852%FF2727FFA827F8F8FFFFA8F8F8FFFFCA92BB92C1A7BB9298A7CF929892C9%A09892BB99FD07FFA09892C9C998FD0AFF307EFF2F2F0DFF7E300D0D07A9%FD08FFCAC992BB98BBA0FFC9BB92BBFD05FF7D59FFFFFFA87D7DFFFFA87D%7D7DFFFFFF7D7D7DFFFFFF7D7DA8FFFFA8597DA8FF59A8FFFFA87D7DFFFF%7DF87DFFFFC9C9A0C9C9FFC9C9C9FFFFCAC2C9FFFFC9C9C2FD08FFC298BB%A0A0BBFD0AFF7E7EFF0D072F2F0D070D0754FD0AFFC99892BB92C2FFFF92%9892FD2EFF7DF827A8FD1DFF99BB92C2C9BBFD0BFF84FF07300D2F07300D%54FD0CFF92BB98BB99FFFFBB99CFFD2DFF7DF827A8FD1EFFC298BBC2A0C1%FD0DFF0D070D070D075AA9FD0CFF9892BB9299FFFFC9FD2FFFA87DA8FD1F%FF99BB92C2C999FD0DFF2F0D072F0D7EFD0EFF98BB92BBC1FD54FFC192BB%C2A0C1FD0EFF2F0D53FD10FFC9A0C9CAFD55FF929892C2C999FD79FFCABB%92BBC2C998A7FD78FFC1929892CAFF99C1CFFD76FFC292BB98C1FFFFCA92%BBA7FD73FFA8C2929892BBC9FFFFFFCF99BB99C299C2BBC299C2BBC299C2%BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC2%99C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2%BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC2%99C2BBC299C2BBC299C2BBC299BB98BB92C1CAFD06FFA1C9A0C2A0C9A0C2%A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9%A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2%A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9%A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C2A0C9A0C9FDFCFFFD07FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-11-15T15:03:34+01:00</xap:CreateDate>
         <xap:ModifyDate>2007-11-15T15:03:34+01:00</xap:ModifyDate>
         <xap:MetadataDate>2007-11-15T15:03:34+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>100</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7d+ZH5kf4c4afp6LLqsq&#xA;82Z90hQ7AkDqx7D6T76ntHtHwfTH6vud52T2T+Y9c9oD7WDeWZPzQ823Mk1tq1xBaq1JrtnMUKnr&#xA;xVUAq3so+dM1en/NZzYka77oO71g0WliBKETLuqz9rOY/wAvvNXAep5zvi/firAfjKc2Y7Ozf6rL&#xA;7f1ukPauDpgh+Pgu/wCVfeZv+pyv/uP/AFUw/wAnZf8AVZfb+tH8q4P9Qh+Pg7/lX3mb/qcr/wC4&#xA;/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/l&#xA;X3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8&#xA;q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+T&#xA;sv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr&#xA;/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+P&#xA;g7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt&#xA;/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDV&#xA;TH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb&#xA;/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9&#xA;Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8A&#xA;qsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4&#xA;/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/l&#xA;X3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8&#xA;q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+T&#xA;sv8Aqsvt/Wv8q4P9Qh+Pg7/lX3mb/qcr/wC4/wDVTH+Tsv8Aqsvt/Wv8q4P9Qh+Pgo3Hkbz3bD19&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:26AF7F66951E11DCAF6F919E7CBDCF72</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:26AF7F67951E11DCAF6F919E7CBDCF72</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:BFD2B5E1903B11DCB4ABC928F372DEFF</stRef:instanceID>
            <stRef:documentID>uuid:1AAFC8B645BE11DC9618C0E1594FE73D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -145.42 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 145.42 li371.538 145.42 li371.538 0 licpclp[1 0 0 1 0 0 ] concat369.695 126.57 mo369.695 135.925 362.041 143.578 352.687 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.925 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv352.687 1.84229 li362.041 1.84229 369.695 9.49561 369.695 18.8501 cv369.695 126.57 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.7 1 0 cmykf3.685 lw0 lc0 lj4 ml[] 0 dshtrue sadj369.695 126.57 mo369.695 135.925 362.041 143.578 352.687 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.925 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv352.687 1.84229 li362.041 1.84229 369.695 9.49561 369.695 18.8501 cv369.695 126.57 licp0 0 0 0 cmyk@369.695 126.57 mo369.695 135.925 362.041 143.578 352.687 143.578 cv18.8501 143.578 li9.49463 143.578 1.84229 135.925 1.84229 126.57 cv1.84229 18.8501 li1.84229 9.49561 9.49463 1.84229 18.8501 1.84229 cv352.687 1.84229 li362.041 1.84229 369.695 9.49561 369.695 18.8501 cv369.695 126.57 licp0 0.7 1 0 cmykf359.923 124.119 mo359.4 132.677 351.957 139.681 343.38 139.681 cv19.9614 139.681 li11.3872 139.681 4.79932 132.677 5.32275 124.119 cv11.6118 21.3022 li12.1353 12.7437 19.5786 5.74072 28.1548 5.74072 cv351.572 5.74072 li360.148 5.74072 366.734 12.7437 366.21 21.3022 cv359.923 124.119 licp0 0 0 0 cmykf117.261 42.4985 mo113.263 41.7866 109.712 42.144 109.712 42.144 cv109.712 42.144 110.476 43.1226 111.109 44.1772 cv111.744 45.23 112.394 46.2456 112.394 46.2456 cv116.75 45.7847 120.884 45.6851 125.904 47.3062 cv125.904 47.3062 122.707 43.4683 117.261 42.4985 cvcp0.9 0.55 0 0 cmykf126.267 50.3374 mo121.101 48.5015 114.447 49.9194 114.447 49.9194 cv117.642 56.0562 li117.642 56.0562 121.855 55.0073 124.789 56.4956 cv127.591 57.9253 128.769 60.8979 127.289 65.0073 cv125.933 68.7788 122.746 70.269 122.683 70.3022 cv123.255 72.062 li123.191 72.0737 131.447 69.0093 132.314 60.3198 cv132.761 55.8198 130.546 51.8608 126.267 50.3374 cvcpf130.687 114.525 mo124.615 78.189 116.042 53.1968 100.761 33.2642 cv94.8667 25.5796 87.0386 20.2163 81.894 18.6108 cv78.8823 17.6675 75.6362 17.7417 75.6362 17.7417 cv81.6128 19.522 88.3491 25.2427 95.7651 36.311 cv104.539 49.3804 116.193 74.1636 122.863 119.849 cv122.863 119.849 124.908 119.117 127.644 117.121 cv129.591 115.707 130.687 114.525 130.687 114.525 cvcp0 0.7 1 0 cmykf62.9888 52.937 mo58.147 50.4312 46.8501 49.8979 41.5181 49.7397 cv35.3618 49.5288 28.4224 49.4995 28.4224 49.4995 cv28.4243 50.5952 li35.0161 50.8472 45.9946 53.0444 54.5786 58.0972 cv58.4165 54.9819 62.9888 52.937 62.9888 52.937 cvcp0 0.4 1 0 cmykf95.9644 94.3276 mo94.4507 84.0386 93.2319 78.2827 93.2319 78.2827 cv90.103 74.6636 87.6987 71.9019 83.1519 68.6382 cv83.1519 68.6382 78.8218 71.2397 74.9194 75.1069 cv81.3179 80.5972 91.6948 95.8315 97.689 111.267 cv98.3335 111.259 li98.3335 111.259 97.3979 104.082 95.9644 94.3276 cvcpf115.804 122.996 mo111.255 87.2183 102.39 55.6323 89.8726 36.9351 cv84.0386 28.2427 76.6011 20.4097 71.0757 18.9712 cv64.0376 17.0913 65.2251 25.6733 65.2095 25.4243 cv65.9302 25.9253 li66.3052 24.6108 67.2427 22.1938 70.519 23.7729 cv73.2886 25.1021 79.0698 30.6714 84.2495 41.4849 cv92.6499 59.0308 96.396 71.6519 102.625 126.195 cv102.625 126.195 105.968 125.984 109.443 125.119 cv113.205 124.181 115.804 122.996 115.804 122.996 cvcp0 0.7 1 0 cmykf73.5659 81.0093 mo71.5269 96.9175 63.6802 110.673 51.0142 115.566 cv53.4438 102.113 59.8091 75.7808 89.1343 62.0776 cv88.7358 60.0425 87.7808 57.4507 87.1499 56.0269 cv57.897 64.9077 43.9868 91.8081 43.5942 122.21 cv49.4243 127.753 li69.6675 119.921 77.771 105.904 74.7046 80.4409 cv73.5659 81.0093 licp0.9 0.55 0 0 cmykf83.4995 46.7729 mo74.019 49.4292 58.5884 54.5562 45.3735 70.3394 cv32.2739 85.9937 33.9556 102.441 34.981 108.64 cv35.8247 113.757 39.0493 117.835 39.0493 117.835 cv38.8481 111.904 37.0376 98.2534 46.6294 81.3296 cv56.813 63.3667 73.6304 55.3979 85.5659 51.4897 cv84.9585 49.9214 84.1968 48.1558 83.4995 46.7729 cvcpf151.229 49.4761 mo152.564 34.2222 li161.108 34.2222 li160.889 36.7324 li155.344 36.7324 li155.01 40.5581 li159.618 40.5581 li159.396 43.0923 li154.788 43.0923 li154.449 46.9653 li160.761 46.9653 li160.542 49.4761 li151.229 49.4761 licp0 0 0 1 cmykf169.686 49.4761 mo169.811 48.0415 li169.787 48.0415 li169.239 49.0933 168.124 49.7632 166.3 49.7632 cv163.924 49.7632 162.466 48.3286 162.671 45.9858 cv163.313 38.645 li166.169 38.645 li165.575 45.4351 li165.491 46.3921 166.01 47.3247 167.474 47.3247 cv168.866 47.3247 169.713 46.4155 169.801 45.4116 cv170.393 38.645 li173.249 38.645 li172.301 49.4761 li169.686 49.4761 licpf182.155 41.6343 mo181.97 41.562 181.594 41.4663 181.258 41.4663 cv179.986 41.4663 178.684 42.0884 178.498 44.2163 cv178.037 49.4761 li175.181 49.4761 li176.129 38.645 li178.961 38.645 li178.758 40.9644 li178.782 40.9644 li179.308 39.3384 180.607 38.478 182.096 38.478 cv182.408 38.478 182.907 38.5259 183.139 38.6216 cv182.155 41.6343 licpf194.852 44.0728 mo195.15 40.6538 192.761 38.3345 189.521 38.3345 cv186.257 38.3345 183.462 40.6538 183.163 44.0728 cv182.866 47.4673 185.255 49.7866 188.519 49.7866 cv191.783 49.7866 194.554 47.4673 194.852 44.0728 cvcp192.015 44.1206 mo191.848 46.0337 190.338 47.3726 188.73 47.3726 cv187.123 47.3726 185.848 46.0337 186.015 44.1206 cv186.185 42.1841 187.694 40.8452 189.302 40.8452 cv190.91 40.8452 192.185 42.1841 192.015 44.1206 cvcpf208.438 44.0483 mo208.764 40.3188 206.223 38.3589 203.703 38.3589 cv202.047 38.3589 200.86 39.0278 200.231 39.9126 cv200.207 39.9126 li200.318 38.645 li197.75 38.645 li196.319 54.9985 li199.103 54.9985 li199.632 48.9497 li200.029 49.3569 201.265 49.7632 202.417 49.7632 cv205.489 49.7632 208.138 47.4673 208.438 44.0483 cvcp205.575 44.1206 mo205.41 46.0093 203.946 47.3726 202.218 47.3726 cv200.946 47.3726 200.161 46.7505 199.86 46.3442 cv200.23 42.1118 li200.693 41.4907 201.563 40.8687 202.788 40.8687 cv204.516 40.8687 205.742 42.2075 205.575 44.1206 cvcpf220.831 42.5669 mo221.017 40.439 219.425 38.3345 216.425 38.3345 cv213.593 38.3345 210.697 40.439 210.381 44.0483 cv210.08 47.4917 212.591 49.7866 215.807 49.7866 cv217.223 49.7866 218.352 49.4995 219.204 49.0933 cv219.718 46.5112 li218.93 47.0132 217.818 47.3726 216.546 47.3726 cv214.362 47.3726 213.24 45.938 213.242 44.814 cv219.17 44.814 li220.684 43.4272 li220.752 43.188 220.805 42.853 220.831 42.5669 cvcp218.101 42.4946 mo218.093 42.5903 218.063 42.6616 218.054 42.7573 cv213.494 42.7573 li213.843 41.5142 215.101 40.5815 216.276 40.5815 cv217.477 40.5815 218.181 41.5864 218.101 42.4946 cvcpf232.195 48.1606 mo231.446 47.9458 230.97 47.3481 231.069 46.2241 cv231.416 42.2554 li231.642 39.6733 229.887 38.3345 227.223 38.3345 cv225.831 38.3345 224.434 38.6694 223.446 39.2671 cv223.777 41.5142 li224.613 41.0122 225.82 40.6538 226.876 40.6538 cv228.22 40.6538 228.742 41.2749 228.67 42.0884 cv228.625 42.6138 li226.23 42.8296 li224.221 43.021 222.454 44.2876 222.276 46.3198 cv222.103 48.3042 223.509 49.7866 225.549 49.7866 cv226.821 49.7866 227.962 49.3569 228.561 48.2808 cv228.725 49.1411 229.446 49.6909 230.128 49.8345 cv232.195 48.1606 licp228.365 45.5786 mo228.26 46.7739 227.278 47.5874 226.198 47.5874 cv225.381 47.5874 224.906 46.9897 224.964 46.3198 cv225.027 45.603 225.572 44.8618 226.732 44.7661 cv228.449 44.6226 li228.365 45.5786 licpf241.007 49.4761 mo241.604 42.6616 li241.688 41.7056 241.167 40.7974 239.704 40.7974 cv238.311 40.7974 237.463 41.7056 237.375 42.7095 cv236.784 49.4761 li233.928 49.4761 li234.875 38.645 li237.467 38.645 li237.342 40.0796 li237.366 40.0796 li237.914 39.0278 239.052 38.3589 240.876 38.3589 cv243.252 38.3589 244.713 39.769 244.508 42.1118 cv243.864 49.4761 li241.007 49.4761 licpf264.439 37.5933 mo263.735 37.1392 262.431 36.6851 261.015 36.6851 cv258.183 36.6851 255.404 38.5493 255.111 41.897 cv254.82 45.2202 257.247 47.1089 260.199 47.1089 cv261.735 47.1089 262.912 46.8218 263.818 46.3442 cv263.322 48.9976 li262.396 49.4282 261.297 49.6431 259.544 49.6431 cv255.657 49.6431 251.617 46.9897 252.067 41.8491 cv252.519 36.6851 257.071 34.0308 260.911 34.0308 cv262.903 34.0308 264.33 34.4614 265.219 34.9873 cv264.439 37.5933 licpf273.815 49.4761 mo273.941 48.0415 li273.917 48.0415 li273.369 49.0933 272.254 49.7632 270.43 49.7632 cv268.054 49.7632 266.595 48.3286 266.8 45.9858 cv267.443 38.645 li270.299 38.645 li269.705 45.4351 li269.621 46.3921 270.139 47.3247 271.603 47.3247 cv272.996 47.3247 273.843 46.4155 273.931 45.4116 cv274.523 38.645 li277.379 38.645 li276.431 49.4761 li273.815 49.4761 licpf290.946 44.0483 mo291.272 40.3188 288.732 38.3589 286.211 38.3589 cv284.556 38.3589 283.37 39.0278 282.74 39.9126 cv282.715 39.9126 li282.827 38.645 li280.258 38.645 li278.828 54.9985 li281.612 54.9985 li282.141 48.9497 li282.538 49.3569 283.774 49.7632 284.926 49.7632 cv287.998 49.7632 290.647 47.4673 290.946 44.0483 cvcp288.083 44.1206 mo287.918 46.0093 286.456 47.3726 284.727 47.3726 cv283.456 47.3726 282.669 46.7505 282.369 46.3442 cv282.74 42.1118 li283.202 41.4907 284.072 40.8687 285.296 40.8687 cv287.024 40.8687 288.251 42.2075 288.083 44.1206 cvcpf150.307 75.3774 mo151.433 62.5142 li148.817 62.7769 li149.583 60.3384 li154.495 59.8843 li153.139 75.3774 li150.307 75.3774 licpf171.257 75.3774 mo172.591 60.1235 li175.615 60.1235 li174.5 72.8667 li180.765 72.8667 li180.545 75.3774 li171.257 75.3774 licpf192.813 68.4673 mo192.999 66.3394 191.407 64.2358 188.407 64.2358 cv185.575 64.2358 182.679 66.3394 182.363 69.9497 cv182.062 73.3931 184.573 75.688 187.789 75.688 cv189.205 75.688 190.334 75.4009 191.186 74.9946 cv191.7 72.4126 li190.912 72.9146 189.801 73.2729 188.528 73.2729 cv186.345 73.2729 185.222 71.8384 185.225 70.7153 cv191.152 70.7153 li192.666 69.3286 li192.735 69.0894 192.788 68.7544 192.813 68.4673 cvcp190.083 68.396 mo190.075 68.4917 190.045 68.563 190.036 68.6587 cv185.476 68.6587 li185.825 67.4155 187.083 66.4829 188.259 66.4829 cv189.458 66.4829 190.163 67.4878 190.083 68.396 cvcpf204.178 74.062 mo203.428 73.8472 202.953 73.2495 203.051 72.1255 cv203.398 68.1567 li203.624 65.5747 201.869 64.2358 199.206 64.2358 cv197.813 64.2358 196.416 64.5708 195.428 65.1685 cv195.759 67.4155 li196.595 66.9136 197.802 66.5552 198.858 66.5552 cv200.203 66.5552 200.724 67.1763 200.653 67.9897 cv200.607 68.5151 li198.212 68.731 li196.203 68.9214 194.437 70.189 194.259 72.2212 cv194.085 74.2056 195.491 75.688 197.531 75.688 cv198.803 75.688 199.945 75.2573 200.543 74.1821 cv200.708 75.0425 201.428 75.5923 202.111 75.7358 cv204.178 74.062 licp200.348 71.48 mo200.243 72.6753 199.26 73.4888 198.18 73.4888 cv197.364 73.4888 196.888 72.8911 196.947 72.2212 cv197.009 71.5044 197.554 70.7632 198.714 70.6675 cv200.431 70.5239 li200.348 71.48 licpf211.947 77.147 mo211.882 77.8872 211.023 78.6528 209.463 78.6528 cv207.855 78.6528 207.113 77.8159 207.192 76.9077 cv207.278 75.9272 208.085 75.2095 209.167 75.186 cv210.711 75.6401 li211.576 75.9028 212.006 76.4771 211.947 77.147 cvcp214.681 77.1704 mo214.855 75.186 213.799 74.0864 211.844 73.3931 cv209.611 72.5796 li209.401 72.5083 209.344 72.3413 209.354 72.2212 cv209.388 71.8384 209.78 71.7427 210.43 71.7192 cv212.765 71.6479 214.373 69.9976 214.536 68.1333 cv214.584 67.5825 214.438 67.0571 214.269 66.7944 cv214.701 66.7944 215.314 66.6509 215.643 66.4595 cv215.333 64.2358 li214.906 64.4507 214.195 64.6187 213.644 64.6187 cv213.091 64.6187 212.546 64.5464 212.125 64.4272 cv211.703 64.3071 211.229 64.2358 210.629 64.2358 cv208.013 64.2358 206.197 65.7896 206.002 68.0132 cv205.881 69.3999 206.583 70.4282 207.449 70.9546 cv206.756 71.1929 206.05 71.8628 205.937 72.604 cv207.144 73.895 li205.993 74.1577 204.705 75.1616 204.55 76.9312 cv204.354 79.1792 206.243 80.8999 209.315 80.8999 cv212.339 80.8999 214.495 79.2983 214.681 77.1704 cvcp212.028 67.9897 mo211.953 68.8501 211.099 69.5679 210.163 69.5679 cv209.154 69.5679 208.473 68.8501 208.548 67.9897 cv208.622 67.1528 209.433 66.3872 210.441 66.3872 cv211.449 66.3872 212.102 67.1528 212.028 67.9897 cvcpf224.294 75.3774 mo224.419 73.9429 li224.396 73.9429 li223.847 74.9946 222.732 75.6646 220.908 75.6646 cv218.532 75.6646 217.074 74.23 217.279 71.8862 cv217.922 64.5464 li220.777 64.5464 li220.184 71.3364 li220.1 72.2935 220.618 73.2251 222.082 73.2251 cv223.474 73.2251 224.322 72.3169 224.41 71.313 cv225.001 64.5464 li227.857 64.5464 li226.91 75.3774 li224.294 75.3774 licpf240.234 68.4673 mo240.419 66.3394 238.828 64.2358 235.828 64.2358 cv232.996 64.2358 230.101 66.3394 229.785 69.9497 cv229.484 73.3931 231.994 75.688 235.21 75.688 cv236.626 75.688 237.755 75.4009 238.607 74.9946 cv239.121 72.4126 li238.333 72.9146 237.222 73.2729 235.949 73.2729 cv233.765 73.2729 232.644 71.8384 232.646 70.7153 cv238.574 70.7153 li240.087 69.3286 li240.156 69.0894 240.208 68.7544 240.234 68.4673 cvcp237.505 68.396 mo237.496 68.4917 237.466 68.563 237.457 68.6587 cv232.898 68.6587 li233.246 67.4155 234.503 66.4829 235.679 66.4829 cv236.88 66.4829 237.583 67.4878 237.505 68.396 cvcpf161.879 111.156 mo162.807 100.556 li151.287 100.556 li150.359 111.156 li145.319 111.156 li147.544 85.7329 li152.584 85.7329 li151.664 96.2524 li163.184 96.2524 li164.104 85.7329 li169.144 85.7329 li166.919 111.156 li161.879 111.156 licpf190.747 102.15 mo191.246 96.4517 187.264 92.5864 181.864 92.5864 cv176.424 92.5864 171.766 96.4517 171.267 102.15 cv170.772 107.808 174.754 111.673 180.194 111.673 cv185.634 111.673 190.252 107.808 190.747 102.15 cvcp186.02 102.23 mo185.741 105.417 183.226 107.649 180.546 107.649 cv177.866 107.649 175.741 105.417 176.02 102.23 cv176.303 99.0024 178.818 96.771 181.498 96.771 cv184.178 96.771 186.303 99.0024 186.02 102.23 cvcpf198.247 111.474 mo195.967 111.474 194.292 110.957 192.999 110.2 cv192.873 105.697 li194.215 106.812 196.258 107.689 198.338 107.689 cv199.698 107.689 200.681 106.972 200.761 106.055 cv200.848 105.059 200.177 104.501 198.855 104.063 cv195.437 102.908 193.543 101.234 193.805 98.2446 cv194.09 94.978 196.922 92.7856 200.682 92.7856 cv202.802 92.7856 204.866 93.4233 205.625 93.9019 cv204.464 97.5679 li203.669 97.0493 202.318 96.4917 200.638 96.4917 cv199.398 96.4917 198.582 97.1294 198.502 98.0454 cv198.425 98.9224 199.023 99.4009 200.425 99.8394 cv204.121 101.035 205.84 102.868 205.572 105.936 cv205.31 108.924 202.847 111.474 198.247 111.474 cvcpf221.199 96.9302 mo215.919 96.9302 li215.204 105.099 li215.044 106.932 215.948 107.57 217.708 107.57 cv218.348 107.57 218.835 107.49 219.289 107.331 cv218.568 110.997 li218.027 111.236 217.133 111.395 216.173 111.395 cv212.493 111.395 210.148 109.403 210.458 105.856 cv211.239 96.9302 li207.919 96.9302 li208.254 93.105 li211.574 93.105 li211.901 89.3589 li216.759 87.3267 li216.254 93.105 li222.374 93.105 li221.199 96.9302 licpf237.727 98.2056 mo236.407 97.2886 235.075 96.9702 233.515 96.9702 cv230.595 96.9702 227.894 99.0425 227.615 102.23 cv227.339 105.377 229.714 107.49 232.674 107.49 cv234.315 107.49 235.583 107.171 237.125 106.454 cv236.283 110.598 li234.99 111.196 233.406 111.474 231.646 111.474 cv226.686 111.474 222.236 107.928 222.742 102.15 cv223.254 96.2925 228.361 92.7856 233.241 92.7856 cv235.641 92.7856 237.479 93.2642 238.962 94.1411 cv237.727 98.2056 licpf240.954 111.156 mo242.533 93.105 li247.373 93.105 li245.793 111.156 li240.954 111.156 licp245.235 90.1157 mo244.355 90.1157 242.711 88.3228 242.789 87.4468 cv242.865 86.5698 244.822 84.7769 245.702 84.7769 cv246.622 84.7769 248.185 86.5698 248.108 87.4468 cv248.032 88.3228 246.155 90.1157 245.235 90.1157 cvcpf262.917 96.9302 mo257.638 96.9302 li256.923 105.099 li256.762 106.932 257.667 107.57 259.427 107.57 cv260.067 107.57 260.554 107.49 261.007 107.331 cv260.287 110.997 li259.746 111.236 258.852 111.395 257.892 111.395 cv254.212 111.395 251.867 109.403 252.176 105.856 cv252.958 96.9302 li249.638 96.9302 li249.972 93.105 li253.292 93.105 li253.621 89.3589 li258.478 87.3267 li257.972 93.105 li264.092 93.105 li262.917 96.9302 licpf275.184 109.403 mo271.814 116.375 268.654 119.125 265.048 120.56 cv262.346 117.611 li265.535 116.375 268.083 114.224 270.277 109.721 cv265.09 93.105 li269.81 93.105 li272.108 100.676 li272.414 101.751 272.848 103.186 273.089 104.542 cv273.169 104.542 li273.721 103.266 274.414 101.751 274.905 100.715 cv278.571 93.105 li283.01 93.105 li275.184 109.403 licpf283.6 111.15 mo283.696 110.057 li284.639 109.086 285.539 108.097 286.392 107.089 cv287.245 106.081 288.002 105.1 288.665 104.149 cv289.326 103.196 289.863 102.3 290.272 101.459 cv290.681 100.62 290.915 99.8726 290.972 99.2192 cv291.048 98.3423 290.875 97.6606 290.451 97.1753 cv290.027 96.6899 289.459 96.4468 288.75 96.4468 cv288.171 96.4468 287.619 96.5259 287.091 96.686 cv286.564 96.8442 286.083 97.0552 285.65 97.3179 cv285.137 93.9009 li285.687 93.5845 286.335 93.3276 287.081 93.1313 cv287.826 92.936 288.656 92.8374 289.57 92.8374 cv290.447 92.8374 291.249 92.9683 291.972 93.23 cv292.696 93.4907 293.31 93.8735 293.818 94.3784 cv294.324 94.8823 294.698 95.5083 294.941 96.2554 cv295.183 97.0024 295.261 97.8706 295.175 98.8599 cv295.111 99.5884 294.926 100.322 294.619 101.059 cv294.312 101.797 293.92 102.535 293.445 103.272 cv292.97 104.01 292.429 104.752 291.822 105.5 cv291.215 106.247 290.582 106.984 289.921 107.712 cv295.325 107.712 li295.024 111.15 li283.6 111.15 licp0 0.7 1 0 cmykf306.085 97.8101 mo305.703 96.8491 305.195 96.3687 304.56 96.3687 cv303.925 96.3687 303.333 96.854 302.781 97.8237 cv302.23 98.7935 301.87 100.249 301.7 102.189 cv301.527 104.167 301.631 105.631 302.015 106.583 cv302.398 107.534 302.908 108.009 303.542 108.009 cv304.176 108.009 304.769 107.534 305.318 106.583 cv305.868 105.631 306.23 104.167 306.403 102.189 cv306.574 100.23 306.468 98.77 306.085 97.8101 cvcp309.595 106.364 mo309.157 107.54 308.609 108.515 307.953 109.29 cv307.296 110.065 306.564 110.638 305.757 111.012 cv304.949 111.385 304.107 111.572 303.228 111.572 cv302.351 111.572 301.537 111.385 300.783 111.012 cv300.033 110.638 299.396 110.065 298.875 109.29 cv298.355 108.515 297.978 107.54 297.745 106.364 cv297.511 105.187 297.465 103.796 297.606 102.191 cv297.745 100.604 298.034 99.2222 298.472 98.0464 cv298.912 96.8696 299.459 95.895 300.115 95.1196 cv300.771 94.3452 301.507 93.771 302.325 93.397 cv303.142 93.0239 303.99 92.8374 304.868 92.8374 cv305.746 92.8374 306.556 93.0239 307.298 93.397 cv308.041 93.771 308.671 94.3452 309.193 95.1196 cv309.713 95.895 310.089 96.8696 310.324 98.0464 cv310.556 99.2222 310.604 100.604 310.465 102.191 cv310.325 103.796 310.035 105.187 309.595 106.364 cvcpf320.73 97.8101 mo320.347 96.8491 319.839 96.3687 319.205 96.3687 cv318.57 96.3687 317.976 96.854 317.425 97.8237 cv316.875 98.7935 316.513 100.249 316.343 102.189 cv316.17 104.167 316.276 105.631 316.66 106.583 cv317.042 107.534 317.551 108.009 318.186 108.009 cv318.821 108.009 319.412 107.534 319.962 106.583 cv320.512 105.631 320.874 104.167 321.046 102.189 cv321.218 100.23 321.113 98.77 320.73 97.8101 cvcp324.239 106.364 mo323.8 107.54 323.253 108.515 322.596 109.29 cv321.941 110.065 321.208 110.638 320.4 111.012 cv319.593 111.385 318.75 111.572 317.873 111.572 cv316.994 111.572 316.179 111.385 315.427 111.012 cv314.677 110.638 314.041 110.065 313.52 109.29 cv313 108.515 312.623 107.54 312.388 106.364 cv312.156 105.187 312.109 103.796 312.25 102.191 cv312.388 100.604 312.677 99.2222 313.117 98.0464 cv313.556 96.8696 314.103 95.895 314.759 95.1196 cv315.416 94.3452 316.152 93.771 316.969 93.397 cv317.787 93.0239 318.633 92.8374 319.511 92.8374 cv320.389 92.8374 321.199 93.0239 321.942 93.397 cv322.685 93.771 323.316 94.3452 323.835 95.1196 cv324.357 95.895 324.734 96.8696 324.966 98.0464 cv325.201 99.2222 325.248 100.604 325.109 102.191 cv324.968 103.796 324.679 105.187 324.239 106.364 cvcpf335.391 96.5884 mo335.021 96.2339 334.537 96.0562 333.939 96.0562 cv333.361 96.0562 332.855 96.2339 332.423 96.5884 cv331.991 96.9429 331.75 97.3911 331.703 97.9321 cv331.661 98.4175 331.819 98.856 332.175 99.2485 cv332.535 99.6401 333.042 99.9204 333.699 100.088 cv334.349 99.9204 334.863 99.6401 335.242 99.2485 cv335.623 98.856 335.833 98.4175 335.875 97.9321 cv335.922 97.3911 335.761 96.9429 335.391 96.5884 cvcp335.33 105.045 mo335.185 104.766 334.993 104.514 334.751 104.29 cv334.51 104.066 334.242 103.879 333.946 103.73 cv333.652 103.581 333.357 103.468 333.066 103.394 cv332.779 103.468 332.484 103.581 332.182 103.73 cv331.88 103.879 331.602 104.066 331.349 104.29 cv331.096 104.514 330.878 104.766 330.695 105.045 cv330.512 105.326 330.406 105.634 330.376 105.97 cv330.349 106.288 330.392 106.586 330.509 106.866 cv330.624 107.146 330.789 107.389 331.004 107.594 cv331.22 107.799 331.476 107.958 331.775 108.07 cv332.074 108.182 332.39 108.238 332.726 108.238 cv333.062 108.238 333.394 108.182 333.72 108.07 cv334.048 107.958 334.337 107.799 334.588 107.594 cv334.839 107.389 335.046 107.151 335.211 106.879 cv335.375 106.61 335.47 106.306 335.5 105.97 cv335.529 105.634 335.472 105.326 335.33 105.045 cvcp338.853 108.293 mo338.476 108.984 337.976 109.572 337.355 110.057 cv336.735 110.542 336.017 110.917 335.202 111.177 cv334.386 111.438 333.502 111.569 332.551 111.569 cv331.6 111.569 330.74 111.438 329.97 111.177 cv329.201 110.917 328.55 110.547 328.023 110.072 cv327.496 109.595 327.103 109.012 326.846 108.322 cv326.589 107.631 326.5 106.847 326.576 105.969 cv326.626 105.391 326.771 104.859 327.009 104.374 cv327.249 103.888 327.533 103.459 327.865 103.085 cv328.195 102.712 328.55 102.395 328.927 102.133 cv329.306 101.873 329.659 101.676 329.987 101.545 cv329.398 101.247 328.889 100.752 328.464 100.061 cv328.039 99.3706 327.865 98.5864 327.941 97.7095 cv328.003 97.0005 328.201 96.3472 328.533 95.7495 cv328.865 95.1528 329.306 94.6392 329.857 94.2095 cv330.408 93.7798 331.046 93.4438 331.777 93.2017 cv332.507 92.9585 333.301 92.8374 334.16 92.8374 cv335.018 92.8374 335.795 92.9585 336.492 93.2017 cv337.189 93.4438 337.775 93.7798 338.251 94.2095 cv338.726 94.6392 339.079 95.1616 339.304 95.7778 cv339.531 96.3931 339.611 97.0649 339.547 97.7935 cv339.513 98.186 339.409 98.5728 339.236 98.9556 cv339.062 99.3384 338.85 99.6929 338.597 100.02 cv338.345 100.346 338.068 100.635 337.765 100.887 cv337.462 101.139 337.157 101.331 336.847 101.461 cv337.152 101.592 337.471 101.789 337.802 102.049 cv338.134 102.311 338.438 102.637 338.711 103.03 cv338.985 103.421 339.203 103.865 339.365 104.36 cv339.527 104.854 339.582 105.391 339.531 105.969 cv339.457 106.829 339.23 107.603 338.853 108.293 cvcpf157.822 69.4966 mo157.021 69.4966 156.433 69.3149 155.979 69.0493 cv155.936 67.4683 li156.405 67.8599 157.123 68.1675 157.854 68.1675 cv158.331 68.1675 158.677 67.9155 158.704 67.5942 cv158.734 67.2446 158.5 67.0483 158.035 66.895 cv156.835 66.4888 156.171 65.9009 156.262 64.8511 cv156.362 63.7046 157.356 62.936 158.677 62.936 cv159.421 62.936 160.146 63.1597 160.412 63.3276 cv160.004 64.6147 li159.727 64.4321 159.251 64.2368 158.661 64.2368 cv158.227 64.2368 157.939 64.4604 157.912 64.7817 cv157.885 65.0903 158.094 65.2573 158.586 65.4116 cv159.884 65.8315 160.487 66.4761 160.394 67.5522 cv160.302 68.6001 159.437 69.4966 157.822 69.4966 cvcp0 0 0 1 cmykf165.879 64.3901 mo164.026 64.3901 li163.775 67.2593 li163.72 67.9019 164.036 68.1255 164.654 68.1255 cv164.879 68.1255 165.049 68.0981 165.209 68.0415 cv164.956 69.3286 li164.766 69.4136 164.452 69.4692 164.115 69.4692 cv162.823 69.4692 162 68.769 162.109 67.5239 cv162.384 64.3901 li161.218 64.3901 li161.334 63.0483 li162.5 63.0483 li162.615 61.7329 li164.322 61.019 li164.143 63.0483 li166.292 63.0483 li165.879 64.3901 licpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Elke Scholz) (Adjouri: Brand Consultants GmbH)%%Title: (EC1L_logo.eps)%%CreationDate: 15.11.2007 15:03 Uhr%AI9_DataStream%Gb"-6s/oVKN@+E'q%!3r/_Yj-`JNIa`aF>o6eUL6\SZH!CV$ru@*#h<C5oDB6RA#<rB.EiYV4?V[f#o_ER)["Q)i'!71WcPUoWR9%'.8At1.VVkq!>?!G9>^kp%n(-GOPOO:QMUu;[CF6a"`p0q!>?er;%LAI<4!#-MF,"DX%L1)Y]^B7Zo.Q9aCc\4hQ.>pu^,]&&3Ml%md\gdhqYtnHM@E.T-!J$q"!hBk:aT9hn2(#q<I5/h&hZ$:G3f>GPLOuBB@aCf2&SFn(tg)q;KtE(;N97p"d[?:LF)!a#CbYp&:l0%0F#>Wf@o7LINr,iYP:>u5C<;&o^St`^Q^ohIJ'p*o':5`MtUrbs6$RLI#r'`5_=sbro[Yfh>PB45.l6;*=1"UJ+M"$I/2#GY@JXA%J+r6qJ,9Parme&.^OLS*iKYT1Ncn?]3A0mkk5X"1VP1*p6O!M>\:eAVnYUF(:QON_oHgg5MQ'\7^4,a1T*flc?bcR/m[J^b*.Re\%OiY(]s5ES$s!lJL,9M7BK`8m0VcW?ena5WQSCHrP"s<a<]<>O(aZ/IiVl,lKpnFCbrlYM\HMRR+=!(tPh`ZDcnG:tqT-!l=^Co&2%GkoB]n(/BRiqKY5rp&;U3ne3q/SGO1V55/Ykf6d?NR-SqR(k-7lYP)7!RH,59pXh+Z9Z0Ls8)'5Dgs7d'e7i&Dr8>/C0e7`O.H;a%[l8a,GPGMT;Wdl8_lL7)BVD3uT<J2EbK\@_aVXm??\GfC^3hNR$F(\2F=r3VHR7]sGkp<p]X-dMr6MSGa78SY+$`PYr/jRoT3CdR%)#3k)hOuCWB1hr99)*6qr9`a%Vtj;oBN6RseV[D8U/e=nPP7'Ag5LS@@t=.?'<T8>/,TqXU=K3*>2A)ranpG_k5HE=:+,u5FK-'O%T2,1[l,73o@ZHf8i>_Ss4R'UVl0oSi74ZRgs.U7jj>5od0I-LR2OG*U`Om3)Hkpe?^\EO$iEu4F4L&PC#leAjp^&A2KQe&uHp:eC%?MG=R:+*i)I5#^$QrkW"n1UEpbW1!0SR^^70lgVGDo"YOL&'\7oY_L*XSFr\(k/1ok3"6gXRKB:&-(W.B#jSb^Do6Vp_U%d5Q&])%,aAqEHp?KO1k:]MrV2h$I)J'L&T<[GcCCZMa>kleQTb4lZ%`3D)pHSV'=5U*S2GeSq;G\f,(3sM`!N'T^M&8Q*BnPeG2=D)p]aX*%e$.;Y;]A2$8g,cG?hg'&mi3@QcM%ri(qHi+c])F).t9X-kO\U7s)@&[9N![uS@Du<-iHF/?+HNP*'SF]>rg*u[*h.;gZa0`5<QX-%OE:90b)YS+*AA\X,bA>IiFDQNqKpmKT+#/U5PRgL)!k%Wr6>)%Ira]GodBbZ4tD>KodBdH`p`4hrop!2HhV`.qf@,-hlK'<kO+Af%f:Vt^q!?sjOS("$4FbZFlVIL_jr_`eX<%<%](3I_j%l(MbkJZ<*gS@E45IsSnbrIp:&TUns)+GM14)jLm<oiAmV]tj8!O%7:]6QV%^Z2eQlL2L"V_R(;lm,[E%!5kX\2c]/8?)^Cr<\uBh[E0P;1>Qj1DtI9GZT.Q;tiWF^o%#?;W+7"b<'[gGFT_+aoJRHJ"@]23'Z1N%[gUpFh+=Z'GE3F7\lIu<^QZ+fjNhV&")Ug]l`[WHef2Af3BiZ4rG?*&pHdLLN0RN7GA,0Hmof@CBRNs!lhq%I7G?Uh:,9l2f`D8L%&Q;&=[bH=8j!/O=s)#O<mGV*[`<G/Q6[Opp!u$Q7`L$6@.s<[!(l!1Wnm%$VQ&$fab>WbD%3OsdqIjF#(_9(g.l'UB(be'95S.$^%nrmQt&(7qGnaIEB/<MMZ*TP/c'(Ib9N#b.Q/H5,<@o%m+Am]fZ+l)A\eoc6D8e&?AVj#A'HFti=mC?U6I!LWqSiY`IdHN_RB8`AW%<r%.K*'Z/)N#\T<Pb[87NY?:!M4O5^IR*e'3i*U$D%KdENS?_r`RFC^[,jRbo<;WKkr*JE.6`M\2,&*6/`%M?F+o-[Muir'(AU'_%$T\Na[BIUG=s#XlUQH%X,":@K,+J1@a.At=EbkU#SZ?\Vqnn"_1ldIG_Wl+%!QW9"]=5Qm'Q1ZS>L!gDlH"*R]I,gY:CqHRUd;u]%Xi]4Eho>9b`W#T.T^l0.U>&U<K%U@`[c\hC<!ngJ_0tF2^Pf#`>^FjXhqDc)C&QqkXg*mmH,<de^LOnKhp]\e^2(jZ9!o>qOZ6]I%g>-9:1(3'f76]\=aTrtJ_K'ub>Z0pegLbtZg3^ZJ'seG0N\o&]h8bL;!M/'4%Q/dEp-AIY`&MV[Ff*JXmb.<:Z#[GR<q$<p(0Q39%+uT7&+H]ZeA@)me3@b\S:c?n_5.]f8R;AK8FGdlf_bqntPe)b2r?3ikn]UBmK*KFV\pc#cgfJiJ.(:OS_0*3(gq'Y_@qY6XPFUQL%bZd%Tq>44G_Y8%%9#aIO%es=17Q&>Pm;p2=2k)0aV6d.'%J$.>rQ1lTq3s-mYZm;QPWe)FEbrB7->Y?!IRPo:31ZS&0aF$l_"_d.%S<\F)+3M][QeT6)`tHE^BgMPbg#Fi@P(aOg^\8-CKTS@RJkL6._;tuH*)Kd#M5(#8>/31O11[35M1U1A7GTA=pg.t_+goFY3[Pm/%agn_Kh&I/@)nrFpDFu2q(%bjs*T/kQl:JMo35^'>.=k86Gp3lIjam:pD*`/*C^71AS`[)kF`^4"nbRHi$N&HnY&oH>h?6S-?5C]B%pb4%W%Ll=PUdK+WaEX\r9FPKt6GArKmCpT%C\$mT;M=S(mu(=/7q^ruUqI2eA-F3`)p#dS#CWB9Ag^1giW(g3[TK0n)iD&XPHOnZ%F:\;%)K#d/6Y@9YG'M'cr)C:!gkh]'J9T"t"fcPN?VAIkgVK![O6bF7j"]M(>ug,Pg?8Y#O@bZp2(+U_U`Skb-64d!c:R,L95_Qb%<p\n;QV>]+n()moD\"H$.J[e7`dtQKT=>h<MccQ$V+/PtV416Pgijskn[cmGa+ga,id,YlnVm/lFACT7.,:WZAre;k<kMGhh'oD7%BD9XMpT.lJg\m6IJF]0`V)=_M.89IVfS(Z%od?P/F8LLAn'_"g-jA*$:/F.$Vj2_`&(bk^:@I?e$*VQ#Y^1=!_rjJq!]b$7Lh`C(%[4[eOO#_@7'05CP^tj^-$_m^(q)G;l:TQJ)\\$$/V4d65MjZ1.>VTThXupFN!Y:lM]tcJCRn@g?_%kuYmAJ3/1ndB%qkS8H,YCg(%--h`Ym]C3-69j1EC5]+V5nhV90o-=g>piV;[_k""CJSe4j/@*3UTZ5E9/QWeq+E=@s6(p_D91H)eTP2?L39pPPAa=mDq2li=(]'K%EKtqfKTU_X[6CL0e+6ATUZ?S9-?p9+L@6I37H7@\V,=:_EiH/kMk,ppBWjC\@1l0\P]l8=pDnRue#M4USEZ@63()uY`#?\Ah$-^6%`T^Ic7eX5G0"#trbT8!q;VqLTqS!+.Y.Fht^"L96VPX`Qc?5Z_pFX`CFi.Oqqg_UV&D;0uPKMb-\]N=QmhWD%3R=g%78(Yn19R$b%/i8W/lDCb#S(j-28A<*6QdNQW'tacDdZJbPWtP6"SdWb3\^f8PXQrIR7D>"1X6!`2G++_$VjCh<I)]o:E.6U@I>6L!gKR/%hlN")%Uir]E0cb7DMfKPNI;a2[E80fY`[<Ol]I.?-8W)(ZV?M$?4mdgS/+m/tE]M0ES!A=P>h_-,\dY4)n#!R/LL0>LoDc9XM_b)-1*#<@%<$E8W@^I>5#4_$QSr>/QrrBD(P4XKS.qS#Tg[dmO^;Z)7>dE`oX*.u.LHZ7%CS*[GWD3&im[(]hZqBhuCH0^j$FOF0_2^<tQ/-p(%+*P=]pG%<g9X['Rjs]'FYT@YWk,/u.4K\<U;!G3E;:ka)1p&+T$IlA$SlGY<]=fIpU17RM["hs(FN#!p,/6a<p4U,QRAFem"5VEL%%Fp(IXKCb+Wqk-((JV1?VdXgDoI8="9ZOMGei6h2Fn2"fbAd=l:LF.Hp\Cd93^;oOs0_<eHXUm^a)01g^aeSEd.naR6[n=L5O-Aj%TAM5"#$(5)p;u:"c^qoM$7FL(hu1/GLbebFcaJ?!rnZ&8YPGg+J,RXTY<I@34cek#qlg&!S[<kE(.[PC^XqB8?iT]]U\sCqhnT'`%qk(S#mCU9ngj\qa2m87VHB7!<YE-Hnc$t69pu*U@^Ua<fmpCPAk1/52J"M/gnb%Z=2_SP<r[6UVf.UK[pm:$se#TrbI=nF4G5M"!%VcU&Ds5i:qYGJ#olf0oW5Q'i:G@,cGOqo]WJ,ANaY/-`Za6/Kh&pSo=HiNW*Il[Mnh7KT\Wm?1pl<do5I/<g-\)4iE3d]EVGQ7?d%qqqA<X,gWf]6iAul/d9.U]+0&dBE+>EVetfDkC?!rpG-7_u7cVVq5:jJ,/tkH2Vu)jF=Z<rmfQXH\:5$hgbYTr)+.#p(qX=%@;#5%q8[EL_=dPOI/D0Drsdh0qu4L2hfebjl)XhYht?dehu)Wme*Cr/X@0dRnGhB;Ii.?e?OO!M5H;qprEs^YB4&FMk1,6:r?.@(mQLDO%+8EQ:k2Fj/jjB>`#lW*LG>.DgksE<^q!mD!YDurq-JeiVTmRBfH@#D\jnkgikF9ilg!ALrJ+coVlK.Iu]`.X"k2hfL9?8o_7M3;>%n+(7Vem!Ftm+HRgl?p6k]D;-W^45t/CY8c<.dQp0h4(#VpuAk(lgaDD_`o6/_gaf0Wh6"-s-)d_ob6\un<6WDH#B5ZrS6/jmZ?l/%F/tpAT5L9uT5(!-+26#"7/[8c/;LUj'3,p2cgC=3T6pOlg#ppM6U0BjC>d-IT5o`MUuLb-FWRe!K74Sb_T>!fp%)Q53c+9OF*e2%%qAK.op1a6"qC2,XA9)ke2N+;3pfU@IjeSO3qK]<k]m]>@F).CVT<=euT;nMmT7$.),:\+brk`5,r$NWk;'MU4:2tKh'k=nKg8U[d%.EcHr6%Z&Mc_!FOG^f\jmeQ8An[sb\;4j3<=f<GMHJkHArp]Drs)@^Oq_0)f6*-CK:`cnR8//]gHFWQcIt)qQisCKAp[u8UB-A7n%F(./b4hl?R]>##]pMSdZ]679Eb$>d/MLt*SE-o0EIf"(7MY4)bs'kB(gNm(AZ]J@T'bD%+4<G)CptUj54m?^VN\[o%@$J&2;lDqL%&,j6"M8;<#5P3NB00K\[7ThRqUr4g1B_Unsh6t^WCTY%nZ;>D&`>!0q5-GLi^>@Dp3bkk#elm`XP)r_CbFtHKoC>`Gb?_Y1U\)u,%/Oan7$-<?RMGntq+7aiobI;cXSsqKB<b;`^>gJ\+mZ`(p6.r(_H[mO\jadZ5q-0\8:j,]&#4X<<X:Ipp[n;WSW@od0$&osiXr`gf%DO#+.;G(!,#Y#/bjL:b:Zd8U'kO.>Nl^p=uXIjt3BkO&ap+]#t9TE;%C<p,M-XM2Gs2_h`@9Gh7J(r<@Zd6PBkPkC#0Lf>4[qD=Q%n`a\Y[f%0m?Z/0jm$#aZl/Lai*tN")?m?3W7n=dC5Pt-0HeBj6S(Il065uPkr?"]/LJQ=s%k%>CJH+Y\_.r]6=VD%#*QK(<l)5s"%I8PC&m^T"*^qT:`#:#Fh7#Qu0&*_I*e*4:^PbO_sSHHqNc8oJ]B/+$^18O;4F$[]0?fuodCZ@lcm,RscG=CC6\RYL8l20`D6+9qQ%Cjkp*X`tJCo,6HJJ%2ER%duK.4/`5=l@>o?<#4og6VZRV5-AOsehQFCOVnZj4',P^&(MOtD,d)U+[fW2U'oe"@IJ:YTBj&l>pl^K%e\rA_r-Ljj:`L1E=Y\P=MD?=>?L`&64@G`!B%qEJ[lPC#iM8i$3^Se+$2G*?K0*Ls#@WP>6)ZKqfNlL&KQ!=KcO`:O'7P6=^,cRK%#$JA[1Fg7c:&&W4+5Y+GoH8M/8a&(RJgT0OMX4L5+IguE:$bV5ZNo15:.!Ap<]\?7=(Kcq]upn1.m)_'m"j!b8OskNW?f)eO^5<P%>XN\^45!=MA61o7KEm)?8!<8JaL2Iho0AhBCr['l/Y@\VJe1Y>rOU(ah.6O,ZB*nbIf:JeqMBufZF!d.r-I61pP;q`'kQ<0P_/)m%E6AD.ZQolF&]LG,FO;:M7@UeWE9>&0pac^H-.+]0BHBl)O<L(6SS08ZU7%M]?pIPcW%<P)'-+nW<#KthW&8Nss/2tufLpis%dYKl%ErKVIQ/sC"+#]YW>]0IVbe:=Tb0hdr:IZZ=K8E\'>o@k4Z7E72Rnb$\F/O$>_:Wd>8S,l_M0f_;\Sof:b&([t_rNZ;ZDO7s<'?JO%6//(#H_k].\551LMJ-HI._uM7+-^,j;Eed/.K+l$L2m=i!1\#3g]2f=kG2@fQt?np3tff+"8]:<rMId?FrAFX@%+]MV[/'3s7r\s%r)X&H._n*`HQD7>%[A,6GLoWsc_h69NVRs@qtW=TkIW7Ao/4EgH00'X2ohKFr+VAjR_c(ps5Buk>cnpehdn9U/;;!0V0mX/9]#+1%>BPCu]^)3-R<j>,4MGDIJ'p/;S8$*sb[R7^QPBII5Rpt#N["Vpq;JYeYCO6'%`hEZ,oN+c2^-<Sq+Va`oFnu&HS526Q>=f`IOiat%bO[\49ci'HL@a:,qs@+`7(n0oCSO$tg>4td=-U=]Y'ZT9!WRLm3e%%tl1f`Jhn=O8p?PdE3Eue^s)I]ubq7U+[(VKCY,,FUdl*ZK%@9(jTVY5F\[B&$8@BZh^%rL]0k\GrpL$ed'C[S:_TBEi4_rc$Tq:ogN\!t_5cTsM&p!Ygk](qT8-dPTBHq`lHoZ-Tsm;2%SOOl]-%S'V'2h"g-+gTH%Gk0l8]2Eu?_-m)5;p.X+hgs<39clLauZP9:)Os*4EC`2j8QTp:5?@DeG2uiUOO@eU7=9%Vo23P^h,c6]Wm7%43%bb&gkmS2?OT5VX8L#V(;[pf"TnaP_rY^7&WnE8Q1HP?,BkM*4f'D?CqL-;Gfn+5_ta7gUH_fu)@rp\7m.eqFHq7T"Jh:H_/kE#BX%G0[lfpEO3t\DjLdTq;_Umrs6[H@kb?m:+m(VL\HBlgq<_cadnGPqJB;8rLGVMlh$1Z&Z\9s6n1&1Uq`C2R'o8,4*/.DcgHf/%k:t%%Mul9%n:M7hDX8BBrA)+\6Q<&'W`n($JN`Vr&C=hkMO"$s5Eu?Ie!8e(ic#udS9Y?(&(d!gMb8>(W;"d@E2Kn\QeJtPNEA^("5cc%N!j7mUQG'2jjV]%[pQg05!(t,g].0<;$d""Uc_iPc-gnt[XNiQ6ScB:)Zd2`s65U@otSRts18:2E6Q@p+92/O/]Y%/r_NQ%o6mAu%XdA&Uq0(?\%^tT1`I>POs8N0#hCS057",%&Y&s6sPF_X9QiC*Ks.HR[alEb7'$$!YYEg=N9@S0]j[Q2N*lC];Ps"lrU4*gim)LdS%:b6/tj[CK)@nJ\S],^]B8ch]^7b"L!O?qB@]LRb=#)QX6TSr)YPclOFG-!VOoW7HG5\Hi"#4-mR;EL26YbZ;5:&7ZE.'JIrT'nVK%0&md[R+38A2o7c,f1h&iK^$`:$=9sdRdkO=0]Xao8DBnnbdQC#]_#\P*4\`ci-!INb>Dlu7#tmYj//Ki+[,Lq4cUF78&=gPb=HC8%o"8Y7*0>\?(Z`[N/3+_l^.H3'nj"!RjDn1O5f7W+7]:\Wb7%pc+`Qu447lBtn"TIrF1QpY3/2N">>4USj:MP2Dd#[6_b,iG;SJ(1%.@?HXVi:)Xpj7\2#"mb.N1+nQ,rPKNYLfaEpEHs5?*r8"8(,Y6eHiHu!VhoI.YcA^g8!Vp7HPaTPMk3Y0@\GH3/2l,!\@_-?#Yip%U-'VJ%\d@spYM+;Trq1qAWp+1fqUokU@7,h:@_><Nh]E7,:b0XV8Eflm>*X&8V`bqp%\Kkk^.F87U.D:$CLffkYL8G_GGsOV%:D>%#h<E%2g*53?Od`ACbeKU*brYj98i&%JfqH2]JdoUifB>@iTi=R8U=PSo@be1`tGpb4uAt%L,0GnW2p4"m9Fa!i_W[?[GNTsJ//]3%+:gr0`"3uR*mtV^MY0FsWPIs\RFpRP@-A_KO*),M`:&@!`Io-(/j!PUg+BVHpfh86!DANYif.cD9#.-/3?`C"rjn<T+X+d%3Wdo"%OcV?V?l9+boM"K(]7:NY'`M:USlHU6/BQ0F=:%i+?T,H7<"YqC8<@.h%3ijq"WZWTMHL,!F#2elejG_GS@CHYMa81\?qPl'&$[JI%0adR]_Y(MN4,_%V,W-H[L]^?UL#!r6U4jFirFg:#?W1`f8JA8km'Fl[WpkCo(ma(`U90%j\"aR>KffK/X)/3#M-(HI<,NX6\RB0W%=P[#Shc,_g!%h<<atDdkKY/(G\h&.$J:j<K;W_BaKHQ@E/Sg:Y4lI\\M%;QTMm1!3l7/h'L_-LR1]q-1,SMh*hHfaS#eO2.8,"kd%&drr]OG7it"Os2)%qA"qZH./oZ@JQ&9X0+6VbOn[PQN0ZUh#5XN=1EFcGo\s[#a"THPLQFVBa,!K_*S&%KKCa/4mWH=43lQSNnHS%.c4W)_R1!H9]2W]@MT!oF\`W%R3E?(N1UXgQrJZr'-bRZnF\[K&KJB9#qQ;r7Cp1jD'0<ko*)3C,F_o'XCFtq%'UElKW;B#b4tOM%5UN/eV:oIK26AWB6Tke;U.lS\;R>TQ79/H,#NJqN:QZj9X7eU-?r`lk=coX;-6HDuWY/cE3;g48Op2^tBKkLS/=<[]l8+(`C6?a_%aH:m;F9FF;'mkoGBC*US4Yl$,:.Ji!N3_=d-.FP&=h7Faa)\V]gJA5P?o"4[ZDE%f'[u79`oW:u?LSUoGcGS.6^XOUX$Bsbm*@F`%i'Y5RX"Uu:LB:%HK_'n517"`:8/?M5Amsb`oPLV!.";O=6u&\dKV6G=D;ba+qHfjS'QS$Np8O+/g8%?!+>mmAOWV0*/0-$rKo&6o%@T/2nitj1G&CSpfA6AUA[QuWDn5Xa<[`SRWf10@;AHgHcVLb]4U?G$GoXY=N@hBlM"J6!h5i_,8XEG)LbLV;YKQ4@0?iaOufZ5\J%6Gjklm3"]F$*4Ck6m6:?5).FFI.(Nf6*E#NU<"7Jo44k<a](l2VlV<kCEO_gQGpdWJS$4/SglTqksOgFJ:Yl*PL.@E^Ge#>T)f`:%h6`AbH'(OUMlIF?m>D5f88WX3(f3W,^uSSN-3oqHj>Ba\1)!ka'quF;$f<b);&/jmWM#'#=U;X_1V+Y8=qgNcoDr8nVSMJ40[m2J%T;k_F$uP5r^ZR";[>[3R'i#+Aft_n;9[sGK]>j7d7&PD(OBoM=PD23M7iV_%Xm",H#4Lg#O"t`U)5?dd+-BD%Q46EFm%CqnN1p=P%_Ml'Q31b8:(C;Bm/k_>CM"6kg7Fq9Tb:%HCSKsk&3+!93"']uC.PeUiNR/`o6Isf$7@o+6<:EDV?<H&,9.+tFf_.gXg5I$sMhV4"%XT3&ZOMFT-,.`c-cfj+6\9[9@`U(ViKdrHF6;]4mB"SsnL-b@*HTRJ^(_j$&qfFre6S>!Am^bCbeMmCInd593BN*1fg52A$Rjd-T%$X`BX>&>IpTWJRC5Qk`l%L"_ih3M'#0HE(!E"eV="CMI:DD4gXk9F`Q77qKF7Vt(d$.qe3.1PiKdB:+P#7uuj48.fO]UEbaTrnKK%!"gZGKl/H/'Gpf_[ccr<!_bT+9b<\O-6+A-->B:cQT'L=fe*XUgVD()<h);$E`]SEc+"/`p*F!Xa%;bhZS%@QZO5up,?.SO6<,Ge%bq_0<=C#6M/2cNEZtENJCaCdsKZ$hCZ1k1G#;Rg:ERg:(B%"KuL+*@rRS%j,;m'LGjUp`D9f\p8W7)&0jlCc="?*S[9f_0g"cAiq%>kg!^VoJ0K!t/q?1i6SWj[@PXNWj71(I?Duh6Cn6PX?5uFLId@\!1F3:Z5(e$J#V@&=/iF]I]q(L^[6U%\k[S]a1W8A#'Qs37D&p%fBC;8eC9Y6AB@]n'"-e"-8q;cf^EB0C>#"$6Ps&:i"'R^fLUV^ZYIS?XiV:WZqq'pOd/V^X+hU;0=;Su%67^o2P3i6%a/"_f?OO9%;kCW^dV`IrUb#iFnVJ(rQ<-.C3Y9KKW[.^.:;<:h+C[\)\3,#>JNT\o=m/U?^T-4C*=%QI'n;4sEC.AbX+c:uI-1\MBuo9-dFKCK%"5<t&r%>L9k)Fp&"ful"NAf?mOng#eGra_X]iJ9<#N+_0[!]'Olao;MK;ii4$!7QQ'6[3R(^t$(dBNq9@M0_g&nhW`0,6A&1.6'r%p(UB-VCctD>%duaTM*XCC*n5L/;!dh^?..X9Ec7b'mMC^m'A1-V"Qf0]M#NQMH)'V6Eif*@#OEN^bCHb0FmkI6rZSpUc]dSAM0u2%aOXG:\k)pK&9M`IQ<b8>qSH[oG,rji%W^BXc5*+'<D*JJ9@mHl?qPf3D+!K\6Ict'hh9]5`BCY3W0h1]Ni;k1Q3"<n?JUmaYZ!h>%<Tu6,M>tCD<8*9'%@:6tYpF/iPo)TE87PJF0\J*].71C:pg&#g+_dJYqqha#=ih"$8m8/@#qN3"6/W;E8hFSLl+KA%SV3A*[AY7I%*[YQLi,Vq.YS1:hQr+(i`Os`&,)AlZQ,Ngt%PATs%%*E\d;IIM6NO;HAi4!@9UQMb+>@e77h)gdb]9GF[nTf98(6J'IYVj:?r,(s%FDOYm(RQbe>+uUh$+,9/"LAb"[8;k84Dk<STRIFbr2CO$Fs5aY<4bl%>sLk2"Wpia8UF=DLR;jL.71\YE_r$/A:`]k:Bhb,!CM\"%f6&]O8>/Lj'^G!gP^c*LYEQdD-#I\BCD=JG<H^H.bf9+S?XPX&@Z9PY+dB9YIs+0AgnY%!G>jpbUk;LZ[c&Q=/QAj]2Ot7[eBR28%?'TCW-nJuZ<Me'TZfrr=Jf:O]-SeH%mP\?.=hHWWUeO]d_5t3`W"umGf0F5N$+aEoi!1&4QsJ<3#Rm/IC=fje[:!e%8K0D$_R/X)%Mmur5nktSOH"Y[$KqQGF3pBT\-Vg_F'mL;<cDkYVoL>?O?#+PY\5h-AA:E=eF_HtQPGqh8IFQuJ=bkVM;XM]>AdZ;BFU^OS,ttWT%-koS9R<8RH4iV3f!CtV;PF%N=Un(@1%=3]'1TR[p\'s?Dl5GUf)jjiP%=Ff=[-E;i>7GRUFVUea9A!BiF\q[RX0+bhei^&qVkL4m%-Zi<Xb&5a\m':T8>B'?i)qE66'Cm`\>&Mgr_<3!eF/uH1fK%*uWWNY4?q+FU':tq*NOfHa3NgB.%Ler.A[UeQN4bIS<@?\inCQ$e%PEBguB%9J^U))gtM[2Zmn#X)-Q$bISYhQT!VGW-9ZE0k$7U9:ZJ$\Ah["f^#9nscgg7!,N?73G(U]\K"Pg#qeH1Yk&WLIuE6k4KN%-=)=)0&_%-LKm%Aj5E#E1/ZSX-^e&^2ZN4$gY_!G+;DZ]ruRjp+(9s^0MGP3OY6r(cdZI>+*=Nnl1'a_AZ'jC\:)O)OQQ;Ms107l%L?$m8q<ia5h=EJsDt39j3rZs;"^i6dXuE4mkfV!@-i*bPl7;A2qag?BFk8ms'R@ok1jqBKdqp=XYgi>G3:J0IDH[@]WFFjmeb/g:%-[?9XN]3,HW_'cD'90$'km1UkrK,Oh1#!sq*:&&AQs>I%7Q=mK]-5;WPA32n96GYto/\b+l?:hRI<H;>97>)[Q0#"s/";DT95HLu%?Z:.V,15"SZEL9r+ECe1hD``].VE-]c&kGn.\[>=UTgF$>aTX9/UWQfLLO)J7FgPQR][d_hR*qp2]+Y@1<B0`o?<[15^G$I23c@:%m=NT1M[h.i,#`#*C)e(67Mt5`Ib&5!)n!b*YeRj0]OSt?#Yn&?c5Ou7O%D2_`L1[@;QD(F0.bJ"eWcBq^Z#.r%1#J)@i^';0k8W&%+?I9r"H,7!+)>Ki-XSi#P$OE_SS2I?%`*q5@q@<,OV#Lc#$.m?2`P;MLE:OXZ&oT#0LBb&RfM"oiUfOG\iS_L_3TFS`epnrY3a_`%"L"_SC9i1Nb,Fj3Q"[_n;Y!:SR54+I_8QmY,-4`N_6@;,UqF$J-(X80\#bI0fsW@+OR2Ypf+k.&>1Q_C!F^b8Wm_Oin=`oPb1W^s%fLWkRX8N/G=L]rhOa]M.Hr3?!.Z&b<E]_$,OW!;Se0TLV2"2HND-q;8>dd"TH%Rtt/-M<PB<.PIIpn]P=EtJ2p(X@$X#iq0qk6C,%NBIVnDRcMF4h-o%J:@)2!u::N/(GBe%Ig=_3XV,:53SsB<N>pcFX+o`nFZeB4kW\mk:L]=g#0$6[[S3GHh8k2:ZG$mm:N,t!DF(/%%$\?kkE0PeCI<*QdQl(s^o"$&?JdfS-!@n)VNL:W1<$K3mp`KBMLi9714XpXc3Fh?.GKt44YPX]<.jbF#AtT828;pJ!A<=@&!M/e%cX:q^gS[eS9@kh]"GE>m0AEAjKbo6jLAK7XmP$PL%;uH;Ct;P:j2^P[MGib$E,++,J@*%-Q'6Nhi?,=J4fZnt2R6TO\hqt4K5IAp%fJ;o+):&3298B9RD3j*jA:2q]/E!lWlN9A'2(OVd>2&,@(k`qh,FHC*$?&)s'K>nriZ_)'\o<e[*Zog9P:75m]!PCHF="u]&[]W`%?Yt\M[*tK/3B,PZ-#L'k&&u,GMm=P+n78<(@*gb\4)DmQ2$t"$&0R*9rWZSk7B=(QY`=#:;DtXJ;&f%]@s,cSNl7k-Xb)Oq4iY/l%C,^:IgMd\YcOq0CNjGK8R=&'_K;Q7NBo-&YG'-l(&Ke;qDKC_dOpa>+W<s@rSkA^97bmAVs0>_WiJLP<fErM\+feep=60iS%T+tP%7Q\N'LO.1&WN,Hmd&.pDW[_Tg:X5?M?LfP;m?DiIW8!b\mgN]eFsXX5mCH/k]tgasj!J*;D=X*/'<bOsHX,Z*];G!JQ@*DNe@d:D%Y#llnDe"GnZ#@e!QsXL[IV[QbI;-1BpSHPDiAVJl5./(ahWdj-2taeJF8`_YXTEBt[5?WRf$\<6>#T.T^pdKgX#m^lFk!PW0K!6N%!t';WochFWSaO:*EOU-0X+;X7mj\^+3r=dAQ%Ncs't?+Y!+NR]MtX<^h]%FkrEcs,bVine,]?k6?XLl=r7h6>`De+Rg],3(_"lSV%>nB5UUJuZNHoq7nf^<TpDu@4iW/cYh.lNL%!M"S9.g3P$\k(9Nr>c/50^o<q!-)tR%dC+[QPYApr#`duNX-(6Y\aMp>aA);%bN\V%REO;N^MSH0<IFNb#Ab@$k.KqG^[24ecMDLq[Lp1,CCC*L)eM=(YQM=nK]_tAG(;OJ^/Xd+='r^gqY&hGkLX&K@;W_,eMOeoIhXJO%ncUp!mE5J'l(!9W9>ZVcUCmAfUo2a!(3Z:S"[YGkIXf8Ur2]GI!cngREW82:]pQQhHQ?bnp3ZhN2F&8(i_h/LYA46])hb(j"95rH%+A1hFibW"0f*8PH+^W9>Dr9,Q,;'c%bk?D`\nQ]!h_I:_YF?-FOQnknIe-nKAT0>A0f`ZoY..JVJY(85D(!Q]HG>>nO`tXim&Vf$%*-NnCEn1_!_o_JXjb024of3^S3f![H&1Z-f$B*5=gX]fip3^3$[LPB;b?8Xc&oujSkHJgfYk,:e#L2A/qfsW-NQZTagJ4-D4eL?7%m=_%<jXdhl%<C%FkHJe`@:sG*%d5@5XVYY7?!4@J>DILYo6G3-3paL2B<c;FaE]k>_mZDZcJ-W)/6p6OH4_ale(Q^NbJg@AZe@=.%X0lk\;qNq6`S*8?j52\`CUJ'f#9-EndY7f4[*2"4>7Jn_)`_SKKFh#U=Z;<[Zo16UpLn!ia?c;eprdMEr9ppKGBJkY6JHKqWl/M,%51FH(#s2qg,Mol"Yd:c%n86nd47ALLfQCsPCO&*"kGdjmS450_A^f4=kA;U/2f0RYhUWKNe'pY>npIesfs[Yu8T?rJD;.('ZaPnc%D;.WiB5N&4gU;13kPau;Y$7C^fJBbX_Y9elbVVp>?d<KBem[`YI2:SG%QeUpZe2^/fL<OpriTIW]]Jt5`:+\BMp0:HR+M/P2GN@>%c^O\M2GN@6c^O\E2GN@.c[4af[[l,7Xl7a^lZY1$Y]KC7K\lZ[dsO6,UUP_t5C`;!YQ!JSSfGXD%a4BCrr1@g%Nc5?Gl.BU:.;q#%TW<D<9^#DKr,V-0d!2nm?<!hfn)O7g["!)hr/8Hs)8O)ir8N5ODeW%]_87"%a:,d1`o%-$B84\)\g1lUCgK5c7hH:bF2Hu!]K9)&%7)3*YK=TM%C`<eCPG^2]W4!]j:I`6L:59kB3qNaE.-Bad>@(ZS:\V2niCuU##bJdK3!R?hgJ-3T0:CNg7%DGtY=1?X`cdu_YFchi%)]:0kT%o:K-T-^j<\tF3_PO]sAL?X.d5ANdNipgN6l0[(`4$/p@r2M1$sif?s4o&-O`b7L*lr4KCj&a89RT8gB+r8j&]Leh6MqP<%3=ma=j+Q`p7UM*[dk;-k]sVZNO`+fE]PQ;`Q(':nC4;Gmkd%0q67%^OeW>*H_I_1&`RH`:P+87$`goZINI^6@5\m)%aZ^\1C1FIM%%:-[!d7W/dCk6snCC:Yg-*LET,,%)Ce$a/km;Tae@CTT`o=!k7bA]?DD2Vd(Jce,KS4&q^%N@7c/TN\*Nrm1=*0drgZH*&7giK\W%)[<sJK_rZ*&$Y%*h%E,5"d*9;9bC$IAX&GkaXA"(1J5,e3gl25@4s\lS:'o'?WKdIrg/pKTDr%llLVctPkt;2/#B],?_nIA&)qQp%K46k\"\gi.MQ!Sss,4t2ci;EKn+4F]*ld_gIWG@as!n&trEU+hh<t9U2Z73rli2JE*sq@8O&%IgL^<N9aGV(7BF&j&@@"&^p_7rN%?QA!k%p!)U(3*1mDgK?6$3l*aEPs@,Z#UR+_\"s_5fbmHRU6u([Lik_,qXtWDMWgp:dPtl0%%2.Kl!rna;pro0/jVkCs$;R#6W>Y%NauQ6-7OF!WB-Je:8qu4UhD<nXpUu?XZ&mT'#Ch)-LEW@-1q_7Qk47<ppu=k"e?ZcrNkp3!ss9.+0T/@99FfJ%uXFh;Uj\W!J148%OuO84:k;'r/;:q1#:A^BYhbtPNf>-T^DL(r=0Q%2n7Do/"Qepl+I@Y^bkuh]N/WfV#4BQ&jsZ>[7!U6i&?QU3&Q'ZYN@WSgW)RtO%#GjrVGA/KIYJ(F?=Et5'Hn13mA7KZ^KX''lW!7>3hAGh'U'SSLfcW^+=r7Vl^d^Kd9A<K7;2bQ]]?rfsN=mer77Y-OJ-`mtp,XcT%nqHI(91ldr7A_;kK$t>nKk&/#*!m2@!53B16(L+_5i;)@kQE<o-jI]Zn\R\nVF.Fmg[UKN@bG3HB89$X72JC'lG0[\<NM;_Bis0+%AV6a@TNX>=GIBf$3<.8n:nuH3Nsqs7g7rN)'22d^8qfD^>@7uKq@o!G1[oD9@=n[nrO@3b"8OKW#umpAgQn<toXqTLc1gUP=7Bg\%Zbu0H/nY*-pl1smWDl\hLC*5o=o)#T?o$l-<TX`ioi]Rknr,-Qj'`He`J8"EpRNp1>h]e)J<#qQ>c`A._S'^AlO)DW@"iL<\otZQ%eHH-s2%`uVKj"_Y1dtP(S_Cm?ga/g`TI0'pJJeJ/abI6U'6E+*]gel+m71PLa,Phfn(SVIgTK-C\/W6khMcXFFYg3/*#N]QE-B>;%5FPgB>:@X%DSQCpg&a3n*m-K>p(`Cba29o>1Re'OAu7ZY7ps,&'<R_hZ#>Pn@&8TpY?Tps"=n^Qg9oPW]In0]aMGtNjC0"JohI#T%3[JQSXqLU;H"^.$QZdLq8Q1&]@A:clf$+):[ja\<o1fZA/=U8!I:AW/N=+4Q4OcpH6lehjTRJH,N[\sA&S8'Aq9bMLnJ>,)Yo?2V%.P_lUmapS3]R7)'`9,Di1P][NL_2rDdL)ks;j:'#h9'aJ>F8plGh@RU\THU!Au>]hW9(9'J-4Ij@#"Bh/Maq*3pUnipENeVlX4A'%gK@fi^kbIdUl+DAC>$0Y-!1Qp0NASp=cpL2albo;<nTBu%2c8AglB!Q`Pt/Og>d&R%WpL)dsfmal,#g\Yt_D@i-#5Bn7K&6fBp4'%E3LNV9,FNHdS^+Kd&#.4###c1l>@$'jsTVK=k#IpW=;t<!>,CRIBP%Sf$eV'!Wu37)<ng$_YiVGY:FQNJebp9mFpl<?5GS?j?QF?%.h]*]b@E*t(dco+T;eG3LM4!'Nd_I+#+KNE)mHP1*";^NOcq\S4othlK??5:qmOT:aQL7>^tf8sn7K%CYFBfCi4tK(Vj2ruLt3qo%g?=COCANL=n^1Y3okqju+uL\j>sUcke>OKaBe)*d'f8q-4,'&pEX;UF"*epcOO8Pi,s28+P3cIhM\6k"[8AMprj.4\V49;ROIJ6H%77AgT;Xu0h]Im%]gh_uKePoBVq:;-)b,fJaJfL26m:?s4VC0fPT+36+G\$a^eaf_C`c')oZ#lf]eL@HD+Wgs"_:hqJ3.:$`5]e]C%%Hm/7R;(*D=_X?83`C\<1sB?p6=O`66W_mUgjc^I*J)%WK?:&!ZiZ+ag]Ef^J]"n-&R.\X!jL%-V,#^<)I-:[*kd3A\dSWMF3/qY%,iT1CZ&%(u=pb62m;Wt3_crR$$=JbBEk8"Xo;ca7fZbk6gU<hQ=a+g(Y2Y:dV=q*h]RFSKDdIH3GZs&SZD_OH?]"*)(M<TY)aubh%>BbNtUc#2'6o3SG).d3E&\<RnOIBp9fQ!^^EFsJq_Z<CT&N[euVC#4u'NoE(1XIE/BBls'RBlsCMd#E0qmIuCPmiP8qBJhdS7i#g%ffe?aRHn1?/3,ab)JV$.6OXT8\a`^^hLs_>-83A21gD21s4K9EK"HUkad>4&<S5U/:NcL[Zkc<=Krs1^7F`Sf/eEt\QtnR$Ke(!L%59=3sV^&^8iW6.*g=@7AY!h$iC""GA["5Yqianotm%$Ia?o4`Lp"@=SC8DH+]i(o>!Jn$uI&Qkb"I][R/H.EN.5]MD5VTs2_e:V8%P(tJG6XSgWa:;#fQ7Uor#Cmh^K3$j$9:mRk>.R!ITI"sYcR3J&oXmRqnHu]2FJL;h_hoq0Cl1Q<@BeKaW1!?7KjeG1_"5!g<Fbg,%85H(+n:f+\2q2t\gf%I$(TR7;fN'dD[D0L)H1WnO+j"eFP%h)N+U6h_;hS4NTL/#J*IV@SC]0tQ5fiA'bE]ZO<LG[).b)cH96o?_%Jl.=/W7@<*MJDW;i$+'cE!hI6)LI;9^UKW!>7k2K9ZDWjXDlK)"T"j,0k$LQZ-3<U7;%@Q(>H*r,`)Lu]Jl4Bl@fs[oe7SZOWaZ5%Pm8XeKg!.h8&"8]"`snU&O=iYTYUqLls[?I1sA!K'&=J>\M(2mX_>hReb;<KY67'QWdu`X][oo'6CFTMJn(J-%mO"]2Hhtu*Ao0-%445Zr"Hc`^^+7sM,"eZ0RFFcBp\(a@ZZC(AQSf=TPT56.'>OTGrI[+.`giF`c0DRr_1t3Miu427@\%>0qiN@"..D-L$F-!B52[Al%gJ/oq\s&aAiaf8DM%4?S^(+WEUeXR`;KI;!`tJOi+7a4_m-SX.4uenQh-L1gq9)9,Cr>8@1UN1r^iT.H*T<n&9%F>MQ%m)ijVh1t%gQtst@K!3WDo*_Njp=kk3O3nRMP\FcNd"<Ji-M/?7S0rD&@sGfG0WI$7^qD/eT>EX'$SjHDhQ9P@&iY5[[$QpR8'-$g7?IVQfts[%^Q)nIR=oTp?^aYdDkTc+<Csa[fRc&\7DV.@js.^!9?O[P5jU@#KT3kXgH`+:OHIfbHD*!u"$\J0#?p$.J>npJ?[(m_IRAa_R2SY^%Pl<rS5e"4BMNK>P$P.dU:!kg5V3rQs*V;<[AM=A'lj_-I]kU[bf2F22P(7='T6-aVW^&-cqb1"!ObA_BIMC\Ioc0Sni\L2FNESMJ%U?"sk.qr:4Cp?=.brf+B)-UT4=8.,q92bpFe!C(O-EM'm%Fbh$lmc:Dk12,BhQOA1KDj5[q3%XK\M=SEU7t%?Z"tt09ci`Pb]7>r%('Wt0YJ2bHgdCHc>9_VJ)s)jDqL09Z-A5Q[+])F;/X8\_8=5^l13XciO3!/gq?Ve/76gH:Vs2e6\C`N1=a:r8QGJX+[@!-bGV.%U%Q.(mUFCeIM*b8pfeZZc_G1METdklgI!cu6Ak&*!)f3o(X@rXE<dU8oUBh+TBb[&M<:T_8p[ceY4&oC,oYZAXs4AmiJhUUo0=<>`\%Ql=2LMBlgt."nNe6(0HDAu.BN+UhS3jN@WGA"dpr>hkE8=3**WC60"C1SE9s.]?9I9Ou(U':%Q6M6]i-3lg!;*W.29*8-qq"4cCC%!7jd0"q5>UU1l;O&h/-t]<[_uN96j5bA]Do0mHsoKirb%\e%\7r4JnQ1kGhEE.;8taat$7D"GNN_4Z+q"B5*ELr08dJh?K8WKF&<%MX$e!JHD)>Y);,eh*[)qG4t7%-O;4[HeHJuO+<[/>lm/^DV=N6MJ@kleDX:"r<kDRH*FBT(oRT'kO@9l-^aPS(4CM6C@m_J[.(^X%!0'T3jAK1*o;#s"NTjV(hlT?O3%sPD`6Ho[$rCKdGAfA#>UD$GQoo>?*Km\S,pq),JufJV/UaWfN>l>(bKkj1(.Xk1"K;N.6JHdk%QJcldLh"aa?*o>srT_oW!#>r\;Cis,Q>Ns`bX&UJb+pmc"KDo11N+cV__aYLjJ<jrEd)L&(C>kRJ!"E3BN=cXBUB)T3fTLbd4cAu%ZY121^Z,$'cl6P])a+Hm;_QG-WE(omD=,h8(-O077eK+>'WOLEAf<-Bm.tk_HJGA5fVWL'IL`UHol@\dmBQ.HC42j[T]WJB)_L=J%_A\0e2GqBr$P&1F>c8:J\.pI0Y@fWmh9E6Z/Z@.e/pmmKehPJ5l)'%*M6i;E,IJsc<mZm67gdDL]eL`pQqmaSiTs)O9EjPCVIfB/%$HE<=4)2::]?:r@_"t*5?fn,>eF4?Z$=1Y#6=s7W`.t1&lIeK0.ME5,fr2XZ^5_V!oYCMe_O_MOk!9*Sm+YsD:(E38Q.E9=g@3;F%C-L3gWVqd"e7rkrck(EnRGhr_3rL@,pPTjEGP"U5M[m?WRB>XS7l^ZhM.?iD0tA(O8ND26NL/,`jVa80':&BY85q=!CkHO$KoqU8%>]sPo$aVHHEm%J?Bo-8+n;[[H[&C=hlJ!<'_08jA.*KVJW27u,8Iq<b6&hj+E*_ZnHXU*-+9cI:88e,I1?+*(CeT'K3Zgk#+\Z(:%AYoc-RMhAAkj(9EZ0?)'+L33$c<N;I)dH3POl4<oI[@6Bn\M^^oNYO1`H92hBA.[,L/D#Ik!/AL,#A:pVs^Lt;N.PmG1+#k_oBR9%kXJ&/'"B/H#BprtFZLL;aN68jl+I;K-hiLb^iJ)i1i#"%Z=ME6K1-!En`V\D1JS*7aXAd'im`':(iDf$O&tg\5,e2*?OsmC*CE!0%cPRX1LG1^R8i%5nqBFH33b(IACjsPEQW5(9",8QU$.mEnJQ!ai\)4X5CeNIUMX<-XE'=>_]1UY_=CcTG-h<X+nOT3KUWMRZ*!N91%P8Jl_QtK!.c*<`emkGn$bOBRU"HrPjL?/cX"`"_XgRpPe.V&I+^[b=Re3,o'UZ#agN<T(L>A,;U]/%Z>B3XC'erXp!'uM^kmtMMb%C:Me!@\9=r-L9]OUY9IY._kdfLT97V>cq7-pX/\&]pk"5c&AT9;;]OQ4t%C(cnL']KWf?LkL$a'#e2_3NCXUIbSQ9kM))+*9i-XH%1!R-KCA+XqElGJjhV+S!$oV+\*;1tle@7f154tXBpM\rJ*/+N"pP]a?U-P$m)j(uQ?>$d0KuLk?!1Dj:4s$\$)0fjX?0GZ]acn7)%c6V?.R3MU)e`ZR;V3&skGhX0"gYht+OS/!bW6^f%AFORi*^N\e7g[>%FCH@F,b((^h(A-qR$6;kMk0-[S3Qq-c2I7=G2(o^?Lot!%G)JE0#7aV"C""3giOK5hd?17;PdKC+RWOauEPJ"919mM;[6jXo:WAfQ@kQ]uY$)"GGgZU80Jg5\h^nW2lVWe@+mGEW1Ng3CI(KC;%n;2G95]J%,3mWlF1K$:OTeC^\j]0MhITKRq/q(]=gTg7"*Q;)JWD\bX1TYu^Ub^Ne#X?XbYuD8&f;#dIPumF`jCADO0s-eKnC3I+%r/e,e,mj)D?d1Ai;kU,jr93\<Za5%R1l$F_DItHQ[]Bd<(.b-jH-[*(n*dhVieUq7q'UoD\b'N&P!;6/hXeJu%biZ3bdmP3m.)On%p1LU\pO"]H2a:&*I/]K+M5:(0SKb^$9p=h-)0Us:8qjE+"2EK>$iJ5MA?kO_'AuS40(Y2l,aKdWrXA^1!e/4:SnAqB@RlK@s'R1?%#?s)-ke&XST2'S+<h=$dT,;[<M1M\*IsW:tCXVJ4D&gO.NSh;\6f#_S,LqiK.85s6NTj!kRSkqnHA4qX=\8r,VcJ[Kcog&h%0"Ac%j$,9!WH$<nJaGeCGTc?-=LUH>a_0i*cA+#0.tdOU24U970lSit\_2XLa5T#2Db]_)^Nps9*l0%b&;Soq)Uf:HHFgg%=mOi$E/0%d%[o^$jTIhh56[MN4D2:7e%K0L0f.Co=:Z<s2"P/PS0!,tX/$6gV-SnH_A[<2c?TXIf_*X_3X.@JOJ)>Y_39VTsVR>;qp!kX+;#m!^%W_\*6TKI;kC)EFM[TF$0V@i;\,fr@][Fo+?,OA9Xj#dCRQM,XKYrK`D[4!q&'Hkm>pAo!_e9t;8klh\9(nCTqh3-mfZdg&P`D<P)%?Me?IU<m*-R##DrmuuGMjs*7?A[g.+kuXGa?@D!e6>dt+Q^mU5GI't`C>?BnB3SbcV1_%mbU.aF,FZs'"_9aTkj]()#DX`Xb%(gF%9:)1d$[LsDnMOc$/Tg._V13s(\k[0[9ms!B2I+4q1\Mo7&l@s_gsYaeirr,<iLCF+iBj1kFN$i8;@7[FXN/>M'_6>Ko25-8j"<MM%0"j#V`$t0#B]Lh]GLdkLG=GmAAI8?Y9si^W?Yk5uAlQ8&Md6R[!,oGN'5nI;L%JS/!fH/*U9aV(ACC&OcZN&+2:p*5D=sDS=A24k%UX2s2HlS,"oUp#]gd3i9p#pQTDrIk'*,ml3l'T9med_oKOQX&3r#fsWJd7r\12pU,%M7QXGX;r,euF'Z.(:a3Fbq[3!j@SU-\C5,%b9kY+l5gW1'+^".,nJ]87]02])0<-Y;E9c@i7hM#&VC<9[HVc]`S4utkXCZ+jl=m.#Koe*dea33D'59*a=-hG4XkS`3p\9-^>&T%%(=A(^j#f-Y4@%)A8iZsd^l8E#c\$c3Bspij4\O,lXVn:-$n^o'8UC'toU1iO1ibd+Y&l?IZ@W`kambE1bt)1Cfck/4a3Jh(g]`N8%[QE^gCGUNuB<m>CFBu&n(r"/YS?GgCO-?bFq,MmR12%0!RU:26mjHI_\8C6"LRFi^Z;k,"+\I0)_iS2ujJPTk$e0H/3kMU0=a67U%4RkI"NS<F^"tC7HHHbN-]R8P)_puU!.$d^^`)/2@VF9#)@tmb0V0rSC^_ZLYN9EC30\T!SS@#%A``+E"NE\Ld.f4Kq%m6QT',J9V%:C$"%?$\M_Y<t,EkAmm*'QGG0UaAO0ROPu%.d12E!l;lT<$G#LGmnf&I/(l"q"!pRe[iJt=2mh^.>R7u_9IlY+;gr$OI!nD;NENV%\CrOP=!qFPEG]d,I+t.ZU/,$ajl^An@N,n]M4A.'TlAshaL6t9HKYsZPjLk.e,KkJEJ_cf^bCGAf9]XMPK"Qc.%._M>)=<9qLP?;%KJKeX76`JJ"UX&Xm)M=83D`(lr:Ioc%BOO@0W^'T4%7E`qD];d\jBYQ9UM(Q_od_.D/0Oe@u'"8Ei#F2S5J@4V$&+QSf;bfY_->=%)9"6>H_rM:EHmGT#).@t/e*Em)8=)W+D/NOU_;*C`pr?0^.XoZ3F3\+O4*/.SC_Q/C+Mden4\tlHbE"q-Gn0]f1(tAli=aOF\Tj*%/(g3l;OYXR=Z?^KYj)jf"1pM7+%lArYBC-@-Y@D,o;fd=5%O$11Y!s+`A_b"@,Mkd+WPrILH?4A-E:$`Q=h7)SfrW0n^Z7?\1`4B%h:"sfEmPWSkOq6(nK6]@IfN5!O:amK<r_*M,1/Fr@dD7N`8qfZL4Xoje-'@%jRlTKk7$VJUor%i?kB-;<'MANi2H)ESoruFO/3qs%X#@Qio\A]pa(UgnPK1uJq:a<W237AFHg4Cm7tZ?[DB%dMg[;?`+p$=r^s%^/.6_8,hcnO;<RTGIC"l,*-C;*/RLi[(>fRSYHklE(%7!5(="mR)t8<Ej?,4%Plj'a+A7uFS^=dGD60Y<EMDa)-'S<R$bcltP[%6N.&-4S10k(MSFP0C2+cAG,%,ea/>N,;-m1APP(P%Bq*%\\uSfiT_3J_S?q6La5MQrWfSD1p7f\#?tgf;</T%a46^Ei2/!rb+mT)F'0ZuCg<;4F!8.,_iQ8Q_&G")/gg/OnB"7/7F*>XGn'.B%([0Sen/[,P6HjbS[Y=+IJ[fs#[=qDgIf(3I`[CD@X.%3LleMM*ei?f'Z?ju`lFToO)uo=f]G-f@cqN#i/bQt#$'rB"0rq+4()Z=/%TPXaI4elmGK'!q]7XOG")kK-f3R)knVXZ(\GfGKT&:/r'-H<`Y<sZ\oF."X8P)l6_$($i"JZ8^c:+%5sMZB&Jfca`G-Y'D6oX8sQ%7AC<6YE;g*QLD,2q^b4A7MEnDJq^@:p&=e+XH&kictnk@J]n7hhtP$dhM+UVC=BSY?=7m+Ye.^MeTL`<RRT@Gd='DjP>V1NZ%uWA%(CLX@547DBL/.(pW,:5Q2n3)igA:igUP2YDdGDRPr#:rG'*M'!So36gI^&tk]lL+I&X[e5$1OgU243$s"mcc:(7orrM_)ojHh:b2%bmb#gi)oao]/P^4GsTd+P6Eg6OStqk_RW_M6Zm]1W+@\6FR^F%-mI$.D]-_>/UCV!\)+5uLZA5Lm+>+J'/?7.,E94CS2HW96L%B[%R1`Z3ThIu:XIE.VEaG_u4]?.6gkVgnhuWJpGnfF!Yall\edn(NbWA$/<ihO9hEGj-3dld&!iBO&CF-=dMQ2E&N+F/Z$>XF!OOn.O%ZQPF"m+jS-@-8bWL3Ub,&I4(VF5YK6B*TQen%)@#EK4VPq1J!*+EJqF;^&[TPuFt4J$S7G\TO>-UC1M,1E0Ct(M['oJ.-!cGP0`N%'OU/oHR@?=]IG=f"U4s]Vo]grP`]dolB?kbQ3>j*YNVm7W%_ufIK7B$A>lJ3pD8eH@DOY)=nr'?LXhX)4`$&\#7q_tFA?GV+Mak)%B1qb>*N/>)&M)2J=ht=#1ASgs*:YeaF9!rLJS2XnGb)gGArX#3]mbS0c/!M2kmDB:KDR5_(\JHGYg6uTAM:'F\hCa'Nm9taM+$il%%TI<W,r2q/)0;0d\$?KY.s\^G.,@L%\;tM4Zphn(eZ!YYMhX%T_V1)g/Ra:V.+o"[=LIEOLkuP6)8Z(0c&@?-&SGdKh@a1Tq/h&i%>`&P>B[SuH2$;KP0bMf7Xk2JkVREN;Lh[IpVDhYf.4/Yl/`=oi<gt=[ns#D3J8!*nX)=,FYq+:gTOjuW;AC'Y`d.p\V9_o3VnE]\%au6IH.a"*ci"<?,H=[RLINqutW2Lb&GZZ@BbA%qHo.V#B=anG4'3CRS+Rj_0D?tDtr$kePV#fgUY#^bN.Lg`I^ue5LYYJ(6dsnL]%_e;BdO<tlt#7'"&;4j&o'$XOGIXLJtfta?<HYG.VQI7ga_s;qW2,b2-=a[\Dl-PYXlFJl,C#r4HCLk*oaQq[`BZ!UYr+KnTEX/MC%$'3U"%:]C`oFt"SSHgiqn<8Ka'G4A_\L<mKD7bG!lJ6uIGlRia\-><e-.tIA?!*((aomaerq<\;H+^k'*m50YdT2:h2Qp;b"XVE1%XhG;I/NEeY_EE/EYh")mK6meYC4X[Lb(h5Mf$fNe],gWI6Y2aT+?87MDG['4"rY,!X^A9.SiJr5-a]>2a,-k.j%HBF["A70!gZ)#%?=78;D(5qo")q9gX,Y0m8dd)F=hHoATQ^&tR>(b`b:CU6*4pi?G6F#JZ&7l6).RNhNRGRcTOi'K?HWOW!#pH[GCQlLO4P1k?#^7@%Y,VfQg7C<'eS,HW,;A0m#jf(CPsC\OS^E5\Ab?_(1b4hY`fOYK5+R,7CMc=rURVVqHgm5MeK(@AiHmqZ8NUX@@\\Tqp4G!Rq<+.u%'dFt\VrS=YX&l"f*+kmUX$!5JB,_eHlc5;4b$J[/$4opH^:l5*EQ_$Z/&Jk:AM)U<+JW*5't)8Tj%!=;R$d#h%cY\hoUJ1KRXVoX%[#\9)g^.Ct(6"tg9A[m%S_Uae`aj#:9l-,)/q3Y+RpiW)S7h]#K:`Qg3TqkP@1ib*3iNZV%`auS`9LKepgZ@$W^iPO<2*sB<3Id[%9s[-SQPYe:Cn/b_'jAN01Rn6r8-\mWGd11tNa##O'DDS+A7-oqKrQf&3%^RZ!n<Ou7-C`Fa:,"=TU_B]9?dOL<q%!BdQNZ`Cr%0r%YG3['>Z<UCA9_sO%iVuK,;*XEA_FaKoF:HrLV)h&nI'g5P1!Or+?Fa]dG&DT!J)\G^9o8f=-d@hk=9a2U1`WsbD#-\<,is&NTNLN%YFNqfG6@T>Gso%568jmt='UC^Q&E11Fj]$[C)i'NV,F8-!Zm<o)@VlTY#8#\1T9!<pP)!j4]#Ud"L#nN<cUm">_>GM<37QJD8'Un%QBQsTjS>"V00*3ZPZMbRHJmVcKOHJG#DGH)D!Tc$W)/RfU2f`b\X&ok'l6oje2efq!1AJ-Z%XIIrQWS`W,qqfoeQ:lK\WZeIp5i:%1L75`Hg.-jiQ!$d[rC3*6La'NAl9Ve\YqQ?BGV%OJG$KuifKXj!m;)FaJ.3FNG-s1.=l$tjp;Tf8`jf%Vk/>pMSFUbZ:(;9;OE#h%MBa@DftjO^[qFZt)4:MNdJQPoN"Na.noX#-*gPnbB`434/s8r3A728KC2$Mi!/4^BqdK?'L2HNC$!<uLq\][1Ma`hqMBa\$m=fQc%;hjJtIUq6(D;g>]G(r#24EW?FYp,bM?K)V9TJceGjMf6!lEZ'\S@sH4+1P4I59?snT+#IGI+2Jsk6t(S2_A@m3m@_EOi98l>L.DM%N)Ut)KPKZcI_L*</<ACab6;aXE)@.H/s;R?=bC#s.prT2Z+/h>Z*W3Il)NP`\=CL^IFd0<$lL*=V+%4mij;tr!=D7,MY"?'MM<Dg%F3de1[[O.Qf.18BV\\l`d0h'E8iKJVnB2*+Bs\eW?WMZ-f2/YU-O'`T$\&301O5+5Qbpu"0dd*]BR?k?4=)QlAsbrH+SroF1)qsr%JMg-KH=i!RgiLl.>MN_.1DU&2XJB9NWpePf(4e$F&%]4p1WU>__mt+o'_fcCD#kD6e,k^\1B^btIaBo&6q7E5WqHErV-6iFU"5rL%35&?coh7iF)$[ZF`o:l)CamA[W5'0R`p15`O*5K9Aau_tR_K#$D,.-U$OP9<(3RG9*&r5?h#V.[\#O!,C)kV2h_i0k[XXgA"=@PZ%I35VA2SugW&k&t)561]T=`C)hF^!*-_R.<k,MLsDD>F?RE3Eu`Ge&-[Si$`O#GW=$EE=#&cQon**MoFZ7cE.i!\d0]k5:R5n8D\\%8^.XJ.R:&QFC)X1!:D9RqK+I/jfiu'$]6@_DE;f@VT[)i5/"bMphI&J/$2tXccr3sQ8oj['=tQYP39'Jb;cOHLM3A*Reomp*\9^\%i'(`VjV@!V<]B'**R"q?]o8`@qj6/e!\;X(ZVehZlJ7XTU1[gU/A82$&hR:41]IgcH?F"nYm1Ye='Kq#7BaZc[/J&H7pVG%@Wa@u%[T0M:U-TePo"<DIQ[WbWlk"^0?rc54q9:\$2RWCFZIN=PK5(!V"]GajoaZ2_pQd`irV]%sf'b`<94!Z!2ORWf9l>T,'n+O;B#dBc%Ua1M?NPoF4(DqOiaVn4*Xb4HF?iNu91/ahgL&>Vp4@gZ"0Aj"hG6b_Ne(h&%[OKG-l8n7<o\t(gWClIs=C!s%BH+k<7J+Z[D;B9<%:8+m1S9JAgj9"alL8^Qe%5HI@K"9.l(9H-P8$g"+4EZHS#90>KWb8@9Qh%f!joW"nJU]NH&\Mk=GOibaJ$tse+cDZul0t,;<b#,L%G'Htr2gHuS^B:2,\X8\8C\%V2ki#m;+6r322';\[#Of!(#s,<.#lo7RLkHBTDLJmKq>#/F==f$3>@P%<TjFJ/"[MV,9l*?s8GnW9%F)[m6VJ5Pc&IC3&SGj*)^$FU8JIpbD,d5(Ch0@D7/Yf.=7olL9ge0!T<TZ.434i6Gc*Ja%=[`L4=KLb^9qg:c,1\DuXpFEFB/j!r%fN:jsTl*G7@GC!BMmX#W5Wd91/UhIXS(3S>l$o;0Pf_s=E930Q;GG3!*N[69[14[MD1fH?i!0O:o@E&U..>^?Z=TK8kj-J#:]S)e%_5foS=eQ$J[t5'U3-^ruA`Q)Bi5dk=7SOK;Nn9AaH^[u-CO<5$o2E<(]].`[\BI!W)k^BtCV#aS@)pN%f%0o'Gc,h-[;Gmk'c1H`%c4g7Tm,M9XQpLPHR;6@g0+m\5eJ1.Ph!pUM#$.YN2A=B\0+*<<<&6p@noP<aSC<mdas<;,P?=c?\tRq##1Ym@cfm?#QER+MOj'<X%X_;\i&;YeMbH/48l+9sRQo68]h&*FY_Mm.)9YlOT309])DdMNTM^`+19mc6HBjb3jnbggl*uuVj_dB4:?AP).ApR"RCp0(.Y21N$%nKR>='T5E1XU'CMJB^"N\e0ZcS:OB+6UrOZlb+OSc,PH=G*<TN>=3Cu@9g\Zk87n5)3C@6n(/6GabhpRA"MONh=X`)Me`?[V?]td%5a>XL^-aX_5epu@!QN*=L&BsrJ%eWqZg-@75\"[pB4YZ>@\7)">!Y.cd.QFr'dj6;_=CQ&*kj-.`]BBOB',PAIi@aC=qAHme,jpk%0sFQNGNr;TADMT^T)O0>]:">\oF],#92o4q^a"biWB-pes+FQMae`hD"5UV74LeF=@k>a="*!CZ2dU;E4cEMg:,<b&?g0+?hY_6t%UNG/udgWIVZL_;0]bkUJ4<[=\W0E0;V"X;[91)b=9$8af":<*KP6<@QQDBKA(%_b6CgMf'%")i5du`KV*!@%:Iq/4jO4fFsJEppm%4qX=W-blP+c:ntBKPep@7I6<aJ:%#mFXr9+%NpqK1j,H=:(T?,#EOh.9uo$QI_rO<(iIKTm3J)"X<a5##146!_i1:Y<eA_f4\R'*%**uqgK'#!8W%1S^U"-VG>N4=\%eM@M72*-"k.#FspTo8.cS+UT'QtM!LZX]M/B8KS?KfWtK\H&$#"=eMofLYsj3*kQ+km3YF9,lA%)'49*/.sD;^m<mX/]MB]0^P3q4NDR/*2h[2jjJAi%2+a6C]1*%0$t6I296Q]T_/O,!bh8/rK\P-JY`Wqqs9K?XH^2+2lZ3_,K'$5%V/$LWNe+I2"PP.;@B:7t7F*.d:cEcoCj*"nJlA4CP:>aa@Mn^Z-QF6"ArF1G;LLC',prB+Ye,fqCCXj]TmHWhEG^Z()\k3R]@oI-%=!te$itBD_c)UjZeUY'1-=5WX]l#:T,8U]JVm%7F*W9`Lbu>gd5rPK/Gh5cnZkeX=Gi,n/rVl.A22.F^#&t_Ok^)S*YciT]/*a?$%LBPEV'%t/%$*MiFRPji/Bk[n_o1m(W+u%t]]#T6=_PA^.`NiTV8@0FNa]c^ZUs(?<=K`mZ`g&*sLL_GCFIXm1lWY$+k3#F]]YZsQ%9]?hdc6Vk$)/A\L&,"]OU*lgG[p<3A\S`tORQ+hu$sOjko=m.@>?HmfCS$DR7@iDqgTs_*BpA7KgH8VI(62)pZ0YdU`(m`E3#7Qs%nRYSYF?>C[ekd8UQ+'hoPLh<MVA\KqJQ!7tBs%/jZ+/sU_>Ud/T6hF$$?5KD&fkhZ^c%C!AeB1AF.7aZRL0%3=B6-jJ6'LkONJZI%K5>bei(/AUWDLfLGkHXC(S@%\Fi8iYR4,9N`3u8"VS"KpOK&C7knQ5BmeKZ5E[mLh6f>gsio#i5/!/.R>)gKV;QsCW]<=(W\YirN%H$^U:@b8h2&qR;"p62r;'\'$I2Hp$[]XOl_ifJ+QY<9*,=j\P,!=>tJ3<7J\YI.T@.4j+&Xmg1:1"0cop9c.3^nV4E9n)ms4LFG=%j]^&=o;-)(D@3mh^b4e;&b:cbFW[o+p%&rtDk=R_JHsYW6l;@+(+2+BbG2!_'T4V.8pJUEd>4kCeV%nfTERtR&l?2;2bGmn-Gio4%gpqglnF@u2!N]L"rT%&+X8h',:LI&#(P-\'2eBb2(;T:'SF"'g!5&Y?Mp4@nIXiPWd1S%YKl1d.(@pIaLN&u4EaA1(jG&AjZ7RId%Rbb"<<tHbu]4""#,/1;S=;X)T1I*bF&K'A(Mns7gbqClq1K+Ef0eCj5%?K\gm5Rqh^+fAGU>OtoVbdq:k!CLZmUKIOF[#r[X,a$l%j8jF?[?[s1c#6$PWPc,KCMVo(P)BA#Z!._Wbs8_^?=jmo6l'7pP+G>X_C1RS$_[ThD]B`ZMTI)*dTQu>bc@&(<Z\QP^?U5oZk3OL%GINDdN/5p.-BtnF1oJ`VT6lNBE#GeS*JK@k>fJg?8ls"H(m&R;$LY.Y@t6/bZ-M[RZieVpmL(7%FtM7jiZlgm5g&eLMf3EL=fRHd%SZdDG(bG.Jk^:onkn/ht:VkT2Ajoo1o]WO!'?eFKK:?4GAetLLBNM4a)7YeCak[P=Ah6uFZ4G4c1IMoo9nZH:?4qeqn@3^(!Fi)`%7648VB3U=+Wfq032nKo/Fi82-Ml("W[D$1Q]VAFPK6ge8D-H()L)nmclo/mYn0;&p>9e48oM%,>-77%mJA3R9l)Zj_]n2<,7Kf50%h5g;reCa`N-<r+'#/SYKfXo)=\"?1kdk\>WcJ2,UVp`lHZu\WPh+`A:DqXpq'L/[P/tD$(NLmt%S4m5i0-#MRM7EEQ`U:;&d.QA,%mS=K6NaX(sn9=$:V5"4A(ofa5fn6t1YHjf:gq8=8UG&eEpd-LNc;uB?oC`7Xma9s=e_`'Sm%pBJB(3bt(;C&uhGJ#A&*:5Ji3d-5%Ie=bn>cQ[c>+/fMeihLU!rCo\mpO?NV>2GiK5/e8F&3N0cbLL;(tQ-_WU4G1]m&la.856hnT7o_Zkq>7P@rN+M9jb%0c>6?iX`^^%mq#SaF6hM5p<6$H7^;B>%b?0%k'MB4ZaCf0OM@+gNjJi5>/Nc5<TV4!Q!RYb%,<GP^iOOA\W-mocG":cc3V?#(io6-!`>;*,<#aG%iC-3`*a'l#;\S.Y8(s\ISTin_A*J%]@uHB#]#QB`jssZhU16Vug7i(sFJ/4'MN6uPbPIkm^2I:?dJe0<00XAUp7FYH5F1fX]&MuG%/82aaG]2X[)qr#Vpr`(&fb_3LRQ;j&E7FeX9@[n`j_qbBKP/]&q0IQod2G?cS&X>n[VP+Ol(>pgpsPQY:.O$I2AW?C*.hP8#Tse'%1tb$*PTt_&:'FJm^\?GJZN<r'>@k8J;epX4dT!9]1'qROkH'@CU)"roRjjhV&U.m-Zq`X+-nBH%lBDkl2&IRJ0^"NbZ_DMN3rF(<%XDin%a_HYjNP_cG"l%l)!.(?q:1lSlCXn>^FhO\]2Kap/G"/N4.'?>)9,8SiX?KUk4@\)Lq.t(iY-5Rcq%CeNQfD";=0,@E@bVg-%AK#s[Z1oY?e+o1u]8#7E95utub9C'p_d;t1'@^M_NYM7OP#kQ5^aDPXNdQS621&)\U,gT*o0muDia=PDFJL5kS'&+&\G`Gq:G<2g%6o4uN$OZJbR.pWTFltWI9r#go"/B/Xh:r:a/g>@X!+^s3"LXf!?('T`=$c2S[FJF*g(Dc"=`#3KjGZXf5ga*O5jd:R##@hQ]lot2%4(%:2L7M@YS>6Gs(elSaP\auu,_04h^9AIQj2&QS&8VsPqmP6cD6TGJm(LYp2j=C!eAbSB@#am(JkcG(LCM%e[k2!W';JqfEUp7&%=jd@.;'cYKRnckKIl7a1Sc3O9>RJA0K-se&8C+.KU[Y<\JQW2^k[9PQj!;Jd!c=L1Wn!@lp=<=/i@<qo:mn$YQeYd!i5J0T\hCDS%P`7t2=/NWC5g>Ei`m\rVFo3]^qntleJX-Zh3gb@u;F/&m0OIr&$lIUMq^gBm=OA>t!#mFIA&,/LV;^E_*!("7K!jr&"nc\_jXf)q%D)TjB#TQ=%Q8#H0M,(5=`W%2>,D,fk(Xa`ieg^(RN,5u="3ULYo`q^%<^N`.^<^9CS&^P:a'>&&`3uoi>qrfcR=6[sCf<Gu>*"hX%?_rJt)7F!6<`MFk2,iK][qr>dq>1XfbhZ2V!i,0V4;ds1OhRXGUpSs^n!R!mp:VrkY)'XsZ0:e^G$0Qn@rc;LnI0F'l8Q:/^LK:,%P3Gtu^+M!%-!C8$$oWBZ[a.k+'m?31LK+t<ij6.,S$`sAfi"8us5J@j:P+'X?R8r2aaLo1^\KKSaYR%69XCuI<JGc(_d(gs#HpcY%"u!(WY2Oh=EW@oW7ml"[nHGT9.@IGZJGFbI.J`_1;DL.4LkZ)OW_htk4m.*#b[h`&#`L8&+Yf[0)@rcdAp'34',o+t)c.1\+NhF.%qPk?E17n_X(DZb^bHp.B/=W?Bi?Gpe,Z1Xb1;K1bhGAWR6=G^Wo;<nL5?'_C(0Utt0Da`]];&P6g4fsqV(-<'lW4-`e^b5AK2'D;%Q]^P)C9QS]>!!5D%Wo)*7VgW7E*hsbR2/Id@1RSA1eVR.C?bq#`afUZib3t^P\bGF0lESdrk&C=o6DDX:Kam&_;k3bGu>`(dmQN_%@H!KRD[aj/:^*>QdE4LDI9O9a8Fu[:$7lrA$\U57"]4>@!OnaLe)d]Z$S2G;8?CJteRC-G>iHN85`NodT^?Y)%/0[gR(NY?k'4+3%:X_)F2b-^1#079TN%GGc_mFBY[<ShaA,%"gU\'X?4%O8ABc5$'rRr9pTGc=5<?.Asc[H"kHQ2bIdFZ0e\eRO$oigW,YY:][)_8E&%n(/smgC?T01<WZIGe?ck:,R$sF<nP_C)0IcKt:md7>f/4RP7<fF1=r$7gmdl1^CrsRjm`*RnJ=#K:!r]'kkaBAaI_QZiV]N6*co%%cqWK)HNP"]_<7gbNk+:'#GQ7bj@!<*Lfl+EYQI=Em?_h;doUK`k.oPI4@`G?D3rq,#/D[,o=SE;'tFu[dub[(F?s8:J]I'aj"&]"%qI4YmBf`08B'8d%BRBfD"m3Ve?]kFiDAc7s04,PIoj5JjKV/=u.tF]sHj56\SK2ALM1U_YKC-#1G@5_R#8"o[aQJ`j2sCcbh)Zss%,F?k7`<Rdsd<<=1MQ/SJM4J3Z$s9"PKbgtr^uek"Q78:D[,S"nA\P6dI0X8nY:d]PosIp=NFcAa6M7>%%2EEHmHnj-G[Tfm%ZUS^%TO#5<I%A9PnS)p"\#kCk`N)K1aHK1!QJ$<CEUBDe_c^oaWKCN]0IR)CmImqE?INAr<8DKoN,<36@ogubQ3pGr1>duI43CYEItA,C%HV%St[oli7"\t=j#Boc+4,D;S^!$u[Mstt>D:T_m6-4FG*jQ(6U@i'Kb;&i">=:0cd-u_:VA89_;1iN4.:\k"hB9j[@C<(;VhiLW%#p+V*]B7"dV*so38R\L"19=-"e]2DB;I&hS/\N!SK%$1g)Y0]#CeSQ^+P:IhRjkiIi:4FB(uc1"*,NSV]8%mbYa=]5RXN%H!Lc:B%GBQ#[)su4&cIN3#kB]#g9Du_JnM3ZV/-bZYX6<m8YuLqIm!r*h'P7DWXPoFWi+/"QCe&'J0S$#a!8WhKZFebUZ"bCb:X=j7EpYU]%hYl_+]m*t[HVAC%HN=;^HkdG34a:Cn4(@r,lu$8]/TiF1e=Z;,E_XI7>k;4B<P5lOC:!q_L):clRiOU.iTG:ENJKX/3^nFboNZ67%7];,_dn3s_/T"m!%ffWXd-:c!i?\g^.BOVl@-<:0:(?=U3]l!#ro8-XYf_/2%dQTBgB?BcHn?Q_7kQ>?UKF<?=0FbGAZ4)sR&bRC%[fgL10j7\p2W_d7T*j^K!$6;a!M@@7RQ_!boF4nKl0R#;dcS3NS<!m^@dPuJqj6M-\YkYUFJ1*DI5J:k#.*HJ"0^rCmpjb/$hMm#%`MP8F?,Hft<8(rphl7JDF#S*8IZW&k#JoZ-\*+i#%@0td&$+C&E>(=BZ6egEb,&c#RS(">2[LHX]3'&,jbcNnne0,W4[iAT<h/4O%N-d.>nI[kIA`Y]tO#ZRdAPl&moD$T<osL4XYJY4&eO-]73Pd7EU;62tZNUgTj^Wp4X_5^`Ko,@0YUoDA4lJV3k6GXaCakOo_,VA%%@qp[4`e[ArZ87C*lmQLFIIgnXX`fdbS!Qdsj9_@ae>so!RLu7/DB2-[ZpDO:K.#!Z:nW[*GngI44=DJZ:MJ%"!I5(>eA'h#S%Qaq%U0rDuWlJWX8E74=p9T*qZn3.YHOVd%(?0,C""'$X\<nD`<b4pTAoh61_W1<snO4tW==t:t^1bn6;3puL4F$DclET11N%t?%ARp^W%&VdhEGd<TmJEf#^eEpbd"Ee4M-$RrifSm1sl`'^q!"(QBe:?"Y);]OF&S@Tb1<bBnLf22W>\pD`bRLDmj.#&m4UO"XJu@C.YW@:l%fj[.[K$DNb?7naQ*Te\o[KMZC=(Y_n=#q8#./T1hiO\I4J>(8"o6RHd6%S-p8S;asktDD$)_CE:l#V,^G4?G(V,]_URT\4IpKHo'%HAi^(#^Y,'=,Vc*fdq2?Vq$FS!)DWe=tGXL.]eM7Nt+(;X8$hO!%.<q'pdo.E0Y:?q)N\Q5!,]$fP2&r@LXB^09*/<n4T"rQEi7R%TNr"C2VTE;b#sfo[j5!,d'/Sl\rapK\h?KgA618HoXh>>f5=C=!Q3^\lSPl$=&EP4F0kTp!K=g0oWKSW7N6_>E]j^"b2&:UX1YPo%0Gdu$F-.0,ggG&<-&1Yp6JLapYYYW+HOX`qh:qY"9m`X8UN'9XY-,Y%ou6H$>Ge/5SkA1Q1q_nr;S32Rn;qMOp$+Rf?>@:PO^em8%C2H",k?TJC9O8%KG;KJLYNd1$*NWXmMmqq1[J23n60fJ_YF=?45;/qo]I%UmNp*dcY!mP0p"cgQQMIh3I^;miJ1[nL:T2aPG+'Eg%bC"cR#*7B&`mu\D+M$o^Mr/1Y4KKKpgOoY#m3$\V$.-6>GX^Nr/#VX2Ob'E_dL0'Kf:F@oQH]]J"#!W>a9^WQ5]PLZ!)_?lTJ(St%h*-..*bRok;Y1q]@UQWtqnncU2l&E]:Cu4&"I`[,^l\-+#Wcf-:;C+JRP*r!Led[/)E_>5Ra$lDQKU`*<u5$p+`4&$ICh+$,jrCl%T!P8KY[u@RC@E]lG))pJ/Ahe7Xu93dG9*@PAZH.rs)V>&8otWHK5-MPqPk/e5i3+-'iM[qPYOm#hFRMW36[)2ID9VW,kKu[SL[#7%s-s0]G(!qE7FWc.M^N\SD010[l13p[4C2BaeLkIaEYpAL]WOk@ap+D@E-*T^7(ZP?_T!'\K%6cB^!D^A*,NDg*Ot1`61L9+&Xj`A%?uojlYJYpmT*/Q"3pOM+N&]s.D=cjpB;In?L&`]E\;dDoeNU9P*X/%2$";7nhYOS&5g%c\hH8n\Cqt<7e^;FK\7bA["WjkMb7gW`%Gpf=m#mJl'O+U;*^0:#uVVTI-AA0;6en]D4R0Og["J2*0YO)N*`3XYH1Xkj*e.pd:i-&5f'k6'9^')`F3<d_=JnY4C"Te7_kK?6G%!7qmQmZ@OO?H"@=gZcMkoLJVAO7fk&0!T<0gGRpQQZZ_"/:CPm-J3q^h!rqWD<>?9Gq\[eG^W`)MFk!HNZ'b\LR>8Sof@\lRoe-k%mQ@6(@G3EOY;?E'4>:lCk/&Fs?6ob_X-,6L?V@?5Rf1+iq)mKQ$<n7950IX5l/0l`LDLcl_mbS5`LQdNh]`<[kG$WAGFCI6%km`M%'JsU)@@]%NI'*f5d#@$f>XY]:Ws8$jSWBs^2[HGZU*mCQ0#?T@Q/P(#p,kanlAZ>oG5VBmqpMl1Q=RgW!PO*c@s4jF"WK.Oe]7rI%_8Zjb#dG4t5SC!lg`Q,EG@'7B5eksiP$+&MW[a:"1["IZpZl_+*QlMN1*SIt1*RrR"q!h]2uTI3"-S9]%ml9)omK%e7SNVoRd[;c%Ua]7>rD6'5bK:RibK:8/>EOk`-i@;$Uj!0L*s6E/c!YYJPW9XOG_V&a]/[=5I<=P>d3Kg0OHU3:M(n>dl;$b50R6I]e.e5P*d]Gl%e-`kQSh/3f:;Bj4PS2gm6[q7E=$j5g,gIR`@VJG[`@e0epmul-OW:E,GS>?g%l@,/QOdp^daOJb`Zs./UbT^;Hj$gqdHCdQ8U6gY%+*>:OCAXTMrf[Sn`,)7U29F:4^u2p@B?RJfilYd?KGK5oHR0OOK:so\o7JeT"En@VK^(h^L]8e-/%A(b8c/iNNUY4sb4%)IT,qs6%K9:(4E>.WZH]p$J]te?`o>>[5o6`nTe%-@N)c<73[2%$]+RseETF]QhOK@IG5s8*f6(m_#L&+=CBRA\iX;Af)foGPXb*T+7./X9+%!?%k)5fnJ0M"8s(g&WkMo*c3562l=a!b(*PI'Y<U`t/Fe5.^.)YU4fILYE/CN@Z*gYte?h4[2V2:iV<\/%IrRWTt<5pRn+j2+h+Q%i**#QEN-T1_TQQ5kAU,Jb86aM7s>#d%fE`C'1aZPO^&4DV0?,7"/$O!`sPXa6gI^+cA3:M"jkbQ"_fuJ)d9+QR#57+Anq_u<4n"(%hIYBkpG@09-'Jb^+<cn&j!mksb+:,=o&Nq#A"$+<1+WJaJr;^9XX`CZiYL%-G=HS*M;TKGNd0J[&TJ6uHfeEe8WT`$hIr\N,u)B.%.aa$[]TeLc!OVNME'6Dcauk2.MCJZCO'lq16(FTe:!jB$JA<<(O;oj`!*ab3H4g+[RabL9GtCW%M-Tjk1;5:^>!9s&L]W9[OE-*j%2jb8c%>,0XTI;CWYQsj^X_EYt'bm#VBCWi6Ed^gDE2RXgOXSAud!=jPZon-m3pZV&>,/]DcE#G8)4=7>:k^sWK6S,.E0\lXjmA0P%4Cj&i]6hu>87?#XJHC!skfQRe?/,cI_5kmA#JoCpn-3$+;&.C&`t`:9#sjgO&/u!umjq<n=92WRaNGd"r1jAT(t^T^d,68;)A?[[%HH/+D@nYJW;^QKSk$Z:,T=u12f[sX+#(g,(YoWK*pgQ)E8oTBk:'3>G=KW@tf^^o?/GA"%PWb)q!A\,3CW'2QnPon<EiE*4-@@0!%M`+P4g(Q7U`>u1aXQI[A/GX7@!Z'i?lPW?;#:cLH)knYe?i,Tb5d;;\+Oe;q?;$/BXX;B(B5r7-ATDO;4s"0@Kpl[;+`XUa,0pG#%I(X?QEo</sKMK*nnn;$kIHF@B39=_G@1hY'`1lpW+TCFQ&:*/#q2QX?,pdgi/PXA'c[/T+/j-&o>$0cY>_Yfl>o7ZX\Jdc*O0IaP%kfKV/ED`*d^lb"2A';_+W#s-#UL#cR#AL.na[,q5@J_I"HXcn!Qm-`V9p8<`N-19q_rUf)?nCW;P.[J^RV6lU79rKr;$\,S2%MG<%'+.7"X9*#%iPm"04Nb0/R!9Dfn1<\7O468r;nD&ZZI///Q\PX.Sek><Zc4qn1)rpk)_`fK'l`8OUGQcVZ:*=FD@koa&a?kYXq`Bf%]-?kQ[UprT(5$X<N/1.Z5gq?A[3Mk3:EdBFG!&E(NM7DraE7gF>Ss5VZ*jf3?83$F'lbr@,c8bQ4bOIa1S\dVC=YF^On0QC-.(u^%`eK]Kn3rT`U^)2S>h[D,8;iKU5HsKJGoFeb/L.b2ES52+O`"Arim#h\:cI!X-($Mu___tqAm"Q9LdlP\d\hc+?6sJ_9p_FAb<4Q6%e@suJ40mobX[ud^3Li\eeh?HYQ$O6g3>-:lGgI;rK#1bWH+d^G8i!2TfqRmdD1X'X-?t7GeP]*c5jjRM_ur&o,[S?be78D9r/2!;%3*qhmZ!`4MZ<Nfb(-o*G%8,@DIH`^6Ht.J/5/uNU3fg+en4t'1;&&:Ae6=JVkfY?qn2=$*DXVSE'&O2V-breEAK_9%-aWU4:-U-B%kld%p\Q\K'L)gIH+]ssCM7cl@`HQ]6P`6fTK=)OTHu=QYP/I#1*S49Q`SKMu\a6ca78sqeL0D;tgnZU-\sWu"U.>Q=ZIKWW;KE+t%',K;a_9T236P=j/BmoPpScFY7+-%;SUEZ`,khuW.q#$='UZQr$[`+PV]`L[:H5,-"7p>cKc7.2<D^m!`"-O3OPkmCo_Q%Cf,"Nn-%^^XW.U10&YXI[@[[<cqm<6E,1>90k@W'G2YGe@=(_*u_!;>Z<,'1Lq1+4,$Po-2eGkJhH\66eIu4Rl%RM@`u*/jBM\2I:MeD@FQf%dZUqW_Nn:uddaGQQWRT\1RpG!6a2GbHm7+iUY*RICdH4G>X!W)aL?)df1If`+plSf0QRmN)aWS/.ZY_0#ueX,:rWkM?U)G[3MHWk%5-DpZF%[W-#[_s9AIVhrf$m*h$.T..D$a`N,bQIL'SKkq<e;bJ<RJ"[..QYSeT!:&l_Q!p0;t3]J35QQhboKC[0?Ek&PkcsQLtWg%MdjlM"D*fE^A28sigM%%nGRBg.tU/c95d=$Otj,\'ai?NKmb@mjrk(T`1)6R+@^O!r:D7.8lU_W_i.;)CiL:!;ghbPg/;:s1j(u7%/A?pEi^[rV?$D4qQ["kDE04-hFj6+Gp^%X3M%P3Fg$iR49#h>nJN\J2hc@OO,4W`'eir'f(4,e:X,#`XJesku>7r5'3dfQEd=nkQ%T'Z,0$rdCV>_\S,#f'P88Q>!)9n(?VT-4rgdWGu$OO".9EP>h?i4Y)oE_;]:T'j`k.t*g@MGFt]DmDq&@@?]?-OR:%.Hbe#aRL&7%Z6R`UUcj$27qh;bQ5/"\,.#u9@GDo=9iAZ;MEr1Y%r?J#l0pN.M>[rD-3VL^!O6]96>0Je@a_$&6/@9[GFhLZ7?cK5AY$B)XXROX%gm;o"N&U]>@au%sEk4LaQZOOiBlUC:h%SCgSAlp2MCbXZ1*KTC"MPj-lBZ\2S*W\23hJ-?2jf%:^#V&D!&IFcfMmBpR#6!YJ/u?q%X%'lj3$n`=L`$sQ&FAB[Y>;+/&q]BCnD->Z3^Mn]7#kth5*\6[Qn1s9<@)b_4L6CUhI0&N\FGOq^;KS23IDrTJuhD0CfO(Z>:/OS%K`t@I76r?En>Q(mFl?Y@(dGc?//W.antf+j2gU:18bX%Ch$VNl89k?,U1RO^GHqiJYZrVg,p;6&g&kj(7A$,f)(PJjmc%eW(")e=%O^gegKV#tu!nBSYM9hE*NkZR*AefpZA=LI7?uRNT":LkM6\iYXi#sd>=/?H/]:pPd]:<t<3tB(`*3/OVp$DqeZs9WZ`im+NY!F2C%gL/RI@>S8%jp8YK*J0b80T&/V=&Vd/.T%1<=\8Z1g'/</kd:,M$[-*<l8)13fEc[ej(EriOQPYu0@OqUE)TSb\>r]Bn3(J?KS+QG%AEiW@WF/d3AeS!'ruS7B"Y'fL0Y">'@34MugS.4b<OtSk-D#]apBKqpZ&'cXPpl)h[^VU"Wm#TqZ#ZCkOfK#f&1e/kd_3</L!MFE%8_7/:^MW5hp=4XWb'.M0?lh7AF'fUKAkV48,D?(k`UNZ$(RbdJZ^#\@,tG;pjflL[^kO8bj*@ra-9_5Sb'3[Pc"F-=L(TJh@;F7j%)BCE8^8c+m3k2mM+*-kL4r6HQic*>?Yhioe%,^0Y70NdB&47K];:C-c>]FcIM0]IV%S_5D.aeeihbZY2K)f;d#?aQ*a-nN:dTW_u%k_r*D;4>#h#VjZO`SdM`40UC,JJ*Flj1*'XW#JFPMn49Mf+IK/o;cf<`2^J!FLh6QifksIj%-p#?\HLL\T3]#";UV\eGtXfMSpNs%rV#S0pC(e!`?*Ia$GG-!A^sr5pr&BF!FdH/2s@]*js7X/iZ[7<(6aR,OfG@mcO03eWChT9l`h'B-/1fhn!TR,\JIUDIgM*<rFe%!%iM3])2Vpo3@>VIb"[!46AB,odmJ-S7"20mL?]+NPT7EN>?mh"_gEHe@894C"=I.Ta:IB'nM45!O0.\Z)NqS5V(^m6Nh50Udg0TU5%[$oc[<>=O$J&'[_*&g'GO"WX5OdC$6+l^uG:]Yg:Vl_!2heUClNmrsHdH>0gkpN:_8csiEY6WY[&VspH"%=/@K&ssWmqd?l!@=Ri%GD[l)nn[>">`F8$2+?OWO$T_G!?MuQiPfGk"qChUNHhPPL^+TEr>5PQ?6TFCK&u1GG^m70$!GuH2:O`o"LA9iC'5Lob*Bqe6`LI9%l1PbuM0%mG(?,?3-4bKYMN'=kY"$4C1`WSB&0^3:_U?:r(*X(C@%bog_]DC-VfKT6`Br1VUP6:0E,J6d2$+7h0>Ht0.%dBfFE$:c%i:KPt3eKddQ&pfd%OHYrBaQiprgKIIN)b"nZ:MR:fV61N+;@C[-`"qpQJ@cM_8n>Z$WWtfO_`KWWEre0osKFMp0IKm+Psr=l9M&^%SB-857?fq,Z(@pHb-U_lV5WCH8U<OlUQ_ZnVl6V4"NBE+r&N^XP@fGV_lfL1EWg#>U/Ielb(n8c;/`0F0,7>!"+tJ`Y-NIA;bdqQ%N>N#u%2KOV-W*F>0VV6PJ3nRa/FXo835gW%998&YjVNR/a>3Q/iC%W!L\1!S^T8:3O=Um%BG2d&_J>koj@;#9i(&;a9!a[hAj(D'%H!S(<*:[XX%;m-f>e6Wr']K`U6$P/_?fD]VoSD+O<ErGX7,*a]&rU^dpX;K7@S%0dFlKoQ7$LscQcS>U8<:]cis%6C!A:VsW[0g1%+Z?U&VPk4@@abdl>8:uJ@O@?_K;MM;%ZmX[FFZcEVZS26GZqplaO:J+6_9=r0]_I(%RZftE2`>LJ4#U""!g@H3^BF^eH$:_Y3s8&%AR*UqNr)$UL&S!Ed!rff6B4:3jr>Ng74YZi'I#'-q+-*r6aCg-?BUtJ#89X[hH#MtKP-`:,iQjkHP)DP/L)Ma;QA6kVh45SMBH:[%6&;JR-p[u9i)PAJjMQFDJrjgo";(df`)/966$Pb$;FZbrmdkQUQaj9]j'!(#NI]DT8EWH"dRadJl/XRup(VhW`:]L!$A9.*+Gc1B%66G`>:\n8b7eTf?6;B<,a=.:c%*U47.4"NuLBLhi-BiD6U]b$i4`7pN"jB,.GR^qBBg<r(W1,('A[->r$qQG2qfnfJb2S^29[rZE%!HaP0GZ2M6ps@^PM.efnQ'DaQ>o[;c4>3[q&8!EENl]M2\^OYsONU/BZg=up^#>:0Hg8c*19jnUp`L9\Y3Zm](<H6Nkm!c8ifn>F%qS]2b2L*(K?)+"MM-D--2oJW4R]$aTf0V7AbM`+6jLp_QbL.>cHA:->gl]EQ\XT<(9+[7(A<?Zu>K((/4\(HDMFre+kX0TmnT%P%%j?m5ScLD32h%aAPEnbqs&MlVJ0?WVJmcIfgHe3SF[Jqd1")-9*Ehg@LcP=XDh=f[b9lY>dA%c2uGrTP]CY3a3\-NQ$_#KW3@sH>(%01)Z<&MT(f5@)^P91@!W=_.;4Z.F`-Xs(u3)4Du6W,(CX&Hm/qQ:I!@R%c#mod19hDi/&6ROO-*&7Z)7+]%PKL#_^)=tQb/;(>8L%,0i3I0dd17"#mQ==eV9h-sjQV$,;1(\5EA7e[,R2BB,CBZ_d-44CQAqiN%G:/X9'tnT5X@*%-,3>dq_26`-:u$Da?X2jkWGCUn\n%CPipc/^A]OSs6EggRL\jVE'W)^%R3T*X>Q=(2K9IqE$RZ=2<?7R)FOn>gXlb_G;6e:+9o@R=P]t`isjE<b/ge<7439F;'7rmdK8t%TYYueSfL#U9sGpF2-SH;V:hJ3CkaRk;7ILXarG8QN:!:&d,f'#4Kq1"Q#0$'W8b`)ZW#A^QDi3+oSLX%D]OVn9+9CHe"l/n3+tN]%P&1#.FQHq8"\Z-QagMbSi>bhHbK344-sNCN&U<iNolpaqh?@(i>%00_XSP<Cj-)gQLWpY1oAK1`UY[THY$\Rh)b'&(pn@C`]4nX1%#OSQ]HS53),6(cE24JeKmFp%V?!Xi8ghJ^i`U.9>>BG`upYBjVe%+HNFJ6--pnQCkl<;mH]ks_Vcp;]%@.\P9?)5g'c7p:'!^8Si%H+YWD=f?^e>c58moXbLU3_qt6c2;!PG$AZQ*VHl(VN0-i2W\<Ga;X!sTCr(NoBD:H];]Ae781V1mWQ0cf.$<gNqe8$XnL;ibN3:[%X4QD"DqT(+0c2!#20F$1#R#Moq;=WBI4pr<<n\oX4hQD3eu>FG<fP-pURBdKPMbQC5J,SNY5cmpW&5Z4O&q<MVqZ+=mq)A`l@PEY%iPSAT;mTM@hECjU"H,="25`(DDlUlcnC:NBqlo<^isF:5$:I77V8k,*Ot_NoTa*FT1l=PLOi+G/PlHm/U(2[NWjR.-3%VDe1AK@\%UAjgmmA0Q2e%p&(lA72@-HsAfTI#o1%("C#N-JAk-f^fP?.-A:AR[JFhr@sJ_Nb_$eX._;ba=&4/W)#OZD-W/5!;"pM,kIDbc+X%%.Gs0Vbrsg$Z:c+b_V-2#+^qL5&c9$TqmRmAJ-b*)0=]dXCrO:D+HTDkPIG%t'OQf'<kb6KZPQG/L="iOs'd8s5SM_A1O`>#Hjb``%Qm)59q7GiA7G!)j.Coob9.sIPdGZNY(B.AS$)r?mFi%RF*pRh9?_@=5r'eLQMBe)gs7)#Y:&d(.qVPXAZk3`6(3LF(./k"fr(Df&%_A0sqq7jM<iGO!)\Gd9QXf/dhC`3l*`W,%)oJkNs<s=;'Z'P?ls!*256nIS"9gfB7IgOY_90W@dTZlH6i\>_!s8#NbE;.Z'FSM*\%#7=!DE,?6U_$i'Sb&JHu-d?Oc*om?b_uBu"Oq.@bru6Oa;J,o8@#"UF^]$ck\0WKi;Q4]ZK@Y-:K_AO$_U'"hJE]ao0_#eA?;'kh%ri0Z;AkU"Jh)I9Bc3"uG0%<5\+%tV7[7Odo-\bpF3u!o;j.<Q`ibiMEF4R`%h(0f^3TH8g8/628lC\7QY<t)_IfK7?0_p$-Cm5*L%Fb)UOJ&@RSPmEZAf3d>S=Fg2E$`KZ;h*7Bg:8,?#f_WW5rM-l-R/MKh"[f0<^A9hp;m/>@MMm2Zn_M)]ZQ\(VXu$Q_$Q\3i(=)7<%_ZbP'.[1HZ0Y?>66F"2V\;($])8_QRq=S%S@BJ2_m*[-h0+5?FA7iRueiK?kqZ0B``ZqPh`pFK"d)'3s=j(Vm74Wh;s.."+p/a*4%B>+%PORobDnD;@Ta2UcI;r"O`0<Z<h3$>^7M#l@s_o*I]5rVh:2\rgR\1AK9g#G;3mI"HRoWC7ln>dV_8Qp,o#.iO@.&[TmYP6eR%LHaTmPOOL*`m*Q*^])PRUX*R]47TGklc(N!;nKVV1n2IRQY,c1Z.6!?p?sa#'C6]4UmjjFO+7,kc-9Lh"9-VjV73)9Vatn*I)#?!%%5`-mlf4WmIC]jp!Eo7l7?mhk>[?uL6sUi3lTZK=K:&PAfbQe7g^'96df(@??bPcI,CJ@cFOXb:iM(,ce+'%@Q`VTXo=kDF3f3r:%3Z""9Ct2l6)NW_!>.95&*:i!/[o&1AFd0XiW.&Pg2%kCd;k3gL6h:n=?32;*^:SdW2EH6Y;-n1MC]A=a(dn<qX8;3ho;^UX2`Pcr%liC^M?h'3FT2,pqFnYK<k5lnpkDaKqUc&AkqF.h]GUK?D,9-pIb,?^-0)jU8kOS'2$C7^T5Rnq,\C(7GB]tL#[IrP:]>hnBA(m0t%oefsHC0fq(Rqt*^m2p?@HKOL6mH\'FZJ!;dpjIAWhhfaIs2`IMf^s*Z@U*7<V:09Er4S9[YG9"s:(?l44S(g[j<_j]S1e8&s,EoH%rr\U2Y5e%Lpb_u>fq?g,X8ffT@ZIrM+#RfXN:"lt[=>[@V)LR6/`k;@9DS2J?4&5nUXdLh`au1Ya%Ng[h*#H/JJF>\<P@;fc&6]5%Oet>>ooH_cmVSQGM2)$79=euqh;%-QW.L?8%?>h!FiUVNG.k0.6<F-CIF,jQoQO*iU!]uJJI47!4T#fS0m+di%XD_[BhULj2+b";%H[bKPUN9X%Wcbn4p>(3plt,^cd:kIF_D"Y^MgTO6dX?H+pA%1AndN9XW]`5n`Qm;W92g]8SGiHGY1meOg5Y+gbB<E3@2b]'a.&^D%Rb%4T]bpNG5f7nnU7e]-it4=7Cc=D7DDAM.PsO@j\a8>S,M7Z$R.<t`p%"@#oF=o!lSaWnc]RT8'`kh1DS,VpH)e\]f)LC5n#g&(%s3ZXc(UgBP]9fX'ql3b:2-Xqsh)6h%95RTa?s'tYE?Q+ApS$0K(Ydrj?$WGU?,_hdc;Ub_>A:3b-cCcj(Nf=l<t\FF&=?$NTUb[<%fU6V-f]r677C]*uB`HJQ5cs%seQoY-H.T^prYZ+tf%[g%e_9'.9C8TR4D[1&NTl@rRs%0);;\g!km>.,o'Q(8\q9al9pH%WD&Z/6%V)PN$*RHL%Ab5>p;=%b"9b2EtQM'Cr'D.2`fKZ(e)^(/9^:l\bG3`HU*I%Z+m"jB,9q/ff8#+ppWF+5F[E!U1L9$q/afTL[d:bb<%Y;FVuJMQPnp/U.QQ^WioO0*<\k9rW5*?Lu7TrB-7;qFp:I1ELEg+'dE)^aG4.BdM3Z7],kMWR!;o^"pU[Dsd@*4*SWpo94X=E!e4%`!Gn:o_?'/@Q;h:M>>d2EE^#%Uj[0(m^eBD7&Nlb#0mdH.b^k="\Gd>8F/knZ(@h@2^m*(H%2ba`qJIV+:t#&QcY69f@bpU_h$")%8lkrI\h$!QckYFWWOj0hf"&PB\qDBd7tkHc=h=^(heBGGMEA-j#T>h0'Tl*6)9M#hlZ2Ia\lHZp-.+fJIo(0`Ns;>%-A35@pD4)t%U:T.R<P)1m_P\V>RK[.[H+^21dZ_$qoM+`C;'(J6)b@*`J![ltonUrtN$=#4H>0j[)TBDM"!AlAJ?.]'_9UH>iF^C@3dGJLY4%g=%W+HWW",L^I4a,;`T))mS>CZE(K:8$ZXmU$A2)0Da*p]!beD'\u,ln0-BJUkaf@,5IgFQVfY%o]8/l@4j9:m6CcU@Y,X3L7\dhQb%%o.g!8T!!*XcEn43ObD#XVfm`hdb9N)KgOhS8X,;''PeNB<_-r$g5gPpX1JUu<i'Eg3bXAXV(s!6>>d]Wb`_+"2f=D7TGPoN1hSb$%5lS?[NILfl;:YGgH`kEYQ/5&#=%68nlg%<@DmS2#ZX-tV<b+F*bOhi)kO.K;(,;[!)\QL_$KJd;6Ug?P[]=O'n%'%;VsL;9VB(lt%I<Yu]N,2fRNgafRbbheH[iXKnl(X<(Z#XXuBMia6f!FFJql8.\j%7l.n(@+JoS;1%q`ggP;nNhoChd;`F@2h[PVNPF[/!):hih8e%lEt4kp=6Y.+5(Gre=W3&5;S<eC/]WKA.^r2l%1K8mHF38_(IT\:]9f+g1AM,l/ps=e9JnNR4RT]XZ@:qP)F4W3D8t*M=Q#r"Q-oY%#&K(bF@i2<S&.IA\oLbf,u5N3eou-,Ft82tW<qjkGG$,QBnj&CR#lakJd4`NpTiB<AF*g9!g&bk+dAaA='8G9[d?8A4ka(&Jt1?Q%(n'!4c8nJU@+I?l.^RFJ>+KdKO'Y%o939ASEQW-ig=NII/6RkT3\Qh_gW^uNkQ"rgBJe3$""c.o;!6.IUJC'YE<ETA8&h'm&K8T,%piNfU'&17=pR'c<;oda0EbWXI'A@SHCLE2\19cFk)I9^I645*eQ?cq4->_cjSKe)].Rj7hVNs%eZtdY-@C#Ng>2I2%VR.!aCr@oj%d>hL+fe)10bT*q]<6l+Ee=`#1Ojr=S-.-l)YQ'cGK+*;?*G"I_A0FC%QDhX5/t4=;pR>LL2N/oA7M90+*+=XM[J[.'7^rdkK6dF*%ZFB#MRgiU2p:@JCDr+]6#JX<IX4PD\kb"pTm]57(&*AUZHHnJ4iS3+`?e[1,MlBu2TC#rA.dcqEm;]%LqYP<nf8!/fl\gi#cSoY9%WOFm1os.SbhQ6)Cpo2TC]8uYRAaYc40jf?4=?F2ICZU6\L@t8hnf)Z;F*D-cg>BHuSN9rRD-h!jX22!Z_TJ!^4#-@!q0?H>p@n!n%6G53=Z$:9]I:CUV5+\.tmD)m:E)n`prku\=b1!^7jgJs-50^chJgnHa&6#_PD2>t*HG;pb.@!!g1]6Y8WM^'(YN'IaIPtg:ZWDip%^lqO:3!a0JrmA:H?tA_;@<H5B[FHum+(Vk;Nqqe]e2@/FV[;7PD9@Q6472a2cF<Mn2hqWAffG_$\^I-)$4jbDs005o<YlDSrHY`S%Rl[KXr%:d@%=6\k0/%^(;51sc5sK829q=C(X%@qeVTt`lZpAn;5IliQYsE@D)V1AS]'uSGn0)Mmp<0Z$g%jmA'>K\7e[Dln[jcqj%;m3hmf03&P_HO(J+56GONDGB]S_SZtSj'[]E0N?Gc;^h_)cZ;7%6O0qC4/W?n4ELIh0>!5cLmiSBC^s@D0KXN1TT'4Vou8OpVj@l%1Gc:A[6D2a9c=_Ul#J:8kg/tKe'"MN6'j7kPH10n3+u`()>8IBo>f?Hh=C7/9_+ip-g'-Rjb6J#TSMqqN$@JpB<@_meMB@";#>ER%AtuVp4K(.3F5cMU#A'_cMRoiGHg9:0q2dG3[_;]T,@s\aC>/CJ[?Nu'/qB+o>G",-Y'"dJe]R2mj7Xa<d%*thBc;;A?S>-<DL'U2%+8=MT@k*'Xk;kEf((%hK4bN0/4P8!O:DsZ,5/dc/mX>!^#!H1ZNNKQAmFnDb[rC!@>/+ofeV?q<nt:>n04+=QmNi?hctr''K>P>j%LYXUH5:r`@qL(XkY!0TG&%Z\N=1>Zj-B\ReIJLO"\!O\Wit'Gu?YP.1C8]drT0-e0C$P<?`V^YnZnNM-lfn4;-[!ebfuD!0g7TOp%02$("8V7eU@G%]90CQPs,n[uN(-eFh%f1PCF*/^=cl\;AZhA0c#"9GgXnC_rh>Qp:a2Pt_cd0@4U^l*nXNfTI%9f.=@6\G?[]5h=%#i7bm-bjghm3N4qDLYo[&qaMZF"sOpnE78S)RM3#f-\*k;5pqXIPE>k%_C:KkeYF.oD-thG;/5Q4#Z<>EpIO=%!qBgLP(1P`aPdK%^JFDtDJYj-HVjf`UhtPX^4V%joq&-)QX2hDD[p4&8iMdeXf^J,)AMpWG&&fZ$>6LWKN'^6/Q_Y@U9Lo,idL`bK9gihFf$Nfc?=D?%d.\44TJ-_P;oZhn/[';6q,8_si8:Z%Xa;+2mA*pFU),`]pMGi6<)B7u/*a<-pL1p@I_6BK7IT[uY:%PpLSs3?XZ9dX<P+CeCE&)g%_d3%Q<*EJ_<j_-Re"GTF7JO>LXa7?dV>\!.<Nl+eUgJtA^K%WO'48DZYIClkqVG*'Y8>o4jh@5Tlh<j8piL7;?nC:2P4n_-LY9%A%D=(ln\Wm$XgBk"\1?"*tHd<MoqlY*g19n^2`u3"qra%\"=^"Jq[AnY#jf^'18f7I);>]?h<RSTFe@nYf5LY)[Xo81oD*I(5+0P>/%p[t9!=RY^mG(0#%9`+LRG2Z^$.DK2rp!WcP*W?tp=D_+5Ii0>+^:p,c2dW+pVu:qCmsgdRT8Kn"9E06TgnfCH25d)FhLD*oX*t!B%q9@[^\)^nUcJc^ch#!-6A&caXlu)Iionh,b]2ehf0&)>&F5j=prjVH6ASM-7[BO8H4tg`Z3Zk2O@11:_4@6Tb!L23g82;fOq7*:t%^FOM@.bgTIgp>7DgLm-;^MUY9!DM7NCm=4Mb!pZ+6+,$f9fI>L-4A70m"Nt=F,#W:P%/1IHk0dmq1JE$UQnop^*%?A#P!$:2R#TI%b',A&F21/,>931]nmP5$Ceks*.u-cF:nT,0aDl?!q\CcO<q;p7g"3#ci=r%q-b$:REa0WL/=D_g6$WW,VNs.(0,c[CjN(LPGF!Vf%d&Yd%Vnt_k^CLN+A*?AKrf%n>Vb)O#^+b-dB@XCna03?G_;`p:WIp@_T/*?$L"cKd:q%.V#&F1/3[gZq_+5T2[/8LKAFYLb;89k<%)mk_kW;#i2fCV@+B2E]n3.b"C\4@S2;\(<O/ME"?l#21!QP4O,\`K;c4^((MWU1&AOd:'DglgcQ;0AU^T*XIp^ORn!o=YdJ?q<dt%i?C!l8dPSA^=*looYoaLn#AAXpdV&CWSI,]i=W[]$Kgga%'nJ:S6RB4ItbcB-,6peq%)9-0<1Hk"ulmSZ&.&f2Dp>:QWF'UP=,-.%lY5lZmAlrnoBq)8=VmNVhpf,aG'4Q#VbDAYCKgY@pn>[Z@D,p'j)>/eJJCYIZMPg-2p/Uhc"[(X89.GZ$R_2rV4^E&PSUaLUBplI%0rcT]r!;O?WCROs:4J)mOkhS?(W^,niSfG^,0B/G5E>U,+6^N__YlhT>ga*g]ZeR@Zdk5G^/hJ[IJ0iuh00+]/.@?9hQCfLU9hfY%S`M'hS[542hPF"^@*6p#ouXOhS0RQ!51g:fpES.7S3n[p)f5^g77C"OeK]Cc(8$+ae,b0o&%EQ_\;VH)"3$Z=#V8NWo5!bOd:G*$%c5+%FZQ[FcIgFhl@l0;u[sjiB,RNm\Y%6!-@;0NRIPo!-dDb3Og<rq16u.e"dVHEG&0?uU/FOQBoO$-a?<&bcT5SG'cM\R<]1CYX%S9soC4X&$[3oAV?bqsU.-sX30CmG;m9F=rUg/<t(,3GHIkan"Bm0&Zt(.r%KQ^uX/@/'PA(?IXVWJBppNT]Xc(\7.Q2S+b=;Y^f6%edUbg*u4sH1`MU3l5bT@[;FsebJo"G%E1QMjOqr99,k+L:^44!Nc__>0e4TIc>4YX?u+NNFf"^nAW[4i8GrU():cU0[`!L[fog]c%SLnPia+\E!,^dJkYc=mt1kd'-`d"/H@QSS?)F'Upp,@TBWu\nIC1]E!_'\AA\[88]J"e$j<\A$!9'RF(d\Mh]DuTXpZSInBs!aYm%GOJ>(:+A@bo'P?5X/,](SY*je<;$eOq\N8sEpTDBq;]QE)RYKenIPfFZ/:PinT5Nf.']p?-4etdp!!$ZZ!j_p?8i_@Y*We9N<s)L%M)Hd%KO7CK@CiMc0uMPopj/M]KL!!d5Wc^5c#3qY%VS:kmG]//DGC?s;,_uKh+s&f.sLNL@t,%WGqPB%DKa9+Dt^5a@n3)LPS&HN%3s9^Z8pO-bN4&9k$FqLXKiV)YX!Mm4IADC`8;;#=;_`<^:[&MnVAIW#3G_&"CABmceEj>]1/9p(P!Z?h8/I?70I$>;&ksfsB>\P7%msu1OD.V1*+Yl=$XeF\@BBM");^2ttF"mfT8/7Rm9_%=Z&#W4&44VC.cRT"h"qgp;_o,UnXtRNiaBDqZgA'?,Ql-(l$6>pV$GlNN%VqMhjIVj87X3Y_^hB$?YL$=gB]Znca=Z/9B4?Gd!UDD_maN?Ws"5cO2A7`)l.PV3s*+eY<08i'-O0X"fOd>!4;EZ;fX6%IF&Uarr%n"[TL1Q8g_e>QKupL!*'"9`%#PV=Pf"A@3V7UDOoG5D#eElXO7i(-"_bZFeMQ=EpKC^8"-)!/+^nq'\jNLm/&qgI&fpFfBh*_/jH%04O:a4HE?hN?\2UB6nBW6p\c?&65RYQ4LU$.P8<ak1[q!%VK7#<VgDoa_)CNQi=L!44-uT?0TC;U.92fILmi)KW5?V/rbn-&c$#*%A7[@uSJS00./djEIf'X@kKBJEci^JCI)@OLg</OCb7jsRFP`!$!9i2C`5I\I7)\`LAJ%#OK.`FPF6Ttd0_3_PEYSt3WrQrodFkX(%Ho_#jlZ)Xs6kVok3_['H4,4><kM7gE2!bR_Xo8&ALVFQbMs?s&a^ep#I2$$NmgJR<h!Ct'IHkB-W>?_A#O,l0nC^4(D.Pqi@p.>[%fLs_sb]iVH4"KF@0(Rgtbg#hGRpSDC]jUp<V4ZWQ3ZIb%$11?Tg!3#qE(9[E?RdP/?5r!2qk@D<B1Xp6?0o+h6j))IU;k14`s.]?%-[@"A@63Ea&(Jbl82S7%FuH3:,j6^LU(+%MTjQLn"7P8=I%i/1M"bDa%p:a?\"BM0ZU#NjURs[.U]5/QYpb4Fe]VfF@7='kZ7Z^E%Y_?$aRQOZoeR:I89+c_]JlU1WR?%Sq!A%N@%i04dJKOT+#beb?(;"qlH902;DS3#8aCa>ukKrM!ZUj^U;HJRd_#c]2:Lm1\U.Vcb%\ekll)PS>=,uq3'9Fo]Mc4Ge60<-+KqoL[oo?JZuGa*0bS#):g43Qm0.c`W"CQggfn^F^#=j:C(9I]_WWMe^A_=d\3,"7RPf_#%_%c`(PcPfE9aL-M99p%p!9M<7pfY3M3rHnKj.I;SPm=ACU7-hlkhFc&IL,=`;B03YM\\GlHjfk4`%3qm=o)n(tG+H^XZ9'\?`)D9>g%p7-l\Z["GQkq)2KP[Guu]=Hq*_D$queM#86Z(".(AeE!+AB;.42_YuPH+Pa9G=-#\Bt?lBKo:+,m`n*ObHjqJ`We1N@4+kJBUOSR%pSVB5B"G/:7-5qi?CFj)M^!qV)*=.CNNZtfF=]jMM8r@"D5<`ANhokEW/+a&N*JH#bj.1;%BZ9Y)Pr`l/<s*TgF.QY/U!HGBLrT1%O*9WDb<o`TS5$`CZ'3>@T,*-:H^QDZQH:?$7_\6-USZBe,2\W2gqjCEk?tJ@PqCp4>']uhOdsB#n7*sR[tX(;k%X47hH/D(?bJPY%rk*Qe20]U:Fp=MYH6,)%:/3u5K2,lle/Z'd$p'OD4E:p;nt7aj0!tCCbG!,)TG-"1,NmEbB@$hUbD80#$^hlS6+5^-3HV7aV$ss-%Cr*r.kd&rO%duAtkd!#.&i7(QaJ$e;LK<gn8'7N`"XM.6l^/dVqe!!=(IbN#cNAKRSRVCB'q\BrpaOR4A6`K6N2`b6Bt3q<\k2h6%):a66j!i6]4e,*&-!,#1o&;+`@S4[>Lo&$On]dYX^*g:$.UmF0-/i:::;kIC4?^*X8[FMg_Na`dABs:B?du!,PKHIeIA`lIjfkA,%=JY]_>\3J!StroGC3,&5;kn3U[taMrL?$,"&%^0Tg3g^Z$%&nAj)2#]dqsKH27UCN>aikOh>6YOC6Y(jOmJAH$5/>Om%<W&>UW,o%-ZO4g$^[tZ3e)UsA;#O[RirZ6S0LBO_kr9D?m/TX)QfA>dGJ)s:HVl#0E"!YH1Q\s8f)mW-jt<a9XchHZMQW,H9An)Kf&A28Q$O@%;7@]`\r.Qa&c1s?&2@B6WtV"l(,2)NAC\qm57\1opq$D\_#a-%c<ml<a[,LmqWV>XWm`GG8r\'.N,%hE81ml=PS""IE"kslm$GcE%0*Zle4MLI2jFR*4f7TKi>NYCU:P)<B/+WD0G?,d2,11J>En]]AJ3as=G^D.r`qi+#%u)f[PXU=e?e-h)&]dMAe'2dFm$V+iln8*]%1GabPAl$SUl]WnJ4%R+&g[-Y5LqE>odeRJk1K2;'lugq.H!@gRQq_^s@Mc6>Reg_2VRtR0qE0cNluX.@Z4l=,e%%@sFu,:inYAQ@%@#A1bF^mU_Y'.*F\3_fioM(=9cb@1-&dB._j]t]t;#].mG"df^9((JV#I&VT1OZ^[;rE!N3BR1Q0FKp<+QI[LHfK,7d$-kG:XI,d%iHW.:*d1QO?S^'r#'0/X.,(c=mLAI<))*j!QMo<O;K>A3H"=!Wn7Gb=UkYYBhC6G$<#H`QrUX>O-5H3pXE<JD),*WEiK6uN/BrnD%n:"o/9OZY&[64=9gJZ:qTtaCraM`HB3BT&-n&Gu*"A?(57nuF0H";YU:PmNH#4]b[B;AuTg(4;%nSJUq1?i,T>_pLiS.imkV5<>T%G*:9p#"m0<4MBi_Abg&T?QNr7AU,ACJ(2QQ[H124,.@oiXVQ!F`6FE*Rcr1VT?-mi@V>QkD(`9(8DHWt$Jcg%h6<\6+Yg/Q4`his%?<nsi'AeJdT3%@@Q8.2fg<Z0RP*.jE_%"C3V`R3A-J-3<ofu!l`:$P(2V0TO1#H8>^O3P]n+D[-%i;oPOr89"cA*@-`WjS@bD8t8%@m8Zb,#iXE_r]!2*BbK>aVN*abq`fn>dC^VG<T9!Pr;aE`aJU]g$b#].j%OS9/IkGI=I$qLD-H$1?+&&f%E'#N?PVLO1.;g:=:AM%F\D'PQh\W6'+%q^j+pI&?U)hYA!O$l@d;p.c]F=g6N)l@X9J8024i:f`;B9b9TFN`PNsLo<F0$h(;9d=r0l3p&^R,+YKk0%EOL<q%T)(kfjC?*64HI>pEo]"KGr6n'3\TqQTX4:&ciHLtB6pYu+ggd^i.2>/g,Pr<NrBqNocfcB'^M%\8S5kkhX7%c7XOEPH6F1GO(qHh%\kIKF1&WDU%)4X%Y:$=U@;,qRqCZ$EN7?SB;3(:&IWFeupbGa^N&)^ObBPd?Ilrc<,?:@@)FHtDoJ2_k<:"6;)6)97kS^@e]bWI9%UD@5:>j`G]Uck.b$Sk>tk(pA&7D"lq0A:^M>(*,^a-6oIS745kmOq.c)rWC4!E.k`r=/KUUr"PtF2h]k-DeRjfp+"<CPYs"TXJ8!%UrJW+a&\@d%&]'42\dsC@X-RW[A8_X_-Vf8`2@:!7.b)%n@Z@0CpPO=@mespiggO%p7-R0P;ahm6MLB5m&/_2l7cl@LWEE^P&e3F%9.=[;hH,Ut':b/D?7D-qY&FS,*+2D6dWZu%AuHQr:gr7SQTYu$$R5#;Lun!N.i2uQ+&@F$<1R.^Q7aNHpYY0JMjm4D-5KD'O0L82%kDB#\lONp]&DL23QM)tJXo.kK'o11/lX$.Om]56^V\DjKS'=KI4"P.sN[)Y`SXEP2[D6K5_p5ue]mOsET9=CVpEM3Am<g@*:i1Qs%3J^'i7^K?DV8_H9DWb0EDA.3ATJFE&B;^.nX>QT/Q'$:aG2d.(!naDp7hJHEQL+=BH1E\$;#>G8h3[r8ZimV>N!qd5n;Y#[nRT,$%]BL2Ve+_tQbHsQNR2L00g2cJOmEWuRWRO3]IS;aLWV-$5(:-WnmCePI.^J@Q%8VJ;R<UAd8aT%q7p@$.2=gB!H*B&dUL!cYidNrZ%:+rc]7hq<7@eb7h2KkU&R8dqBD;&3/0b*jGog:i85424kMV72la"!P?1/-(K@3rachEC%m<9BFnCU>A,>`D]S/kPq7GeIP(8og&r%'6WBa/*5m2e'-l\0io68dJ?l`M8]'uepSLNLg8;,]S'ON2P-6FqA1)Jf#P$&WKZTd*hI:BH0U@\6$b5]oXOAkq*hou>!I%%8bI?m%7CBjLACIC3-B'gO/kOf0^Z@G]l&m#m8Y4edZK[Nml-`q1*&a9=.0(V>7WF)t]#]Ik/mZ6$D?eFa)r,3l9K$/\-''dM/h*-I]F&/n%VG#Wo5f/I3RkDg#:<_W;.@[Ja?6?K@?AHb%9?O*sP;=s^2I2AaUK#;T?T)3<me5<1,A5K)aHB_K>.p`jZfse+;>nVscDF7g^G(CQ%>hO3j\TA.HdYQRu8R2L<6B3Xe0&q\1N7i;E\TB')XD`.)+;c%KS$!:A`fs2aPY4NEfN>KEP5%YKPW,IU](@DYEG!ZGjjGHn.?0]h%Q^%B4@(hSf9p_);QZSQN=uK[7%`Mq[8'e&*b,*:c.oXiX48gMnk'[ZkF@j#bH/9Z9]0="ZjYHnsENmiHb2lAoo$6T6?PT=pN@r=F%qRtLa9P*)!-RgWfC)7!%X%Q?8nn8hleZ2=MT2=kDp!k\ci@1J+D*/:d-_>5Q*o@PB8:?6rle\I;U)eJNELf<1>p`;qZNP,%;n1_\%#"jlG99h1jWUs#E_=/.gX#&W>'"*P>=8mV.C(\.?^Fmr]?^]4L2Ir5f(rh^Hh$p'@8'B]LX>;V@RCd:mKd_%%MDL"0gl3AIS>XS:%Nqd-YU`6S_*D2^5L$it*-9Y'PV:%b(R)6(=mXhc#X3b.6<0^bO0'BicE&(+H8dtT,bd2QJ+"4IO4Gmk+bfcVJcK3`WUGFc.+b(\A%Nl]+eZ.?GJ,A4ei(2(AFh^lddnoW9cEgWpbW_M)8=D%f"7;AV"G2*[]aC=s5Z_=(oe?M&04mE54kg21/:[AuH3ZTP^p$iLSO+njL%IpCAtPl3g]AGC.Z+Okq0O/(3l%.&E-B@NGTl6YE1Mb;1*rFBnUr]5mG.Q#7QJZd^6>38P\rS<k.8Z_mHk^/Y\fB\3_ogrI=%$:8W%].opNQmqHt=9T6NRE(B!Eg0Qk1,FOY[)Ft\d2;/tel^c5W.].8,A!aBN3e,paZ(dfSrEY6!*.07d,0W"Hs@LNOeF_6'Di[CEgM+j%rKRBN-`7U'p.K]r)'M?L`2\\UM0W#;ng-&]4iNdbk[S+3_mBbpKB6/E>N%1\pMF/XX$q`S&[h/!(%1X'5)rt.:/o@TSIIA*g^RF9%D`Ct4Vc$j9aM#=`+\GhP'02JaSE3GGm9eg)1$U)urksl\]\uRfEX\2E4t5`AeJuk_b@N]r8Z^Gi'<@o>=R-joh8k_*OX'I;%#MB!%@c"10A$2c&r2+V:Dk-YA4gF]RT6K5ub\urqW&bil3(-3=hV];GPr_L_">3@Y^kNZm+d89+:U.+&BhUl>1!Qe):)(!tL%7^c?tZt5%)=#AFk'7AZkj1J<=/PgGUDV1]h?U880A9sPkI)m>"R>Po.7Y!a^!`DqN<pqs@=S#M$rN&(<Q!"O)cqWNTGYZuj^#QqD=+"X*\/O*%'_L1>%%?4&fu\5D,@f^/jg[Wi,<S[8Hfs\"1TkbZQ'.VfZ,(Hc2niVZWD-72c>bud4NB>>%3h<Ac8l/4LI9.rX7h=hE4e^MM:dGq%Vqj8BY=+Q1HiFLqq`a$^mj8h8V>$A.=/"E`P$.Hb"^C^^2EC<:MtSFdIZQXf:Ua@'N7MF,1m\*)13\qc;tJu%0>C+P;+j#TkjGQm%P?r5]UUHb:p+80Nms^A&oik34<85.dGaphYC]43#4`/QH_K8g![Z+d.ctI/tBBlpfQ4N0GY!0UH#ZcghlY)So@N(h+n4Ha#3F>G&%r,VjJYDsZ_o<^?eN.f*jm>dGqkg&1kdr8.ErQ)3!NEQ!6/^(D`2/%+ZFjS!I]5t8=Oh0,#G<_EX7s;<!bMh](@O("bhl\"ugQ<J>%/^IcF*rGZp9Kf"dI6HfKcFt$8#DXSr4snDL=HBGPdN^RFcuX;H^U2J/;/jm9Vd3(eK;c5Yg]pCWqL*GSYfX7%Aqr1s.5%Jc%nT4k%3n/F2X-i"No$oZ1ZS7s1WXEue47PJ*]UH!t_eb>Q=r$$G(0Hh:$(6dNK[?aK$c,#0C%J=deY$&ZI:>#<TVp9fXT;pYE.*.EdX0T4%A6E;t>?79F+B)1DCI^a<N[V$Br:220.Qu+T2`<Sn6:et7R-.[`nM+tTek?su#CEo3c/II#<Vm(LHC>i]e&VAd,g=gVDL'Nn&d)kQ%o8d_tl.:gga"Rm?j=>#i!K;>&&u9*A/APMOPQkem4=dn\pLN<MGjAspcD!TLHMhXcZgOF^hcAp&0X^<<fuTNBj=&=38=d]QjG1!'%Fp5sEqtUJFGpqfR\bD\)!<b+^@rh7jr7PrOH<Zt",,2&erBfN@7BHdgaS0#5G7FgJMn5F7.<"bQPu2I9H?NNh3sW='n]7MD;hO`J%/#u1FUChc967QV_c("2saP<bbm9$)X%UquPi5X(=R47spKeJ*i(Yp.*ZW)f(#%N(&Gm;+;ODg.)A#sU.j8>IE(3b[I$Hp^-ou!RV%^q;[XL$AU5@<r\shAee\.Q__f@,;kgp@Afa"ZW#:H-e+X]K(Ma("cHr(qQGJ(_&>r(1>GuV;qV+OX`_/!Tq@6E)mI6"dh4R0[3)4%QNc%!*)41rbK^/O3([FV<`)&KO8RTFj\)K3m&[>*Ml7q*(1T#?Qg'4IR5j!:-sn,VSjk0OVeCL.@8XbQ?F[6Sjibjc)-]tPKNHFu%JtdWAmu:u<WKG?:ms$bhhhE&\Y$[3uTuKp\0>"7A?uJE/fC^*\D5^n.qXlI8Xm.iUS5N-g^ML)M>5cT0lh[Ghh3k%Q%J;o'^f8)H%b44OZLn)DGlhUcl,ZaS*N/aU8h`0nZorm\Jm;n(pEXc=+0>=flGs>R4b20^Y6hi6gW9`&.T5%B@m-5#TlhV&2TfQ"U^[.tLI:D/U%fCd>4QjG0d`4CEr15<eIf.VVSg6g=E'<:o*q>#(oGS@(B2gc>3+EdXgX87gT*oD@[h&fEu^YJMW7]PbjoTE>,YNNo?aLZiR@;bVH%$,b?ebI5pKA$$!:l^+$2ni:n?UHWi!(mSf8rH`ApLTB_g'DIZjqBbuH1'=\ClhV'QPr;$9^U-ro4eHV[Z``1&GX"](^MGbMXN*8G%hEuTh^VT7+%J-A\;E_bAo,cmkrSi$K_q+KR]XnMg3"("Sq*&s"dMC,%(nP33eb.+LPr<qo^EA"VO`N;>fDp'mL=!qqW9]d8BM):>%OmDQ!.^#27*oG$lH\cuqA#S^[mJg'>;b!eQ2q3aH"5!4h2Q5Xh*"H3)0>"5kK(V0(?,(25V_G!ZIXPR?)G=ANm&GMef&I^pS(1`(%DcHP%<7PoSR&bnOIXRC<M8mP3f.T3H-`AaV@U6`B^K-&+GfNY401[0XZp_k^2KE*<CpT]+AIN_[ZH[Q$^Pj]+.Aa'%0Qq#*?,(Kn%1<fnc9O5F"Wd]5#S'RE4Ro\(C?`n)!\pi<=YoF?1H<n;PK\0g`D",#bkm=UseLutR0ip\XAlZU^FI;^3IbC%q8Zr4*;qJ4.59j2,%qSZV#Y3VEK&c@5ucF6[i4njm<90XE7\KL2aV7UoS:R91Df.Oio,$>Q\mj%ME@Yp!TH?tJEY[DM^.j<Y;**s#6.LOIeAsH%uN4+/9%#`QpO`.o.g9"Vc_FSDrnIJ\J!pV%Ud1TQ_/e-,BBFr*=af%Led58IR$THe,Zk'ZoHU9sK<IGrH91M1[@I<0M=nG2LdV/:)J/o+\+%Q^5&HrD/p:G3c<2m<nJk[-HMg$a'8EIA7f>)n4Pk#Lh9gn(jOL-_9"-m8WC0[F=`4([]Dol)aSqnRPDlGr^/CSY(DFeh3!,/kGtK%k1:L<f8&$Tm<3iWh!Y)R]kP7FO/MB3$ZEI0j1\!:i2DR%SMNo_=1\^L+8tMLVa%rP9[(8Crd+@^Hdgc;5!7\Is8)G<H?.FeJ"3'E%eu/6ns7O4in#r4!k=%PJp<0XrQc1?<j"K+!:4$4&rqq%FHe#V-fO6:-L5:8Om*\W6dn-SR9,hN0;?E";lk\G7QT%g([;5k)?CnQ3%DpRV#m>jmJ)(W,W^+R&UBAR@W)uCT.p3$>I[WCs.TegiZ>Z-$I59];-Y!-bUXEYi%CZXrA$-Z!=Uhu[6(KBNm.j$S`A)%c0T1I)<%?aC9:[hV%O_;`?'8&[mjou,Y?O4M6IH0,esDDs;hp0cn1VRMP7gR;7>1qCG:[gPp2)RQP?bWen>8o)aZT_3:*9k+4cjstkoU;*\_%e]KqUlJgWhl9q+"B7%hsi5+<2TCg*lRoT7<kqeb#>5<WQ7,OH:r.hGPc'HNE:DAYl/<aGgF):?jmMq:34nH=:s'--8>b56<IkHS-%<\;]&8:g20rVkL%b4_F8rm7Zgf(Zq,q$Brll\fJ[\oWSin0`>^X"+S#&%,K((&:4..K%$7pi`qiJ(Q9,5Chm=ZS$_ed$7JR@EYO;%>'Xal5(om[mo1'f+-_n3p.Bl&`HaGcIOm`;;fft)cL2SEiCM"UE0^j[k1[o[!"Rn?I:&)!#dE\br+7"Wm)B6$',6-AaO7'n?Q[)7%*ZgQnZb/g60DtE0V_<:9b(nm!nqZ7Pb'UN\"8\qP:>tXL0L4kg/"]g/`;Gdnr.9oP^+F2fCN!Q5h`T2SCqnf3IKu)gP;.9qIT$.9%ajoI3W\<Jrd+p%]UBo[J#ts+"^%X_dhTki,RE"F7]dlsW'%ZeWQ^%F$=P-lKIbC=Kh:jaJRMSnSd*?B,J:^rqBZQI*#>9lS76n*S%#ld"9$Pp8MWp,l#]fGlBGFeEao&[EelL,UpCR6oBrY@Wt/*`6%e>1+X&;L`C!1"rIG+PbYm%qfW?Vk9^`H&Oo'2.ZR/g]C*egmZU%M^bj"c*A&9qQW4WA0];+@!g:sp5GMfeqSl_ZWan$>Cq?2F<sh/B/#/5)>S]3BFHmBX)0=+J(?)Xh_W9r]8<07(N\KuVKe4ETE37#%m9]VVCU_5'RCgH""]G,G(Ur6K3@Bqr:-\1<7Ke5!:FC`c5sVC.J[R0X)(,*L81<E/An1BsZS2(KIK"Y3@F[NsXo,b;^OebD2C)'O%cf$d25VdG4OZ]2>\8sE`Rs9"9iuh13UC$>hiE][DIVGfm6[HaEq)<.7.2H)sdOp<d'u?cLO.2cKX6IZ!B\ZpM]m,'5]NmU"]%Hnb%=Gh9A]6\KP^En#Rc:R)>"$W3P!9Ut6C$4+*N;!o;*+duF]fcY5pr$GD9sAArj;4;lI5,6U4`%WQLsG9Ik;O;#LiWVuH_)%Xqajlt%LsJ_@@I*RO0(.hd_Cp;BiMp76JMJ+B.9lrf?eD4\+R"'F+6I1e^,He?Pj6U&mGdMFk;[_V!)"m?P@=8rSEOM0;[?9SEQMheB^TA>%AR\NmnHebAq/V-b0gLM>H`/Ee<0<1WoZgDO2#VTl'ebcj%p5d:rXl8;//&Q(MskNS;CZG)Ok2%lp'@]g58=(Zm@/kUWVXhe`?1sD%N'q"YdGK-\k=pSdNR1=t)e#mtmV3%93bNjla$tm.f&0DdTSoFW#PE][8KI;[Q+/57QppF'cpN"kEtC4=;eNp1$"[lW>m>G%q(Ls_%(h":eF/$-rT5fh7W^uS)`/mX?0`*ZW/mLOS8.V_1>A)i'/[OT,MfD+I6QKe1pbE]O1"pZ.N\W>gcPrM9&!YF,&#Wi=8G8<).nT2!%.quYbGEUh-2i6SE]T_u*gm@PGhFW%&Wf<'0o1m`G7<JAC2=Dg()_j6Wbr\McVV%KFC>MO.G@>gQRWjqO?'l[8oA0b^Nd4[([dP<V%B:t-fhH$+n:Md]UgfP`C!UZ-@Jd8RPUP$=J"1@.or6kf^Y]U_-nAblLPdWYL6U?dRQJeh*fk8E.n!</<+lpeGoke,[n['l*=BA$'%@)MGiQNl()msabK;tpUsTJ+UG@[,IC>_lm<dI4A!^;$=-Wsd#Gqons6ijmg*;J3bGBY#<ZRiBVoa)-7he_[EEno9]RKe^2<SLbYJ%9A^PIP'>b7#^)NjS=T\n>&ZX^.XI+m'['!"bsqT'I<Tc,=BmDi.?rHYFT(:jWjUZ#1d3ktg"gJp?QL,Hh;WI[]RF,=g[jdV7_Nrp%-n[sr,q0>KM#5HPn4_1(jue$<]C]mNjaJqlX'Xsom;]%LqYP<nf8!/fl\gi#cSoY9WOFm1os.SbhQ6)C?rJ5b]h5m2)a#9%2R!(M%qq\6HQ.kB.G.+DalD+[24FMZJqeI"MZg!=cMlZ:[MoPJ\`9_@Heq/E.eu2VNSu1O,&Ld3;T4dMFO#6N0B=dZ>q/*b6Q0)BJq0m(&%X8W"a`CfIJJce[C;CP:XC`/j(2qJhXrNPCl5BZltA0'BrFCD:)gq3@<e_.Lgk7<WI1^rUH(Dq9hZJlX2d&8W*OXHu&./:q;c,dZa%Z_UP.5$$;<m4WftOmU#FYMYJ/.OFoDG*t`')jHd`_DA[;8K"H$>4=n<kj-%q9Bm%Nr0^F)l;(3@S)>5kq-dpr),JkFo.'*;p+kQg%7J2ETlRM\'KVO&PVsh?GVm4b)?/!<9iM4]b\@Zp;s88\dI<i/LR/OD5:$Sq;AYDdKILn9;^9iKhcDNFch&u:SCO7IN5Da:DT2)=h%;`TGQ0A>ci1ZjuS'FCCu;us]+mS,t:7iT_$c2@EHrOTSN^Gg/6.E1W*?G_&XkbV$*9P220gYI=Jh.'?4]oT'@4asE6KNr58%pq2;%IX^m+erO0Eh/.SP3n/+KH:Yfjc^46IicI1B2hR=9K!g8)hct4)@emlMdb+Is_>K?IAKc<c0@9IT:R&CsFEq,=+hp_Zs(:iZU)ni0%nV>^.[L]lg:q!j&QYW_*p<V4dD?&-X"&u)mVdIuV0,r68n&jIG.R)op%<!H]*eW.$+CK":a'eTa(_%N(rYWjC"S"fp*62IU+fO6\%@F/][p.;s$l3ZSYmg(+*_etfbWnYL1D+DIk#s)3lT+'L-V[8ra3OOda]<.IXAted1D(G5g)70=1W<U-NFE2DED+D1)>4XHR;eL,t%Hb.6f-1B67lZqT.QB%I*h<N)t=[)'J>GYg@dl81jqCJ=QmIK)Lj+@*lmFu"/73k**j?+C#Bu-s\iLLaXnOpl:BW=NDl'.6]olUnp%F%3g8F*0dR-VEW_*LLtX\rW%'`=3Bbc'K+\&TmM8H.EZ'MKf)Dp@?b]&)_>@LN1b+Ssh?O)H:Ok=_o<^hpM!<?;urh&K!#^Qbs>)%VcZP-?o?8k1l#jpEZs5)TtHL11)KPn1W@*#FAXJ=NOB8,WL"WY&!$33SeUGp=dtAT-lM<.Q0F"@G!UUE]>-r@SilM^<I#a4_DLgW%/@Ko*BPBW\;AZ;:^S?>2`DAY.)rXVLVe;hHk^RYo9#(&'*BMu*$!0?]KuV-#^.5qmKonmS\$NJZRJJV;^7DBCX.%HbqKB<U*>rDk%I61ZfL3%hqqKB<U:"Q(Kd'p?hm<Db0YkiOO[a!b5U[-[fg3-nN'R^qH(H^Vn/\e/%55Ele8!ti+5%r13QHZEMcO32EMSVX(96c\:%e:kI,AZNgPQAsT%d`1]+hf$@TK@_Qao>6Wi:R6\]#]-A?Y=h8F`,-?Hoek*#k<q9P0OJk#S%Y^kQQ5k[Ua&VbY?H$L$`lNR]3L_h%DUW0#`iQms^AM$KhC\:-kKM)r1]2=+V"eDKFtW5d^I8I?q>P5(lZKoCWQ5X9SX"KYVr+G1I9[&B@.ol`n(#8oYWhc&rF5*_8p0D5%VPaH8guuI7@0?C9UN(AL=KVPTBG^:bs$q_Ai1I/Ze.&TpfJ`ZF7VMJ#0O([81tkBHY#kl#j.a3CmV^n3]6CBt>5QY*14m5hW1N?m%(70s7p&`s^.F,eHZjUOV5L#lLklPIA;:(3dn@u1,JAKj0$Ds[$TFHtbpn(T-Bcd$<pETSprF`m<M)iFsJ&4G,_d@j/c'%,?`IAT(%ieQOfT3Cal]0.WGQ;d?[a!mIS<jF<Ppn3-G]qg"8?*m;?A/^2*1j--8S'];5r0$Mn?3mMHI&Ed0\cQU^4K%8ONYR.N^SDfLfX(Lb%(qa/d!6b",L82B-LP/cIajD-(./UAf)k-PF;2uRql@iVl!N]E0((n?6Ka)s\&353Q(IQHa-1&W9rWdS`T^Fk6dsL<0/K("Z_p:fo%pJ&Mtkl@FBLdA(PR?g581/&35kQ4.n!MYi!a3[0Z?kBoTTSELM)"aJdkD(2+-u#9ULKt"td4@@!^Q'C]^58np9:k9-fT0CF?oaNa%Pt]4S&8<25#0>.aV@3@eRLT5SAkNE(&N[3l"kKLB_J7j;L4*gJm=_$7Q<CM@_[%Vd:V[Y(&Hm\dnj*\G!()Y0^'/b9IF9_"("3;=%l9:s!nc<@?-JCp$W!@XRFDBo!Y#d_9kal"!D>:.8jQ6OKTTrS6I1<'N_k;gf5G49KdL7(\Y3RC["2[?[j4a:!#$:me329&Y5do1b%1gE;-n!.u?%00Lb"!UZ"JV[agQKH(7D7<Vuc[bLIc_N!LJBq]NCAr`pj/9>>oViuk>8F=Qk3<fiK0@gpDff>>\V>kA\0]r9-K'1F%5Y1t)9:?<B<bYCdFC7`uUSK+d)"8?deR2?NA'4cQ`jA@0$P\E!OnT8$>I-1p=<If82uOpYZ10X!(EM%?WePCW/&WaXhgd=:"$;)d%n:3oaZtP5`35"(4!k,Cc49/u[1s>W$Sd;Z-_e#5"l-Pd;/&]_UfG/r3-/42diM9^#WS)f-d1Cr7@KR_W?j#m$>7VupfQse=Rrr>j%i+Tr&=Bnuuan?\rn81F7Se$'">n9bH^cCVJYgk/XTL3(qM`Uc&,9%u2e3t/'?,2E\TnLj&JO&8,"&s1]Y(>n%+6Z#"!Q.<$+@U)U%3=4=?L^2$:U_*#%OJWI$M,F`#Opd7WDf+Q>$g"JuZNQf_Na6[!c)8rsg-C@p#ucEZT`":9fKJHRK-+e3YY<Zu/R""m!kAD!Q$gb2%B\.?a`!#S'A%8m9YSNT\_0hk/M:;\b2dob$Y;=uo9K*a6]k3bQ?=]W6FB\h&\ttZ#=$sj4!#%U85i*UjJ66(1,f^!Y##\_4DWm2G%:Y1.;I%MRZCCoWYF,?"jAcl\>TQ2nXV1qke"?KqN@#e!QgW63kq@M_P:GBZeA3a@d(*4JM/^89D\qF*l2.R%g[ubWMU5k:4%+/S[%0Wgr.i.>qr$k('3*M_\AFEHe#E3+m$)K$5d%JC2)5W;uC1=(Ikr3N%XYW@j?`;jB:R"fu"+iG8&Cu#,&R\iH"@C[`0$V<lF\W)Bc%5nX5K2Q.],R&kO)1h?L!Ju4Hn^f<If356Hk*tQEqQ2hKK!RlXli:%u&L/gTr%'pC*0sR;0JuCVF=H,mZ`n1,YN73mZ1s^mYb62(D%j8l?t,$5U?4s*J0M\9+cM5MpA8.]d8PFMceem4'pg<g(:iAj<U%hnJ(7KTd()WJO6WFWWB0u-6jVLVQ=QjB3L.&m9L3`<!?Gf3,!%Os(SR3'nV2[HTaeFZOR_M9%0_LrSCY-=-m'.bTQ1"'WXY3[bNWLp1;1+Q9CkG1TiXi`DS'S.*#B!bK5P*8#=smLBR83ai$]#&OG"%a#?k6J?sc$Gso1&\h#Tg7N@q2-7L1R:.L<LZUQ!j3?+pAUOm#!mfS4Qg-=g!Zon0ncTu*USp_e0Nh++m%$Gs.9I-3<1BHI+jrlb$%7enIS!6`(YBS5nV+;aapn?I&e$/:'H+Bnl/(n`1B2W,%T$A=H%j7*62$g*=G&)Yk$nTY&nK!,0M!BC,g>!$u)K1OK3>VNC`j3VG;%#pF'R8G$`7_]ZTt3lh^D(-6-!E+n:=6%dNX'L/f]ll#O0GTT.+*#9bGW,&7>;B?,E'FdlN84We'@H0V&e8.7e5QcTO$ikfk_ChM'%EA^p;&*g/C1B;'j7shBnXT1[bO!=EdH0-!Kaf%)UOan(c`\Up[5R?(%T=HSI&W$Ze9)K8\$[*)X#\YQ>M5&_4GTJ+4Og[pkjTt+W%3bTkOL.XIf2RJ/)dN.0EPklXJ6)"F>KHJ>==sW;b`)J(T;MZ8+VnS1`Ja@>="4(^&OK&$k,2Ol]THY-`&\r$?m>ah;*b5ML#1%5.%J=geQ@A9u2U$;pWYZt(T5^qAr$cOOb.Y,tCQ\$UP8[`?l\-Ml:Fe*l#5WmtE%pS=%2CdQ;4<49tOI2gbl>[XHD2SOZl1u13!<%Wc%#8sHb!5ZN1QnH3O!V!3NN#3E)5>ClhnL`+n(PUhiU!q_GjD6OadQUVAW]m;cY\M$a;6c]W6-L0:]T-bs&7Ha>Oe1gDP#u:_K3F6A%K1-UqDh&$iV.]iX^n-DCfcg\o7jA.e[Up[]34dNDW62MQLH9H=Qp!c`gL+;*R#X?4\V#QFJIZ(=a[7ia/]Q@N0\@i/@I;lj!uN_G%:RH`4`MIkMm_F-6%Y/-n@b\;-.tlDdKcn&RXiRM]W$fUjQ6sh#L/$^=RRRW5RZ"*KW:N?4De`.:jcd]YDH>)<.%:BT,A;OJ*WUP[%YXK+:\2M0>e=mE551aD&"/[V8Cs\J8#gCXb--p_`<]1A&o4as;VF;'J`D[D&"R3&`*=,0ko-.*;/]2T?].+547OPf?_#UE:QJohl%)UD-N>/2-,Nl+EH"WJ1'7C.&t,7Wq_!H'P7/kd'WH3pPaIN6jF_cD"3Gs27F4Pp\MI*3)EfC2c(_6gKSE!.+DT(cnQU4Vl"0T^u^%F./#1$YV&N5nY(a#@ni?n=W+3=$g;<GVHDa'!sE@H89!jiHHUmODRJE!9&Jlq6%teKV9A(%qs,r+o!(6/ml*;<dmh?nb&TXU_brt%#$Noui1]BBS#55g!<t$4:-Ddrq4Ip"R09T")b'>uS^Ice4F\;3:g*m0>*dSImYYS$iF)EuauNAP@9:iWJYS,<8!503p)B#DPV!3@%e+US&jt!Rl6j2;D4nUA/*c/BAMt]cD7(41".u[5/(oO%+(d`96IY'Um8%'DEr)a=C(5i)A4L?*!+eX7hW-=@qJKOu*'D:Q[N;-3+%[06AY8m9/^iUemMCXGWTRQN)g!<blIq167tWNAkTG+T'@GHQ.d!<I_.$.@:1*$L(]%Y1W4RsRP3JK<I5`U)[>+;So?^8F:/%HqSk%'L8d*:TbU9>H90<lk7M-^2F96J0"*4YUZEfpS4J&70QPLMAk!/2&&Vq[\9H"@1F5[0c4`,:8a57%QMJ;WGCj6EC%muFDWe>K2W1Q%(7^P6ep2N0W(.kCkqI+2n9U07,<X=qg$;$)+dWHF@4qBWFL3oU,R@kQB*'2p,T7(7&kBVD[5^DnB_`dq'GrCG`tR#:-]!fr!*!DE%OU9&tX3L]Nc*fbuKYZ#`4>4B=/$qQtP+a7FT_6Sn+=6ZFkm#<OEnieh%0#EeNt*5_L/7*CXiLgu)C(>)Xib-iaAs@fLM&,#!Q6,j%/]9E]LuE##:fn[.O+t!9#R[kh4?k#bcs`h@`//F(i=^ATE9<HVg4[h4&GrCfcrm/!,rQ&6m*"/pAtVM>l!!0/J2mmZ<[^FFf,Vt3%)ehtP,`>nikQkWQ+-W=LVZ8ce)o@-^I9.KfG^EoiZog7NaAH\KDoe1RP7D7?%#Jk1P]0>rhCXLqA=MZS7[Qp+U4NlmS*3\UOa5>V%6)tkOM%0Fa;MWR`coS&,[R/<)bIH'L6pM$'*_:%/?P#LM>,!hU%38?8+oKm#I[c)DFHc6'>3)Br3P)*-D(KcA2\Xb?'ngD?N%DOO%+=fkC<MIr?W/^"V63,F?m?WC=*Y"YQ)QT!lkOQ-UU%g8#P;Lo=_:Y/KhL5$KUA<gTrIp&u:`'ICAdLl"fUJNK)HX@D5OlAeP>]U;%qBdR#c2i@5SeDH`-Ge@!#gB*,k6QFdF=0&LE=+b+q#XCUS^n4GM8NLCp?\1WDS;#j^)eboN-k,%O;K470Fe<<$en/U)Nd-.ka[Kl%>QeGj_PY^8"?VPp>(hFrlR;CU+<g."7=h=!ikSXF#9j_dF;98&e`#bqZiZHC&fsM'%M1t0DX,rOb7Ro5q395J9("NX5;Q`XXE3BE%_?B\]0]_B88ZE\?/D*7M<4ZhN+jBOo2jF>BJq5*nZrll*dGFc5/#J?P?MKHIM;t'J0L"m;iMiq1[agY75bQl73,`4!kW<mTP0==#%!#%L*H5$FNb?kHD1\^@Y6%"uKH%fRH!O;jE"u).)^24'XK1W3Q/(?(gc%7hUmDCb;ED%1V13@\YA)AVN,XPbI:SJ@bW*6VM>tB>^%66cNe>-:/G.8V1Frs+-iHp7bR/_tH?h5_L]Wi$d\'5nV67tJJ.kSM:_';^tFfA(c3g#VE"M!5l&[r`L?h\hSMOb%XuAD)^X%Kd19%#@1ArVqE3r^[pPLALe-/GpXV2#!;3/f!pBb$=?q\VO?cZJ--6<.I;ms)s"LqD`-Bq8;=J7M?$p+L1>lJT"/csCFsFXra"Ef'QK0D%3(ldlK>"#cA)0Af'^@^"\qVYO7F?I72e<#CkH9/R#qK5r$6:-e"7iLds5.;S/cnRLW[)Dd63&p<aDiFeMV^T#(#%#iJhWba&ep_Q%@g9MsM1,M)Fd\U4#TiP)LWUr)i`P4K>Ckp%p_SAo'5q?:(Sk7=+lj&4H-a?c'O?d:*-Pa?DA@b;#1F6r<U`YiV5;'4rJDZ>gq^%D%$RAjk[R)ef68Ls3$K6kE,P7uYbgW:-+ED!RZ)QHS?n6q6HhKh[.s1PIA3'mk*Pr4Z1IBR9"Imq!?,]jb.h5;F'O)(0Lj!UAQ0kmh%&*uB2nG\19*IaokqM%U&rmUGVBhA"=hT_Fr2!6:l!,Z(E.-8=[1\%JBULPE[A[B5dfQY$PPtJUOTP[:&2R)W]7\34dhjNQG0O7+j%U,TqJUCu-D"5EM!<_1cP'h[b1aank1aRWVB[I<;t61_2A('B91+Qu6aa%9sdOX$=3*)mapXp,J.@,3!MU[+T23-W<sH,rVAJ(D7<%^EJTHi\Ssf%XPk+'\6PC8n6GCJZOUb)ebY/FO-$I>$"3?(C^gQ_U+'2\sH/G?uc;=*(sOiUJ"9?M(,##,=N#aSXI@0'b!r6(fkbc%UUq(=UJ/f#7;.4hd0o=6o6`J(db2kU8et5FS>HQZ+#V>7KqX^aE?d:))-(gi\P08Qfh"g&"2iJYJM9"=&Al,,I+qF.h;pP\D;m\[%HAj6T,_.bo*MmQ$QS4l?a@?^q$Q)_NSFY`BZ7W_>Pn<R<!TNWE6>>QPjZW8>VbHR/6Z8D?/jaLX81P2R1HZ#Sd.e@]4a%Oq"#`0r%7H$)QJ(JC#jK8fX+:gKBha&V<E0(o"QV!eIU2W.9)GjNKZ@HG%S+(?Y`J=2$Y./p*#d5'Nh,@O7a=,b$i'<a:jg]\`XeX9N+igAH%ktD9A,\[Tu,Y\=3CS.,I_Ng.Fnk=UW&!WFm_TkNQj<LerCc6^U*%0o'5odTK1GOW:k?u,o*Q"i;)2(.,#rQfk2L/fRC4hMn%)ed=%nT>7/\DUY5n)hUAg-tb>DpaL`$t4Bg58DkST#H7[k\7>"i8[ELoGY6<l4KI%J;uCCrUXG:^m9WIDTGYQINZSe(`>"I0pme^6h_LY%YL/:\p3>$Nfj=okQL?LkLhPJV7RniCC_'XGRBVuli"#r7Y^N)^L%(a"&6/a_:e1chgFt3cP",oLd.TDC\ti5'kUX^&Qq_t_-E]bG%+^QL`^<TJ[oW[SgVNABIjQN$^4.tc_7tqE*QtTNI"9<8%Vq9I<f$LU=Okj_Jd#9"QJ0ohDG=!o+%?5\REsqpr[_nm+()!Nue:iP'%MR3F7dVK[O^54d#ke&c%p;U`VQ4`S2Se,5,W3?pKc;fUeT&tr6=m/MTGUU3/79;B$0U"Od.3X@5PtDR[4uaf-%CWJI%BeY?XGeEV%qME)XYXH`7Kn>6GMSioWZRoJm(u1iuN;I*9:j=#"SN,]lp&rh&3u`)paTLn!3oBAshY#5o2<KPcd0m"1LjL6]ckdp[!\t5)Q:3oQ%>:)H3KN&_K3r,m0MOt1ng#D?/4$l_s3aA4\i4`g/JB%Wolpi&H)Cs5qRYtp0!5ZuDp*hGmckd;Y.)*4<<sj&,pM2+qG(:W(^/BS.%q@IufOG0ghFs2o1H=*Wr+Z`06=(p8.)N%')'V3f#(g(E3$YQj*#f9r#Fb#$;">LoA6;n/2KOA2mlesG#5l_S9E<m@oV@^]/Md0VQ%)?EGl6p3ReD$kK-flfc>-VnXNjKctXF"j-#6RSPQXk<!U/oAcXLi&%P'TRW8HjBT8LG2,f#U'?$#`hT2J5I`?HeT[2">GqVDBMN>%N-11M$!A;$[tP<@KTH\&X+U@)6O9mJF;5A_R10L,JXJK,YLp+3?$cV"paf&H2LH'FlWQ7oEcg>!X!.O`1OMh-P+Kd8&h*2s^)8'u%`b$A@am"bVRA_&Y6dV,:,d<-1*Oaf6U^!"n%!(=bB,1_eib&%3YDSs?VCj(C/-ZrE2'b3,AMSo`OMV:f7o1V&1]tXlP6*Xp,dg-N%1TYHgFK'gh#H\mT/TqJX7M+e6(gDW%e_gW&60gQOY(`*468a;C8T94:kU<Q\;P&=%#m?r-m,^?i)eDlWa<)DF'9\.q3"]aVO*bQ"%)&1e;8R[02YQXH=JMj:4!S%k>Xji=`+I5ZuPK'k"N-Fi^,AP;D@1^aVM4i6Sj14S,187*Z*h[s:N8f8S6t`+Ynk"@d!\KEVTC>qe%AYIb_gecfM?`Yam5W0G"g!"Gk-@;eo";??$&X[Ht)'W$KFNBVf8b9:P`lA`IW"N"+q_-MIK1>(fiFl8LfVU_KLWRu[TJHMfcqK/X%WdN-DrpC%#SPBkkL%,ZSbiH)BcUb^>"Gl6))MSiZN_9jp0SRa_K!&>fK1_A/KE_q7"D/iA7>S.R4EQ#FJDk&D&UHDiF><*Y#[%OC%(168UQ;m=-.'=&%[$&<Q[%mss<s6s7@X"mi)H$^2jFkmA1=6b*Z(I^5KeSu@^P*__ra1aMMM[#chnV>dL(s>WL5F@$6=Fd8L/dWc%"0[E=pVaM8)H$iN!gGSSqM!$U+N:'H;/Q`6:=CT*<6tgYHb@*%]@$,$F"Gk-,-S^J'+j=XHLMB>S3V#0<E$beU0QXcI.YE-Xmk&u%eO*gR+[RgjN%&!=\_Ip0$JTQBXu*!e@DXE*AeL,:O:i0E;n,%+/KV?P\T<G54Ok>/\uIJRo<LqT#`L3#3h?,)0u[9EXrSEZ"S%2G%:W?B&#0)TN'*Tn3AShqLH_>%+\sGk#O)9YlDWEBM@:6`MlF.&:KU=_-kfj[DOs#YH@MIY?:)jINZA$03d/X1el"=]s@&PdS`/B&%%dBA4+'kW:.D.P=_lW%46E4TeO6Y0IQkoL,-O`\$/P#r\u6ROHHN[ZfC>qW8n69(9h_Q/o%4[%Kgn`ghCAUAYgfcII27;UAr+:N'i%)FpL3ln/t`1u+pR+1-'7HKnX?TERDJ5T]qldDQOu@sN^P70aP1#OeCLoC+E/"_4\=):0#5.fc^&;-Eu-5f9mlSh)>gjEPff;JG>'%7>t*&0RCPl3dEFO&aq7^e!@%$fLOuf3/=/lj.]aYmAX`HEL-_2<DZQsRc,kfC/VFPB881HrESV(FYle3@%WTR&;mfrPDb'&l#E?C%!Dt-FdIP\h6g$S/=CC<J84tp9%8$WiSIi[3U$nst0U;^X2>!VQ>b</pAB4d)D.HF1%O:Nu:7A7rRfSc+7&DhU77`Q,a0qoi$shUs%2$fPbVPfFDcn:g%RYTl??,$lMW5NNWV^1K'0Qa8rEgPhJ'@.VOV1d@?s1j(ufa(##L7b0W)rurP&.Z.h+?a!7=BQ?Vm^$2%AOcqo%WKP<V1"c3--,6\U&gs@L<X<-pEcsn($J+J"6%M3`&,hD#=cN;qqg:*&$\WDeD4rsePS<;T[OZ`Iki]c9)MAqI/l'tV*@o4UB[i,<%@-ASm:\WZb)i!&S?J)c0$7!d749rOaTpQ6n0W9,[8sXJV%>c$H0Y2l^7mA=hU3UP6onsd+WapJXXa<`"(`:7HPJjm]Zk</_j;Tn4%!^IikmfidC"!%kVQYd^9E8WVgDN59t>b@>.&`l@B`#Cu$/3I[J*/CBd/?-bBK&OeEB44UQV>t(s(&G6<#[8?&??_1,4HVBjf6S?^%/6pX?)$ICP'N!HH&X7N`0:G#9n.Dsc_@NY5_\Y'^J74`c>'#_I2`+NlCgt-J=_k(d:@rX`M%u7kTYf^#W+qk]?^)^&'#-Pjnj>N-%QS/R)Zl5m\1CNE2k!>+KNZUSaflGat(GnIdfX882nhm+=b^"Qo)1jQV8$dnIN*7145NT&3Sn"f4erSI($sI(i$!e!BBG5-^RT^U9%.s)hWL=#=(o!r7l]Pbm5#7s?u*PPVtAJPGS_=9^lX7?Q$^ek#FaA!N*U5QooVgEPY\O9^T4?Q;0Y]Q7?k^&/^Qjb>VBrnNX[OV#B%5pms$C^%DZ6Y%Ol*)4"NZrj2'BM0X[QPBi-Q&Ds9nFhsJr]i1Q%_8ehbf%:&T.V_c^)Hgid.gW].FN3P&\C?N%]7G&f%;pZ]tj`#%=(;O*na]W\n0:lAm=I5Sh].Ba@&P9+jDZB'FZ4/[3[T4A_^Y=2$j@T(L7#EGC94p)O+M(4VSNs`LX'<CL5CJ)6mM'c:CT2/pnh"&%T9QU6;5T4U5T$D#LZ/tU)BMe-pnTPtiD9kOPOdpb7=J^iLkm[F9jD\G&FbK)6=U`*M61TL%Y[/s,)e=3L&Am:k_K^:UIg;G.Km@M%?,]]p.Rnk`d]F4V#b\E.:juk?S7)bi<$K;#H4^<-""8tSA5b1gho2um@H;&u"=VRH[8A.U,q-WVqEski[A'>h5-!!UQskQh&^/(*%,';Z"a_,&#J\sICqZTUCV/.pqM&hX.'+H-$KG]o*=b-8`4O.nVOD$]:HRW7jodB`,iYFmJC_:o$ZN$9&B>mJG"m-;g18)L3_-/bn%ghg92*/rW=e]jlm>9lMc$;FrZg)@^JJBOj$8IccG0Ua29M:`;q;o7TkbBAU8'(+N5KM@s=frNbl87Y``l=cDKY(GZSD^p'YR+Fr.%f$g$`KmeP,h^&<lZ@f_[OV'c_a.k@tOJu].FuJ_:B&o,,8ORK4Cc-9ILM`,fX7O42'RrAc>iKGQ-&?J:pl*%L9Dm)o)aM9@c9Vf-%k`*WXNopum,@o@*7`bIdT=Mi3M46u+$bEO<c<\O_StKo,0%mjt0W$k;!$.].-Wp*_pVM94$q!V5W5b:=)0f"2ZUQMKY70W<>rRF.%`^6$/rZm"]0Z`u&[_X@.NKjcAn"EZRR##:$j&_C=E47P%#9eIhs*ngrQJK-4,PVH?#AsZ8!G'ORZ&A`s7Do4s^tB>/+WE,3J<H,R%cW!ojj%*A%?MV%lS28K[RI74%Np+#%ha:)l;9*[=m7bqG1BB[W*VVQ/=H6,]ggtUENQQBV`_\J<LaD8WaPp7F]e]r@q#uC@=37\f%&J")"p17IX:D-(JV4-uDq'O+g5iE=7`,u&HUmk;FiH(/;SXnN_)LD.XT@`jXeNt&5GcnnjaeN?r$TPIlY8l3Zb,dmcD/t.@4Vs?j%W:ZX`h,nmH;*0dgMIbOA/CV%2)C+j#Jo0I;]>6$$B]7\c?JJD`ZMnh)AKCl_Bh:/ji-o0jB81%K_J[$B_TgWa,IeS'>qq`p8^+'\%/`S,!b?26K"TZNr_>m5f3GZoFP[d6&*P[7]?4\8k'".a.&3g-2[M?&^c$$#Y\m.1+gjK8pJ2cAM=F0o]-SG=@lg0,Xgj]:PkN?2:%]YAmnmbOKW*e&V8l'KHfk<j"+FqhjqX6r]F?XOWL1X*,+f-()P6[_3L*J/:gi8GQ<p7VCM,Q_[n`44o$jM8Xk<MLP/jA`t4)2@=+%GpBSNc]E1CY;9a9*ZD[n^!5FOZE\2`YUl#4n934/45b"DkO/-lP'>-IqGcM1mQ+DWBq6i._h/3Dec(H.g`.C#,:!EuQ.;"A/1FF+%V!igK!(5b))(=NJmpt0&NpG=+oJLto1$;ie<a8VE+s+,l[k#uIcP7bh'$M!HYqFu,$EgW=GU()fdt?4T1Qjd7Ha1<60c+L/ruCp*%Eu%SaBuS>bZPm%YRpdPuCDJ2C;ps+u\/:O7nLPE?,C$k8bbaJ"om>AfV,j]0C)#mXRUbb`c/`O[oma83H3&C8SgRQ7JJCRl48Q9`%X4?KX=Qmq6,D5<m7Wa\5hc8)Zb4qR;*Et>YMcKN@U+;_L&4Bk5n"O*Je0hCU`K@^e"U,R&'L,EVW";?i^246]";n7R+_V$*mA3*?%FQUspW"7Od77tE$E'85a12k3KC'uKVbQhV_lC_%QD?LG&oWb0UO1M^A\PS9UMB6:<J:U%X/fl2KUVgA6VW?Rq`!TW_231gl>pu)q%d=+qH5Mbii35mkd=/B)j%A";Q`hYYbLY5EE$p&q>O)U5/h_EgQle&o;r7J_o-nUOk^YrPJ(h"XnUAKK8d#!4bbKG3@AFHu"0-or)%U>BS<X,3AfQje8FH@gW"G,dE5#7Z^6Ka%H==\rt$Le?M`h@]+WH@3b_-_6B"),#Q@.L_jnhlb4Ue"!gK>@4l3l+K6s;:,1HrN0;2%CTmN9ldC=k?)fLnlr^Gp#c"Jo%78,Z!<_>7.b%]'3WT\lUN"Q]^!S3Jl"ss!M?uY'$U<%(<"iFPMpBUL+GT)P0o*9s\nA$ND+*hK%7sr3<#+pOR$S>05H4M?bI=?SRR0KMT.WIfKH>H]NZcX3=NJ">e8j7S%akp'i>J67l'l7Ma_N\4`p0((hKHBlT^g^fa7ZO[pHZ\e'%7CVFgphHr0!MGK)"p*'TIIoTGkmR-=`<Y/sK]aV[Q?WFY]".dM2'?gh@)#M[e6c91T\n52jA!u+;j[:h$hQMu*r,kpFH6ZV5UWPN%\<8Fg*>[eoS03c<O,<%OlAkenGb@(MaL,:r^RN`u;/2U(H$\0tWoi"t5?Dt44=\kq?99W#)@i)$V0N/+%_tSsSkdB,C?5@Ja@H43%;L(gS_#OqgpXsTG&\/3W]@d`C,?Uae"?$M)R.Ab&.>%.BJUo6/2I1Z=is"sSjHO+7)i6r$gt4JV9MtOo!kL?I)FOJCnnS%WU`rO/%Oo6%,-`=T+^>t/'k#EMM1LmX=K?NNk\Ogl"i^5L2##-KFD--q<nC3QgL3+A@n.Kj,p_:#e]l&.*d^^cm-Ng>=JS#cH3Zr+%6F#^<%qiN7_$rgbo7KHE.:pD#.*0blH9'WQD!/HXBMqlIm6Ji6@-3s@6LqHUC\SMMbS94R34YdFG0Nje@`TaF^95<Q#THT+0a`JsIo>k(;%4E`r#Z\BbBqq;H`_S\jCdBIl`!`V1dmoKk8jf27GC.UEE`[MQ9McO&N!qhe"jFIEi,S<gdCZ`>#V!XkhS,kl0%76ZSG;!TflD_6/%SJ$*uiT[=-r#[4j_9Xo%=/@@`Xbg4SF6UTO;G9',hGQ=\][OmMkNrUQ)9&%sJAU"X.3(sUg\[n)qRrGrU;F7WMkUJBkN<D@WYVpL%SIhBTB?P&WN>Zmt%2<`P5?8#>:J245YoHI&4ijtl^QXieVWNM_J'<G;Kq=go9TB`$:$8Z"6I4=+dH'nq?pf,Fi1!,.Z!^Wk5GF__%HR5."OPnC,P,.Q!O@%D.MD".KRjk.'Dc4\$O,fK@Y%_pZd7l_=6EMXQE[?Rk?p8f-8ht#c1m0+EQ7S;`5#afT91<&(^.YXsCcM3i%JrKi<%'lk`WKtZ#m\7&aCjF;dl(/9@,%Xo1:A"o>I0]u3WDCH$!*H%s^+<G_?pW&Xeu^Gn)gC`%$_#Z9*WUqgUXKc.f:pLtmUb$C%SP=_%T(DMc+05u.Fm0#6r]JT*i*J<A#Hf6l4qT^:<>NX.%j"rZg$bmSTVRc&nu:E+keS+C7*2LiM6GU6Eb"9hl?O%ZFERr7-Lsh#%-R5N7Vq1[6.kVp?W"5$:2aIh%M(-L>W%&DW;(HOJ>S"1'&<hq4bFHfZ9_&+j3e88A(QONM<'_tF4,%nEoM_7,O;5:N?M[d2AD>E]%<%k8Rdfl^B2Ri+aL;A/3!!?k2@ec0fJ;c#]lm5;'5uD$C'?-V6JC-^V6jGS&3unVPai%RMkBR-!#7P#`e%I(Z7paA;'7GSic0D^Y%[qa>BcAkJu-6"uHcr#N)dJGem;5s.c&;k(5ACUoT,&_I!eJVWjlE1SK@R@:TL740&$#V`E\:0t=!X,D]U$%<YjNb+l[-BXmcBa0T%<VE@7^VRO'D#)^pr4cEW0>"IarbA6;/jM#Rk[opM<io,BIhu=UX4,U9d83uo_^ac,41!dsFiW/0r155>1S]2nT]-;j&*$Fk$0fYl%)&a32-MN?TlDs!C*(mA8kHojr(sQ&TLS@3IoJm(`R6Tn8:#0f0SZ6PP7"DP==Z%pf[)c:I0]RNG9jtokrZ8@-PaFB[KnO,X(0)??%)7c6]_c`TAL"-JhO-ikmP\IiO]beH5:^2X2F$Y<&oP+>S>B)^8]6X@a2n+:JH-8EuWaJH:c$5cBqu/a:@<Rb+ZJK3.YAa;DpSf61%/Q$%,(u:-"fMBBf)L`+L(1K+h(gP,N@)<P6=!"a9r3Z9f5E?iDNjdBsJ>1UoUh6:*o/g&kX8j+le+1:H(&ZaF9<"N)jm.fad_^[K%[]fsNUuQJC()di7;/0KlOfZ?+LF%9<S-@)MP=TZ#%0"?1,q+#T-,it8/-GOM,^50f4(qkS?_4<5h:O^in+-sGmWqZeC0;Qa^.KQ$%%^$q!$fFm4V(aIQ/I_MAFjtD..)s3*h@ro/+j66S9Hcg46k#8jV$;u,h3UG+S**_V9F+s`%I+pP=B#;o_pDnbEGE#F.,9R&KNoo$%8VB]lq\Cq_\"G.FKo;4*2D6W3`di@NCi@Re4/<)F0krt:aapc9HVSD)2)E"7^.2dI!`R.lAT^[?-Jh+K\G9u?ZMW9LCslid):R`\%VAk8BP1u2Jf-m0S&cCO@#O8\]K=_]l:0^p7K*$2+SJHlW<X<N:X_fj)V"q$LDD[:T?Kedb1*Wa,"BLBo(,JKnQFl$("3G&uJ++2G%$j=`j#;qk"`<YPl(CeaZQ3^92s2m6G\T6hQ2(@G?<nPA<FbRK-!XQ9Ya\$hbR?D6Aqai4(1'@Gh]+1XuYl+*ihnFP\qlcV>9X:j:%>VJ0f:](km%GWe->ee#[\eLioA\Ds[?>lT"n>P>og\cJJ)q?=OkZu0opU/Z048gb++$TUlJ'$pAgRD9JrdOnHnK6*O^]*s%I.R?d%rI5o-mlu3pq"ap\j+#(`gqJ8er:KgFoAf59?U"H"QLW$Irp&#E5Q:?<rucG]g&~>%AI9_PrivateDataEnd